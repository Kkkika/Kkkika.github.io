<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>有趣</title>
      <link href="/2025/10/31/%E6%9C%89%E8%B6%A3/"/>
      <url>/2025/10/31/%E6%9C%89%E8%B6%A3/</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="密码错误，请重新输入" data-whm="认证失败，再试一试">  <script id="hbeData" type="hbeData" data-hmacdigest="1a47558e77f643ab1346e445dc3ebb8325755f68a438c4cc7f6eca7024a2dfae">77de38b37639084295c1a76af0e18a1d45a58e556b1ab66ab606eac82fdbbc660ba8c8e959d718402a19f8fa61f74ea25b688e43a587a677f0c57cea3e0cbb4136cc13640f22edac6a203a91473c4f86e4d3a23957802eb002ec60c6f22daa9b023a136b1eeca652664d23807eb51bf30d6e2dd6bff33758c1c747638edc7867843e70d6822c555062b3a1aeb783974e2773f67b21df9bdc2a6267924d6aefa6530e1e65c48ad1799e76e6ea1d1d0657ceee2fedb42441485475da90bbbd32ff269fd3e8769d16f8993381f32e0186c777a921a6118b5cb65693a68387e1e267f6cbc6305a4d5641e2743b282d0b6137db9846af2995e69d87f816133ede04178bc2338b217631107bbfde798acc559621b4c0d748f5845b14eb52ff5eb14e86aaa4370ea18b9db0c934a4a5d5e3a5c312898111b357f6840ccdfda6c536b6ae76c52e26373018b82e5c88f339782ae69adf3acb0dc4a2d3b5228c68f39c95085b26a62aba4075227a84ac66fc8af4a1602071e945af4c684a69987f483011adc0c13afef1f4868af3127541c4cf315d8bceecc5f1a01f7db8b07740a18210457cde7f0c18f17f3f49ed9eae2558aec17a05238934c1ad1fe408ce76bc21a44caddd7926f24a7570c246cc74e19e2baca5bfd09558b23bbb684ee5afcd2789ef78749bfc70a1e6e466816395c72ea2535addcc7eeccf6839673160c07869ecf779694cbe2b2cee4e3d03ab6f29e9a8657f21a51471e6f1afeaedc1576afd94837261a259f5ebac9d7830b613ed3a93c84e863793aad22e19dcda2e6283c311d13dda39dc136f65464cb31e119c259f995a681107513235b6d40860f813efdbc57f808dfb80b1968f3cdd650432f4e38486ab4afa90e11cec388fbd3cd49d63f1c48c04c0dc81df81b8b1e910f890e070e09d4a70f5abeb0798dbe74dc1c895527e39d92b167dc70562b9dfd10ba5d2b37e18d8e45454451de80398f3b79df8e4054a8af084456c17ef4117514ed70e90f33c1f93016bac7a8f9e4a7d5dcb80078942069eec72676c568eacca3d5677bcf20b788fcd780fe4d680f806f0e097a1ac892a6fc0d09063695ab4e76761d074c94a63c40eaa8de23b303d67344781faa97e5f3e791484937d803180ce7ce1e30f2d89c61f41bce5fbae9afd437cc0c7c808b4d83dad3a32385d58bed8768c3529b6cc752a45ab262c2cd244b24c2f79ec1dd68d09bb1f8812348f8abaea7ec769a4bd590699295f53f35e9d4bf5b3c419e5571d396f5708adf04d7a62dcd74cc5ee3f2408add326cf57fa6b7014bbff2cc908bc29b65c79e5bff545249ff308f69b974d995a44d2f40e9bcd6afbef96fe91b5a30251893b59e78a84156b2213953c30a50f45a0acb051f18c0c87becb2c01190a4979ec8ce7aeb9cc10ad2c4c75e76c1e005bf2256e2734d771507e436e27c797789fc3c691174ad0eda2258c71d6f1707f7f086ce958668774351c36c0c3e6ccd45b6d019e4ed7e6df325b2d515b8d36c37926390f1bb7ca4c5e5934b4d28c17d24ea7abf4b9df00d5e4e0fd874279396e983d7962f0cccf3d425f384784d2cba975aef608c6c96c6788331cab2a58e3b012fdc0a5567c4b37b9e0233eff500766b39494caf78e805d6578bb110202fb0c8e463b041329fd6dd1e35289a83ba4eb8dc471dcc86aeb9cd68b48b89c6fa1dfc582259a99c4007e8180a2ef747df57f69da6bf994085520282e421c2fa474b6e653371852a9726368a8bb0a32d33fc744de209e898b9fa946b16ba857a717cbbfe4d4b02ab0c1fb9dc7d1fcaecfd6dab4fceddcb4f614d0cac4a7d399b287c6206e4c2a3603e428d026f6217d50facb206ad4f62d6d1c23e80019d9471c674062d075a021d817bf0af2aedb77e076b88f62a0eb798f9b415037313b743cc3c64c77162aa2e7c96913ec7697da860dee984c19649f2627025a0421c3ec219c3140b7812b3f89ac0e08050c605c7597c3a7ef428fd5891284f6ac2bd8419733dc84eb9bbaac4602f64e2c501b896cfbbe32a2e71729b6fcc1a8d8721a82fe12ea476e2c9afa166ebf35bdc33a18ab3430f127ddf244e1d32f23571a3605c67767ab9c0637b40d5e6ca6063eb01bbdc4b09d09e4a81aa305f18112b4443fc91606b02eef271b7027f4023a56d32f8ad6e5184bd4aeb618b6cc4801065a46c7ca54226e30894259f9cfce3b5fca8599b859e14d8e395cb6abbe7ea4738894aa9a9fe8306ee0ac657fa5b1b6b3865e57c897a76085c479bc3089de3c07f767ce87f2339dd6a026781d32cbb3650b6fbf0353fcbd07544131e35575eb49c0131120c873482da3c87aa42994933072883d7353f86a82640d0fb604c7e9cb9478de5388fe7c262858cc24cacd50af77996710f4c83d28f3db0e87eadea041154343f8254f6b715c625b24ee31afa74f35628d293ed2bcd0b16c2be6965108da08794cf57c7446220664ca930d7409a025fb79d2a57f2c381a2e85b622a87e96997fcd61d4fb9f9eb35393cc09538a8f2c9f50655a936c75250785fda1004787cb08a756fa806e5beb088261967be969e5b876ef200c36886dc7fc9e81145cb72593573cdf33247a02223fbc9ce6f8dd28703a220721c3bd2224542aaf21177abddfcf5a878fde83458828df8336e491ae09ff061051b5c5bb19dcebcdbabcdab96f6f1a1348908f4b5133de50e2550de121563ddc01a78703f2bb4508f7b2cef56dc804d3098b28e54418045d26eadd6854a86829a2acc47dba4bd6da3a909923a085720052caad6df3387246e7f3ab46fd5d6bda7386ff872715dbc868d02c62117813ad9a7ed7a55c25305207f83643b03898a2b2c5c3c7f8555185bebfe48c351734b0aa1d588dd3b167e542b0ffd558e7da76d838e2276e30b7c03a7ad52f1c3200470d8acc73e2f0c9c30df962553e292dddebdf3c96de967c53a3f47adf891b797e965ba9fc767293a907fc34b9c6b770c5a19f52d72d3b924b822b8c7aff0fa31a6530555f39ec27d2e294cf7dc745147f1f73139b711d5909e7738d68d765e22a34af43e5d380932eeb285e331ef74b5ff130d245d5ba3d9d98aa9d3af1ed0eeb1f4ae34a4eb5c3a6a9388ea8b60b40caf4b7636653231262cf3c314316883f4b8da4291397d6e90e949f7c8f7aaf95d2d58adcb156cb1bd0a9b4a95857de19bd484ef8ae588dd698f47bf9522930445a80501e207126fa7a92a90dabb4dcc2542cbcf7f425cc6a658f083107a225c49d6837eade0125ec338217b2d86ca8cc87ec52f6362a260dd74eba3af53ad75b96f76259b37eb443374cca7e332faac34e9d1a7857dac4f94694bc8d77d3ad866062895cbe1c1ed8d335cb4eea285e00e64ad3a6bc7ac2cb77e75334897b33677c6080914bf0897e5b8ab9cc07522d11f17673e4d110401631f49e2982855c6ea76d733dbba4623cc88919491832846c6370e9ba602ae101f543eb1b8aaa2109717342a91cf628921f34c8438a9ff3a29d1de008aa3be73860293f198b4edf589dec835445687561fe05c6f8e92a4dbe06a51be55e429fc03e3874e490e544b170baac47177da4529071135e136d75c7124a506bf67843a15677eded522310b9d45ae899c6654c73c2a3f05625d47d126e54decd434136eb07b4c00c84b408d17871d9b491e8a9c3c5cde5cc80e995e1069c50030b110b7c3b15bc91c5de54124bb2966d3f3c7ed32a103a42539d6985eef1302ab15ae538b79bbece6fe18976567f4c94adca4f583f8758c66b64cb9c6703a6ae00003d83decc0a15421dd492770374d5c36303ddf1a60deabfaa8eec089ee8611952d294c35bc1069638763c78fd1dac06d87574ae88a1501a950f9669ddb2810e78753aace0131874aea40c8669c78a4c02b906c13d19bbfee898d00afb5f7e9f6c7a90cf3be45d7721a022ca03f6cc9b639f63cd5d579a749f3a098a064ca9b4a99eb0fd2db161c8d52a56a9ddda0afebda9f4ee0b2b41357d663f47714f91bf3c5e0059a0a179c61288604a63e2b37d84ce2b0e9bb33352d4ddddc45c96155fdeb8aa1bebaa8442b564b208f36f01ed21caa59e87a2f3655b142ddc8e23678696de5c21b3955bcd1a13e75dbbd58a713f46dd8f12e6db8122c90b16581d85fb78a52bb8a4d25911add155f9aade99d2c169ecd720cad34a2b002e3df1fd502b3a12dc173a0fcb2c2d07485b2516aa5711bb3f032d830b267aa9200672d966516903e3a26b63fbce8a8a607cfa931a711561724cf295bed623a8a383caa116533fdb82845efae79c70a6c16e4755950b3ce0302052db814a40a4d48e702ee2f65a9d851742d7692f3b25a21c00b9e95bc60559d5e81af6c0d68e8118caae9b2c2fc5b0b2ebe7513199457bae25049a9e2013d4a85200b4b29980188c48db072097d57f39ccff74db1dc02663a8e9f37fc7b443f057476c1a3458477625e5b1a333ffd478ed888b2c83699534ee222185aa8c0d7a5b18ec13a03f9e13b2bb1d719ac7676767f9457e97d68b55d2b0c8fd2b27af9d856f1109543ade0af5a4faa03e8c6861943dd16b2d1c89872e29915df947b2f03d79650ef2c818f572a245ff125521413d6e9e2babbeaadf475f76cc1ce2e4b004e63cae9662e86abeddcf58c59fb29aeae2a787bba98b437c1803e932e77fb17211d7089542e00f4dae47cca6dcd939a49121f949907e1c77ca23fc8fd5af093d24fcfc13f4cb95097c62f25ff39185f2d826d8067117ea403201132db28450ff54d5784826f65f55f765a1581524c65c1e517e87f28c4479b4c3def6f7a5f0370417f48de02ba3e4c8b5a4e63d1b2ade1062e62c0f04fccbd7c1a853cd7c28facb20f4f9204e77a550ef6c979efcf19f3cf82513919ceefb28bb18752fa90fbded053769bab977b1bc4ed501f565ac1dcdd2a2447420c938029fcc5009afbfa3c937ee6a2a11527df740bc9aa5d86616b1d3b26559d7acb5a968cb5fe240c65c2924ac6c4c68c70a54456e3768064139fc0b47be5eef6641347e48d55f333f4b9e905e9e48aec2456f5df7565bb84b1d8dbf39f1451931378a2f97772f8eadd6c80ef10f02bb5bedeedaedfbf8a0f3f5725ec3dc89b5f2b98111610f05dc873107f5627c98488d6c3b1c350b5ea9510313a4343219029a0f3714d1d49c6aa7cd1ccee6d22496a35e52ffaee3d8e57994c20b20ffa3aeb54ff41290c64fd4d3acec106e7fcb858b853603b2231e9169f763e6bd2e8357e431ed8691de30dc46477ede77b9034173725779cca1822cb9c1d144fde0e12fcbb2d3d188ab03e6892d50f57e8461e1391fe57dae1f907904e806946026d4944f68d70553aab703d69ce62a40cdf16be0b391d0aa8c1c82e61586ac3c92b015786c404ae8d8c2fc1f0644951cb200a68486b4f4ed659a1732e57bea44268a0565415ffba83c99a9e9c8245d14d4a3be5a4ba25234ea6dc56afc07c40c4d9ba8434c3b9cb1ce91ff5d20a01a3fccc94f5c72d4ce4ef59fbdacb799dbcab0d18ec7546e84e015e90849d4c1da6e5092f6392284974267f12eca2655f86095cc1657763330b74fff4100764a13b7cce4c76e27ed69031b96cecb4d1fef44f4f60ab61f6ac17f54a41e88e9369f8af765ce6c4eaaed756e68c4ed623103aa4ace7fbe17357a6b27cb9e2e8821d9f108c165561e6d2875530f165226c57f5ae0df1456940424d8080f085a9774c74d97decaccf8149c1918f0bfd976974d174de6ab301aca114aae9a1fbb6bff13b6279b7e8677378505184b805776b9371648c6c45b22c06f24104f8863fed5459679aa9c0be07bbd8cf41ecb35220a97c262884f9cb8c268576073d0b0e4425b36459c7be8fe1631bcd40be29290f191e3ab3b1d7436ec3fd3b8e4fac20937b77b2ebdc52640f72f7bd00265c287ba4298b7e73287bec3aeb106ae7c2fca8d80d95b0d96abdd7303c6f58e7a2bcd56e9f56af7254c287481a690f5bbd22535574b32e67ce63aa0f848d3842ea738ec9bd2f5b5d577f0c0dad813eda0e069398a0b45dbea9dcd79905805f3ea25179f46ed286f1656ff74e0e87fd8d77324df02a70faacc593d3a512b6b7e0cdd269eef2039a033fdf4d990f460c431365546555d85ca304d67edec298b9ee8bf1648f94861c6ae837385b457dc9b2695015ba6b6bbf59495c525f378e3d15b9847e54d2dc65ef38d954de5a0a16b760d5d3ce3e5073ffafb0730697da70f7a2a050b96794b74f34a0220575212b3f00e3859e1eaf1c79dccb496223531c1e1866f9607333a833c13d1c8a82f6ddd95b066dbc9f527889f8dc80a1fb02d18d1f020085f7b80fd0e0b90aebabc644ad5ac46e5c577e5c3befa4379413efa66a34330b7e4b0163bff4f9c995120d79594b9feb13e30f3c72deba095d61727dda28cbdfc76d421dfb90635f077627fd8f308133699924606fb2c929d13a0b2ca04f85ec4bab003a98c8ecb91f4e7b02c4270846362cb8d2c7b4a1376e02f4f96e422b1c2b90f7490fdfe522a7f36532cf03b5bdbd3d87cacdd422c9d9c36daac115591977fed9e57de933fb5da78bf8c746c5bd673b8e493ad078535174fd840c3ff62ae52c095718f1d2c9e7063183d4dd26c531fe65e0c8bfb0f8b3e3179db85a4b6ab5f0d19a0ea48f29f029f574830af61b2ab068ac44be8ba19e2039ad25b178dcbcaa1abfb682a56865176fa572406283462419b8037b69b7d01167fef3614bb689520be91a74c74aa0405bda2f037b433577c8ce19d93891c38743359788f63c635a24b27c3d3b5260a92bbb05795719cabb83cd8e7b2ed8a8ece8d23cce5c8bfe03c0f53f0dd940a71a1f045bbb37dba93f42a8eea862a99d1427a889ff05cda17038f2f1546616a583f4f35c5319232615b9ce4c41b2891af1a4d4abb743ad6b2d3ed9778eb5e1100b24092f8d9d6afbac8834a10c0466ab0062e63ef5c6efe3687f55dd9150644332e603517da77078bc0d42457076454a6fe45c8d4595cb7358267975a6f87a929e0bdba24dd846fec92d59b6526fefb2be396bd867a8005eda34fa954472946eb10930e96c3eb3e042083a37faa6a36cfff596604fcce4a825a6a9fa8d7770a8475a8ab807c577af5aa7334d1f1a90fb33da06410488a5d5821edf523f141fc52fb7f530f5b664ba2524a680514a176979b63849a8009c1d5b4a2fef5a4436d1395b4cdf7b6b8954abb220d1e8abfbe38b39f3983fad332e933282c7229e3fd186497e0d308d5e5dde95a103ebc1155a4478d57399069248ee8cc25c78d4943bb18a83d1c14582798764a8272f3df06a03721064d2f7ec44580ccb116832d87803bb93eeb1be9d4d5ac692321445f5cfe5c4fa372a2e739c3deaedd89e57f0dad64fd9a5af6b5e459b4895a0eb088260c1457f20fc55a5f54b9a49ae8ea10fece5654bc4d01f73040fff8621c417f8fd99094cb4b5ff048eee5aea0477b69d2c54dc80741ae4d5317a41502c5856c4e17b77f3704c1a0adc4991944f644f1f91ed415e54c0734b1b0c5027a4e6cbc1724c2a05fe95ec2b53e527871a273c4a228307b4a05d7775df410ffd2d3f5eeef7baf2056c1da8c89a350af4c1455850287a5ae08b2cfc90bea6384d2627b990201d4ffad1b14bd9813e18d8f3fff481c4eec373b01019c669a6e22e3c5b58d470f4d65d6b38c2265035890670eb23c6955efa3d31c12e81ace075700d307fc6a2c174dd61a9564ea503d5cdf6c70601f7e977265fb826ac004344aa5b2f379b7d61da58b425bbb4dc2d21da54e8d975c704eccde2807aadd5f4fcc9e206b3ef068666881e353e39ba7a8aa0a278e2dab6ca953b385e32b070f521042029015df74a4c6c21ba7b0cdce76766a25fd8603392cbaac4f134c0a84e25997fbcee8ae705951f5942925ce0f516e7411a96dac96be566499a0bba9446e5b52ca16cc018b79dc9420eeada529e8e5975c1a784519cbcffd37a951611cf029568d7851c453ef627d2da25ab5a5d9a067dfe2db58ec6c1c361c8f7673a557bb9920f15f1b246e4fae12f07de453ab48df7423f6a6de21fcaaf76f5d77922b569612c0ed3cddb61c3ae907d2a5</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-blink">      <input class="hbe hbe-input-field hbe-input-field-blink" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-blink" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-blink" data-content="请输入密码">请输入密码</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>跟着大佬学数分2</title>
      <link href="/2025/10/27/%E8%B7%9F%E7%9D%80%E5%A4%A7%E4%BD%AC%E5%AD%A6%E6%95%B0%E5%88%862/"/>
      <url>/2025/10/27/%E8%B7%9F%E7%9D%80%E5%A4%A7%E4%BD%AC%E5%AD%A6%E6%95%B0%E5%88%862/</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="密码错误，请重新输入" data-whm="认证失败，再试一试">  <script id="hbeData" type="hbeData" data-hmacdigest="69e656f5d5a1552386e2957d97630bf14f6b6650b304f7faec4c6ee443b2079d"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-blink">      <input class="hbe hbe-input-field hbe-input-field-blink" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-blink" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-blink" data-content="请输入密码">请输入密码</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>跟着大佬练数分</title>
      <link href="/2025/10/24/%E8%B7%9F%E7%9D%80%E5%A4%A7%E4%BD%AC%E7%BB%83%E6%95%B0%E5%88%86/"/>
      <url>/2025/10/24/%E8%B7%9F%E7%9D%80%E5%A4%A7%E4%BD%AC%E7%BB%83%E6%95%B0%E5%88%86/</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="密码错误，请重新输入" data-whm="认证失败，再试一试">  <script id="hbeData" type="hbeData" data-hmacdigest="d959b32c4923b3520383a8d2c4911944839d5bb49086fc8b25d0b424e7a74100"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-blink">      <input class="hbe hbe-input-field hbe-input-field-blink" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-blink" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-blink" data-content="请输入密码">请输入密码</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>AB实验</title>
      <link href="/2025/10/22/AB%E5%AE%9E%E9%AA%8C/"/>
      <url>/2025/10/22/AB%E5%AE%9E%E9%AA%8C/</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="密码错误，请重新输入" data-whm="认证失败，再试一试">  <script id="hbeData" type="hbeData" data-hmacdigest="daf9e9b2920689d64caee7e1772c557875113115697bea18f622f85265fdd3a4">98b9bce3395e8307c58744c126888424fa170c71ed8831ec79865b50b8840fd0c805355e21026a42711caca2b5265c1308f3e392c123d62db61338dd5eb21d69d89364a49816a4e8ea9df02df06ab85222195b08f26e9e3fea7943a3399d1108a3140c3da717c45e2cbd29069248b945e494a2331bfdae4643d031923831c19795a57e6d52b5a0ac4733f380468ec109cf19bc529acb3ccb6b43f269ebe5bf00df41277e37821e1cf437b086c6faab5f3a9e5bfd7d2af2e3f39d5e6f031d4b7c47b4b3cdd7bfb878faa798f79e7015752f60cdd562e2602da0f97699c96458c617e8a338f53908f0ffaf43ed915b92e168b8e1de2b5b22375c1c074f68561c83eb2f2b5a2f6c6106caf2fce6582789b2a584958e579727a25b5b2e0a6c3433ece1f8d12dfb42f455bb9e5b54db845dd979e5c4f6c529c7a706fc1ba0fd69130d270b46995b6e54e44348a3368858f6ba70295b501eae5463532f16fc3eab732372a65d645a9f68b40c270955c631348263d33b9ec74bb512ea6a38792a84f1b5a1fe733f623bdd382c94b318776695c7599388d855b3d7f97fed1d791c64b2d30a779ed63fa33e57b95580efc2d5b9fde44ba104d26a2279956d9b037657ce9bd50acedcfdcd00d234e4e0849bef8804175bbd42c6854020157ef79f3c018cd65835321cc6ccebfd2fedf5e9861678a7dce97f0012cb926235f8865036a186d125324d4359d4436bd4b2400539b0c107cc147ecfdc025be1c0669a42e5848a1618551a57f3e8aa89b58e68e195369d8292830f1f7f50d2044829db6296394e7328cd6b5b04b151a0ddf911e52069a3ab576898e3660fea137100cc40ec3310f351e9f07f28679f8ee1eeb8134bfafc995f95886268b2114b61e26e3eef2d8abdfe218035f256f1cc894d88e6afbb210f17c7bb1139c42ac52748042f8337c963e2e5ce99775712ca94eb8c0c8f973ba37e2e4e9f523a846c71f6781b05e941148c3137eb11b475a0f9844e77839447fa947247c7aea2f47481e6d6ac320312443f1f24637980f47da7c8ac2dd4eba0f799a20ca5a3e7579958de8fdbf7083369c159106d3e5cda24b0655984f93447e291788f554324050058cc2fd776b48858e172bcca06c41c1875a9ab350bedfb7b59a7979472a1fef463e7eaebf90009e0</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-blink">      <input class="hbe hbe-input-field hbe-input-field-blink" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-blink" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-blink" data-content="请输入密码">请输入密码</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      
        <tags>
            
            <tag> ABtest </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SQL窗口函数</title>
      <link href="/2025/10/21/SQL%E7%AA%97%E5%8F%A3%E5%87%BD%E6%95%B0/"/>
      <url>/2025/10/21/SQL%E7%AA%97%E5%8F%A3%E5%87%BD%E6%95%B0/</url>
      
        <content type="html"><![CDATA[<ul><li>SQL 窗口函数 有多少</li><li>列出最常用模板加示例</li><li>先 PARTITION → 再 ORDER → 最后 ROWS&#x2F;RANGE 详细讲解</li><li>详细拆解每一步的含义、作用、执行顺序，以及它们如何共同决定窗口函数的计算结果。</li></ul><p>🍋窗口函数 &#x3D; 聚合函数 + 保留明细行</p><p>在 SQL 中，窗口函数允许我们对<strong>查询结果集中的每一行</strong>，基于其“窗口”（即一组相关行）进行计算，而<strong>不会将多行聚合成一行</strong>（区别于 GROUP BY）。</p><p>这三个部分（partition、order、rows&#x2F;range）共同定义了一个“窗口”——即：对当前行而言，哪些其他行会被纳入计算范围。</p><h1 id="一句话核心"><a href="#一句话核心" class="headerlink" title="一句话核心"></a>一句话核心</h1><p>一句话：先分组（<code>partition by</code>），再排序（<code>order by</code>），最后定窗口（<code>rows/range</code>），函数只在窗口内算。</p><blockquote><p><code>over</code> 是窗口函数的标志，它定义了函数作用的“窗口范围”。</p></blockquote><ol><li>partition：先分组，各算各的。<em>类似 GROUP BY，但不下沉行</em></li><li>order：组内排队，定先后。  </li><li>rows&#x2F;range：再框定“当前行±几行”参与计算。</li></ol><h2 id="rows-range的语法："><a href="#rows-range的语法：" class="headerlink" title="rows&#x2F;range的语法："></a>rows&#x2F;range的语法：</h2><p><code>rows</code> 按“物理行”框范围，<code>range</code> 按“字段值”框范围，写法都是</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">rows</span><span class="operator">/</span><span class="keyword">range</span> <span class="keyword">between</span> 边界<span class="number">1</span> <span class="keyword">and</span> 边界<span class="number">2</span></span><br></pre></td></tr></table></figure><p>起点&#x2F;终点四选一：</p><ul><li><code>unbounded preceding</code>  分区头</li><li><code>n preceding</code>          前 n 行&#x2F;值</li><li><code>current row</code>          当前行&#x2F;值</li><li><code>n following</code>          后 n 行&#x2F;值</li><li><code>unbounded following</code>  分区尾</li></ul><p>示例：</p><ol><li><p>前两行</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">rows</span> <span class="keyword">between</span> <span class="number">1</span> preceding <span class="keyword">and</span> <span class="keyword">current</span> <span class="type">row</span></span><br></pre></td></tr></table></figure></li><li><p>分区的所有行</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">rows</span> <span class="keyword">between</span> unbounded preceding <span class="keyword">and</span> unbounded following</span><br></pre></td></tr></table></figure></li><li><p>日期往前推一个月</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="type">date</span>,sales,<span class="built_in">sum</span>(sales) <span class="keyword">over</span>(<span class="keyword">order</span> <span class="keyword">by</span> <span class="type">date</span></span><br><span class="line"><span class="keyword">range</span> <span class="keyword">between</span> <span class="type">interval</span> <span class="string">&#x27;1 month&#x27;</span> preceding <span class="keyword">and</span> <span class="keyword">current</span> <span class="type">row</span>) <span class="keyword">as</span> month_cum</span><br><span class="line"><span class="keyword">from</span> sales_data</span><br></pre></td></tr></table></figure></li></ol><ul><li><code>range between interval &#39;1 month&#39; preceding and current row</code></li><li>把日期值落在当前日期往前推 1 个月到当前日期之间的所有行都圈进来。物理行数不固定，只要日期差在 1 个月内就算，哪怕同一日期有 100 行也全部收进窗口。如现在是9.25，前100行刚好是9.1，前200行刚好是8.25，前201行刚好是8.24，那就取前200行</li></ul><h1 id="窗口函数的函数"><a href="#窗口函数的函数" class="headerlink" title="窗口函数的函数"></a>窗口函数的函数</h1><ul><li>列出sql窗口函数的所有函数，每个函数用一句话讲清楚它的用途<ul><li>列出 SQL 标准中定义的 全部窗口函数（Window Function），每个函数用一句话概括其核心用途</li><li>给出基于我提供的 5 行样例数据，把 24 个窗口函数全部跑一遍的完整 SQL 与查询结果。为了节省篇幅，所有函数放在一条 SELECT 里，按上面罗列顺序依次命名别名。</li></ul></li><li>写得不够清晰，用起来不够<ul><li>给出一份“直接能抄、一眼能懂”的速查表。 左边是“我此刻想干什么”，右边是“该用哪个窗口函数、怎么写、注意什么”。 所有例子都基于同一张表</li></ul></li><li>没懂&#x2F;什么意思<ul><li>rows 按“物理行”框范围，range 按“字段值”框范围没懂</li><li>ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING什么意思</li><li>没懂</li><li>还是没懂，拆解语法</li><li>我不会用，教我</li></ul></li><li>给出具体示例</li></ul><h2 id="排序类"><a href="#排序类" class="headerlink" title="排序类"></a>排序类</h2><ol><li>row_number()<br>连续唯一序号（1,2,3,4）</li><li>rank()<br>每一行按排序值<strong>赋予名次</strong>，同值同秩，后续名次会跳号。<br>同值同秩：并列时排名相同，后续序号跳过（1,2,2,4）</li><li>dense_rank()<br>同 rank()，但同值同秩后不跳号，名次连续。<br>并列时排名相同，序号连续（1,2,2,3）</li><li>ntile(n)<br>将数据有序地平均分配到指定数量（n）的桶中，并返回所属桶号。</li></ol><p><strong>示例：</strong><code>shop店铺，date日期，sales销售额</code></p><table><thead><tr><th>shop</th><th>date</th><th>sales</th><th>rn</th><th>rnk</th><th>d_rnk</th><th>ntile3</th></tr></thead><tbody><tr><td>A店</td><td>2025&#x2F;9&#x2F;1</td><td>100</td><td>1</td><td>7</td><td>6</td><td>3</td></tr><tr><td>A店</td><td>2025&#x2F;9&#x2F;2</td><td>200</td><td>2</td><td>5</td><td>4</td><td>2</td></tr><tr><td>A店</td><td>2025&#x2F;9&#x2F;3</td><td>300</td><td>3</td><td>3</td><td>2</td><td>1</td></tr><tr><td>A店</td><td>2025&#x2F;9&#x2F;4</td><td>400</td><td>4</td><td>1</td><td>1</td><td>1</td></tr><tr><td>B店</td><td>2025&#x2F;9&#x2F;1</td><td>150</td><td>1</td><td>6</td><td>5</td><td>3</td></tr><tr><td>B店</td><td>2025&#x2F;9&#x2F;2</td><td>250</td><td>2</td><td>4</td><td>3</td><td>2</td></tr><tr><td>B店</td><td>2025&#x2F;9&#x2F;3</td><td>400</td><td>3</td><td>1</td><td>1</td><td>1</td></tr></tbody></table><h2 id="取值类（偏移窗口函数）"><a href="#取值类（偏移窗口函数）" class="headerlink" title="取值类（偏移窗口函数）"></a>取值类（偏移窗口函数）</h2><p><strong>速查：</strong></p><ul><li><code>lag</code> 往前看，<code>lead</code> 往后看，<code>first_value</code> 队头，<code>last_value</code> 队尾（可到当前行），<code>nth_value</code> 第 n 个。</li></ul><ol><li>lag(expr, n) 获取当前行之前<strong>第n行</strong>的数据</li><li>lesd(expr, n) 获取当前行之后<strong>第n行</strong>的数据</li><li>first_value(expr) 返回<strong>窗口</strong>内第一行的数据</li><li>first_value(expr) 返回<strong>窗口</strong>内第一行的数据</li><li>nth_value(expr, n) 返回<strong>窗口</strong>内第n行的数据</li></ol><blockquote><p>expr &#x3D; expression，就是“任何能算出一个值的式子”——列名、常量、函数、加减乘除、case when … 都算。</p></blockquote><p><strong>示例：</strong><code>shop店铺，date日期，sales销售额</code></p><table><thead><tr><th>shop</th><th>date</th><th>sales</th><th>lag1</th><th>lead1</th><th>first_val</th><th>last_val</th><th>nth2</th></tr></thead><tbody><tr><td>A店</td><td>2025&#x2F;9&#x2F;1</td><td>100</td><td>null</td><td>200</td><td><strong>100</strong></td><td>400</td><td>200</td></tr><tr><td>A店</td><td>2025&#x2F;9&#x2F;2</td><td>200</td><td>100</td><td>300</td><td><strong>100</strong></td><td>400</td><td>200</td></tr><tr><td>A店</td><td>2025&#x2F;9&#x2F;3</td><td>300</td><td>200</td><td>400</td><td><strong>100</strong></td><td>400</td><td>200</td></tr><tr><td>A店</td><td>2025&#x2F;9&#x2F;4</td><td>400</td><td>300</td><td>null</td><td><strong>100</strong></td><td>400</td><td>200</td></tr><tr><td>B店</td><td>2025&#x2F;9&#x2F;1</td><td>150</td><td>null</td><td>250</td><td>150</td><td>400</td><td><strong>250</strong></td></tr><tr><td>B店</td><td>2025&#x2F;9&#x2F;2</td><td>250</td><td>150</td><td>400</td><td>150</td><td>400</td><td><strong>250</strong></td></tr><tr><td>B店</td><td>2025&#x2F;9&#x2F;3</td><td>400</td><td>250</td><td>null</td><td>150</td><td>400</td><td><strong>250</strong></td></tr></tbody></table><ul><li>以下均按shop分区，按date升序<ul><li><code>lag1</code> ＝ 上一行 sales；首行为 null。</li><li><code>lead1</code> ＝ 下一行 sales；末行为 null。</li><li><code>first_val</code> ＝ 该店第一行 sales（恒 100&#x2F;150）。</li><li><code>last_val</code> ＝ 该店最后一行 sales（400），因为手动把 frame 拉到整个分区。</li><li><code>nth2</code> ＝ 该店第二行 sales（200&#x2F;250）。</li></ul></li><li><code>last_value(sales)    over(partition by shop order by date rows between unbounded preceding and unbounded following) as last_val</code>是不是冗余了<ul><li>默认不写 frame 时，<code>last_value</code> 的窗口是 <code>range between unbounded preceding and current row</code> → 只能看到“第一行 → 当前行”，最后一行根本还没出现，因此这句 frame 非冗余，是必需。</li><li>Frame?<br>frame &#x3D; 窗口帧，就是“在分区内再圈一个小范围”的那一段定义</li></ul></li></ul><h2 id="聚合类（作为窗口函数使用）"><a href="#聚合类（作为窗口函数使用）" class="headerlink" title="聚合类（作为窗口函数使用）"></a>聚合类（作为窗口函数使用）</h2><blockquote><p>把 GROUP BY 的聚合结果“摊平”到每一行，还能让它只累加当前行之前、或前后 N 行，而不是一次性全算完。</p></blockquote><ol><li>sum(expr) 计算分区内（或框架内）expr 的累计和。</li><li>avg(expr) 计算分区内（或框架内）expr 的累计平均值。</li><li>count(expr) 统计分区内（或框架内）非 NULL 行数。</li><li>min(expr) 取分区内（或框架内）到当前行的最小值。</li><li>max(expr) 取分区内（或框架内）到当前行的最大值。</li></ol><p><strong>示例：</strong><code>shop店铺，date日期，sales销售额</code></p><table><thead><tr><th>shop</th><th>date</th><th>sales</th><th>run_sum</th><th>run_avg</th><th>run_cnt</th><th>run_min</th><th>run_max</th></tr></thead><tbody><tr><td>A店</td><td>2025&#x2F;9&#x2F;1</td><td>100</td><td>100</td><td>100</td><td>1</td><td>100</td><td>100</td></tr><tr><td>A店</td><td>2025&#x2F;9&#x2F;2</td><td>200</td><td>300</td><td>150</td><td>2</td><td>100</td><td>200</td></tr><tr><td>A店</td><td>2025&#x2F;9&#x2F;3</td><td>300</td><td>600</td><td>200</td><td>3</td><td>100</td><td>300</td></tr><tr><td>A店</td><td>2025&#x2F;9&#x2F;4</td><td>400</td><td>1000</td><td>250</td><td>4</td><td>100</td><td>400</td></tr><tr><td>B店</td><td>2025&#x2F;9&#x2F;1</td><td>150</td><td>150</td><td>150</td><td>1</td><td>150</td><td>150</td></tr><tr><td>B店</td><td>2025&#x2F;9&#x2F;2</td><td>250</td><td>400</td><td>200</td><td>2</td><td>150</td><td>250</td></tr><tr><td>B店</td><td>2025&#x2F;9&#x2F;3</td><td>400</td><td>800</td><td>266.7</td><td>3</td><td>150</td><td>400</td></tr><tr><td>B店</td><td>2025&#x2F;9&#x2F;4</td><td>null</td><td>800</td><td>266.7</td><td>3</td><td>150</td><td>400</td></tr></tbody></table><p>把这一批结果一眼看懂：</p><ul><li>带 <code>ORDER BY</code> 的那 5 个（run_*）。<br>默认窗口 &#x3D; 从分区第一行累加到当前行，所以值逐行变大（或保持），就是“店铺内到当天的累计和&#x2F;均值&#x2F;行数&#x2F;最小&#x2F;最大”。</li></ul><h2 id="统计类"><a href="#统计类" class="headerlink" title="统计类"></a>统计类</h2><ol><li>percent_rank() 计算当前行的相对排名（百分比），取值 0～1。公式为：(rank - 1) &#x2F; (总行数 - 1)</li><li>cume_dist() 计算当前行的累积分布（小于等于当前值的行数占总行数的比例）</li><li>stddev_pop(expr) 计算分区内总体标准差。 衡量数据相对于平均数的离散程度。适用于分析完整总体（而非样本）的波动性</li><li>stddev_samp(expr) 计算分区内样本标准差。 当数据是总体中的一个样本时，使用此函数可得到对总体标准差的无偏估计</li><li>var_pop(expr) 计算分区内总体方差。 标准差的平方，同样反映数据离散程度，但单位是原数据的平方</li><li>var_samp(expr) 计算分区内样本方差。 分母为n-1，是对总体方差的无偏估计。常用于抽样数据</li><li>covar_pop(y, x) 计算分区内两变量的总体协方差。 衡量两个变量的总体协同变化趋势。值为正表示正相关，为负表示负相关</li><li>covar_samp(y, x) 计算分区内两变量的样本协方差。 基于样本数据对总体协方差进行无偏估计</li><li>corr(y, x) 计算分区内两变量的皮尔逊相关系数。 衡量两个变量间的线性相关程度，返回值介于-1（完全负相关）和1（完全正相关）之间，结果已标准化，不受数据原始尺度影响</li><li>regr_*（系列） 用于执行<strong>线性回归分析</strong>。如 regr_slope(斜率)、regr_intercept(截距)、regr_r2(决定系数)等</li></ol><ul><li><strong>PERCENT_RANK()和CUME_DIST()这两个函数，销售额大的数值大还是小？日常使用，用降序还是升序？</strong><ul><li>降序（最常用，看头部好数据）：<ul><li>销售额越高 → 两个函数的值越小（最高销售额对应 PERCENT_RANK&#x3D;0、CUME_DIST&#x3D;1 &#x2F; 总行数）</li><li>解读直觉：值越小 &#x3D; 表现越好（比如 PERCENT_RANK&#x3D;0.1 → 比 90% 的对象好；CUME_DIST&#x3D;0.2 → 高价值数据占 20%）</li></ul></li><li>升序（仅用在看尾部差数据）：<ul><li>销售额越低 → 两个函数的值越小（最低销售额对应 PERCENT_RANK&#x3D;0、CUME_DIST&#x3D;1 &#x2F; 总行数）</li><li>解读直觉：值越小 &#x3D; 表现越差（比如 PERCENT_RANK&#x3D;0.1 → 比 90% 的对象差；CUME_DIST&#x3D;0.3 → 低价值数据占 30%）</li></ul></li></ul></li><li>把这一批结果一眼看懂：<ul><li>不带 <code>ORDER BY</code> 的那 7 个（stddev_pop 及以后）。<br> 窗口 &#x3D; 整个店铺，所以每行拿到的结果一模一样，相当于把 group by 的聚合值“摊平”到每一行。</li></ul></li><li>特殊写法<ul><li><code>COVAR_POP(sales, sales)</code> 退化成总体方差，结果与 <code>VAR_POP(sales)</code> 相同。</li><li><code>CORR(sales, sales)</code> 恒为 1（自己跟自己完全相关）。</li><li><code>REGR_SLOPE(sales, date_epoch)</code> 给出销售额随时间增长的日均斜率（销售额&#x2F;天），正数表示上涨，负数表示下降。</li></ul></li></ul><h2 id="上面示例的代码"><a href="#上面示例的代码" class="headerlink" title="上面示例的代码"></a>上面示例的代码</h2><h3 id="PostgreSQL语法"><a href="#PostgreSQL语法" class="headerlink" title="PostgreSQL语法"></a>PostgreSQL语法</h3><p>原始数据：</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">(<span class="string">&#x27;A店&#x27;</span>,<span class="string">&#x27;2025-09-01&#x27;</span>,<span class="number">100</span>),</span><br><span class="line">(<span class="string">&#x27;A店&#x27;</span>,<span class="string">&#x27;2025-09-02&#x27;</span>,<span class="number">200</span>),</span><br><span class="line">(<span class="string">&#x27;A店&#x27;</span>,<span class="string">&#x27;2025-09-03&#x27;</span>,<span class="number">300</span>),</span><br><span class="line">(<span class="string">&#x27;B店&#x27;</span>,<span class="string">&#x27;2025-09-01&#x27;</span>,<span class="number">150</span>),</span><br><span class="line">(<span class="string">&#x27;B店&#x27;</span>,<span class="string">&#x27;2025-09-02&#x27;</span>,<span class="number">250</span>);</span><br></pre></td></tr></table></figure><p>加了同样销售额400的数据：</p><ol><li><p>排序类+取值类</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create table</span> t(shop text, dt <span class="type">date</span>, sales <span class="type">int</span>);</span><br><span class="line"><span class="keyword">insert into</span> t <span class="keyword">values</span></span><br><span class="line">(<span class="string">&#x27;A店&#x27;</span>,<span class="string">&#x27;2025-09-01&#x27;</span>,<span class="number">100</span>),</span><br><span class="line">(<span class="string">&#x27;A店&#x27;</span>,<span class="string">&#x27;2025-09-02&#x27;</span>,<span class="number">200</span>),</span><br><span class="line">(<span class="string">&#x27;A店&#x27;</span>,<span class="string">&#x27;2025-09-03&#x27;</span>,<span class="number">300</span>),</span><br><span class="line">(<span class="string">&#x27;A店&#x27;</span>,<span class="string">&#x27;2025-09-04&#x27;</span>,<span class="number">400</span>),</span><br><span class="line">(<span class="string">&#x27;B店&#x27;</span>,<span class="string">&#x27;2025-09-01&#x27;</span>,<span class="number">150</span>),</span><br><span class="line">(<span class="string">&#x27;B店&#x27;</span>,<span class="string">&#x27;2025-09-02&#x27;</span>,<span class="number">250</span>),</span><br><span class="line">(<span class="string">&#x27;B店&#x27;</span>,<span class="string">&#x27;2025-09-03&#x27;</span>,<span class="number">400</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span></span><br><span class="line">    shop,dt,sales</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 排序类 */</span></span><br><span class="line">    ,<span class="built_in">row_number</span>()         <span class="keyword">over</span>(<span class="keyword">partition</span> <span class="keyword">by</span> shop <span class="keyword">order</span> <span class="keyword">by</span> dt) <span class="keyword">as</span> rn</span><br><span class="line">    ,<span class="built_in">rank</span>()               <span class="keyword">over</span>(<span class="keyword">order</span> <span class="keyword">by</span> sales <span class="keyword">DESC</span>) <span class="keyword">as</span> rnk</span><br><span class="line">    ,<span class="built_in">dense_rank</span>()         <span class="keyword">over</span>(<span class="keyword">order</span> <span class="keyword">by</span> sales <span class="keyword">DESC</span>) <span class="keyword">as</span> d_rnk</span><br><span class="line">    ,<span class="built_in">ntile</span>(<span class="number">3</span>)             <span class="keyword">over</span>(<span class="keyword">order</span> <span class="keyword">by</span> sales <span class="keyword">DESC</span>) <span class="keyword">as</span> ntile3</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 取值类 */</span></span><br><span class="line">    ,<span class="built_in">lag</span>(sales,<span class="number">1</span>)         <span class="keyword">over</span>(<span class="keyword">partition</span> <span class="keyword">by</span> shop <span class="keyword">order</span> <span class="keyword">by</span> dt) <span class="keyword">as</span> lag1</span><br><span class="line">    ,<span class="built_in">lead</span>(sales,<span class="number">1</span>)        <span class="keyword">over</span>(<span class="keyword">partition</span> <span class="keyword">by</span> shop <span class="keyword">order</span> <span class="keyword">by</span> dt) <span class="keyword">as</span> lead1</span><br><span class="line">    ,<span class="built_in">first_value</span>(sales)   <span class="keyword">over</span>(<span class="keyword">partition</span> <span class="keyword">by</span> shop <span class="keyword">order</span> <span class="keyword">by</span> dt) <span class="keyword">as</span> first_val</span><br><span class="line">    ,<span class="built_in">last_value</span>(sales)    <span class="keyword">over</span>(<span class="keyword">partition</span> <span class="keyword">by</span> shop <span class="keyword">order</span> <span class="keyword">by</span> dt <span class="keyword">rows</span> <span class="keyword">between</span> unbounded preceding <span class="keyword">and</span> unbounded following) <span class="keyword">as</span> last_val</span><br><span class="line">    ,<span class="built_in">nth_value</span>(sales,<span class="number">2</span>)   <span class="keyword">over</span>(<span class="keyword">partition</span> <span class="keyword">by</span> shop <span class="keyword">order</span> <span class="keyword">by</span> dt <span class="keyword">rows</span> <span class="keyword">between</span> unbounded preceding <span class="keyword">and</span> unbounded following) <span class="keyword">as</span> nth2</span><br><span class="line">  </span><br><span class="line"><span class="keyword">from</span>(</span><br><span class="line">    <span class="keyword">select</span> <span class="operator">*</span>,<span class="built_in">extract</span>(epoch <span class="keyword">from</span> dt) <span class="keyword">as</span> date_epoch   <span class="comment">-- 把日期转数值，方便回归</span></span><br><span class="line">    <span class="keyword">from</span> t</span><br><span class="line">) <span class="keyword">as</span> x</span><br><span class="line"><span class="keyword">order</span> <span class="keyword">by</span> shop, dt;</span><br></pre></td></tr></table></figure></li><li><p>聚合类</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create table</span> t(shop text, dt <span class="type">date</span>, sales <span class="type">int</span>);</span><br><span class="line"><span class="keyword">insert into</span> t <span class="keyword">values</span></span><br><span class="line">(<span class="string">&#x27;A店&#x27;</span>,<span class="string">&#x27;2025-09-01&#x27;</span>,<span class="number">100</span>),</span><br><span class="line">(<span class="string">&#x27;A店&#x27;</span>,<span class="string">&#x27;2025-09-02&#x27;</span>,<span class="number">200</span>),</span><br><span class="line">(<span class="string">&#x27;A店&#x27;</span>,<span class="string">&#x27;2025-09-03&#x27;</span>,<span class="number">300</span>),</span><br><span class="line">(<span class="string">&#x27;A店&#x27;</span>,<span class="string">&#x27;2025-09-04&#x27;</span>,<span class="number">400</span>),</span><br><span class="line">(<span class="string">&#x27;B店&#x27;</span>,<span class="string">&#x27;2025-09-01&#x27;</span>,<span class="number">150</span>),</span><br><span class="line">(<span class="string">&#x27;B店&#x27;</span>,<span class="string">&#x27;2025-09-02&#x27;</span>,<span class="number">250</span>),</span><br><span class="line">(<span class="string">&#x27;B店&#x27;</span>,<span class="string">&#x27;2025-09-03&#x27;</span>,<span class="number">400</span>),</span><br><span class="line">(<span class="string">&#x27;B店&#x27;</span>,<span class="string">&#x27;2025-09-04&#x27;</span>,<span class="keyword">null</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span></span><br><span class="line">    shop,dt,sales</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 聚合类 */</span></span><br><span class="line">    ,<span class="built_in">sum</span>(sales)           <span class="keyword">over</span>(<span class="keyword">partition</span> <span class="keyword">by</span> shop <span class="keyword">order</span> <span class="keyword">by</span> dt) <span class="keyword">as</span> run_sum</span><br><span class="line">    ,round(<span class="built_in">avg</span>(sales)     <span class="keyword">over</span>(<span class="keyword">partition</span> <span class="keyword">by</span> shop <span class="keyword">order</span> <span class="keyword">by</span> dt), <span class="number">1</span>) <span class="keyword">as</span> run_avg</span><br><span class="line">    ,<span class="built_in">count</span>(sales)         <span class="keyword">over</span>(<span class="keyword">partition</span> <span class="keyword">by</span> shop <span class="keyword">order</span> <span class="keyword">by</span> dt) <span class="keyword">as</span> run_cnt</span><br><span class="line">    ,<span class="built_in">min</span>(sales)           <span class="keyword">over</span>(<span class="keyword">partition</span> <span class="keyword">by</span> shop <span class="keyword">order</span> <span class="keyword">by</span> dt) <span class="keyword">as</span> run_min</span><br><span class="line">    ,<span class="built_in">max</span>(sales)           <span class="keyword">over</span>(<span class="keyword">partition</span> <span class="keyword">by</span> shop <span class="keyword">order</span> <span class="keyword">by</span> dt) <span class="keyword">as</span> run_max</span><br><span class="line">  </span><br><span class="line"><span class="keyword">from</span>(</span><br><span class="line">    <span class="keyword">select</span> <span class="operator">*</span>,<span class="built_in">extract</span>(epoch <span class="keyword">from</span> dt) <span class="keyword">as</span> date_epoch   <span class="comment">-- 把日期转数值，方便回归</span></span><br><span class="line">    <span class="keyword">from</span> t</span><br><span class="line">) <span class="keyword">as</span> x</span><br><span class="line"><span class="keyword">order</span> <span class="keyword">by</span> shop, dt;</span><br></pre></td></tr></table></figure></li><li><p>统计类</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create table</span> t(shop text, dt <span class="type">date</span>, sales <span class="type">int</span>);</span><br><span class="line"><span class="keyword">insert into</span> t <span class="keyword">values</span></span><br><span class="line">(<span class="string">&#x27;A店&#x27;</span>,<span class="string">&#x27;2025-09-01&#x27;</span>,<span class="number">100</span>),</span><br><span class="line">(<span class="string">&#x27;A店&#x27;</span>,<span class="string">&#x27;2025-09-02&#x27;</span>,<span class="number">200</span>),</span><br><span class="line">(<span class="string">&#x27;A店&#x27;</span>,<span class="string">&#x27;2025-09-03&#x27;</span>,<span class="number">300</span>),</span><br><span class="line">(<span class="string">&#x27;A店&#x27;</span>,<span class="string">&#x27;2025-09-04&#x27;</span>,<span class="number">400</span>),</span><br><span class="line">(<span class="string">&#x27;B店&#x27;</span>,<span class="string">&#x27;2025-09-01&#x27;</span>,<span class="number">150</span>),</span><br><span class="line">(<span class="string">&#x27;B店&#x27;</span>,<span class="string">&#x27;2025-09-02&#x27;</span>,<span class="number">250</span>),</span><br><span class="line">(<span class="string">&#x27;B店&#x27;</span>,<span class="string">&#x27;2025-09-03&#x27;</span>,<span class="number">400</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span></span><br><span class="line">    shop,dt,sales</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 统计类 */</span></span><br><span class="line">    ,<span class="built_in">percent_rank</span>()       <span class="keyword">over</span>(<span class="keyword">partition</span> <span class="keyword">by</span> shop <span class="keyword">order</span> <span class="keyword">by</span> sales <span class="keyword">DESC</span>) <span class="keyword">as</span> pct_rnk</span><br><span class="line">    ,<span class="built_in">cume_dist</span>()         <span class="keyword">over</span>(<span class="keyword">partition</span> <span class="keyword">by</span> shop <span class="keyword">order</span> <span class="keyword">by</span> sales) <span class="keyword">as</span> cume_dist</span><br><span class="line">    ,<span class="built_in">stddev_pop</span>(sales)   <span class="keyword">over</span>(<span class="keyword">partition</span> <span class="keyword">by</span> shop) <span class="keyword">as</span> stddev_pop</span><br><span class="line">    ,<span class="built_in">stddev_samp</span>(sales)  <span class="keyword">over</span>(<span class="keyword">partition</span> <span class="keyword">by</span> shop) <span class="keyword">as</span> stddev_samp</span><br><span class="line">    ,<span class="built_in">var_pop</span>(sales)      <span class="keyword">over</span>(<span class="keyword">partition</span> <span class="keyword">by</span> shop) <span class="keyword">as</span> var_pop</span><br><span class="line">    ,<span class="built_in">var_samp</span>(sales)     <span class="keyword">over</span>(<span class="keyword">partition</span> <span class="keyword">by</span> shop) <span class="keyword">as</span> var_samp</span><br><span class="line">    ,<span class="built_in">corr</span>(sales, date_epoch) <span class="keyword">over</span>(<span class="keyword">partition</span> <span class="keyword">by</span> shop) <span class="keyword">as</span> corr_coef</span><br><span class="line">    ,<span class="built_in">covar_pop</span>(sales, date_epoch) <span class="keyword">over</span>(<span class="keyword">partition</span> <span class="keyword">by</span> shop) <span class="keyword">as</span> covar_pop</span><br><span class="line">    ,<span class="built_in">covar_samp</span>(sales, date_epoch) <span class="keyword">over</span>(<span class="keyword">partition</span> <span class="keyword">by</span> shop) <span class="keyword">as</span> covar_samp</span><br><span class="line">    ,<span class="built_in">regr_slope</span>(sales, date_epoch) <span class="keyword">over</span>(<span class="keyword">partition</span> <span class="keyword">by</span> shop) <span class="keyword">as</span> regr_slope</span><br><span class="line">    ,<span class="built_in">regr_intercept</span>(sales, date_epoch) <span class="keyword">over</span>(<span class="keyword">partition</span> <span class="keyword">by</span> shop) <span class="keyword">as</span> regr_intercept</span><br><span class="line">    ,<span class="built_in">regr_r2</span>(sales, date_epoch) <span class="keyword">over</span>(<span class="keyword">partition</span> <span class="keyword">by</span> shop) <span class="keyword">as</span> regr_r2</span><br><span class="line">  </span><br><span class="line"><span class="keyword">from</span>(</span><br><span class="line">    <span class="keyword">select</span> <span class="operator">*</span>,<span class="built_in">extract</span>(epoch <span class="keyword">from</span> dt) <span class="keyword">as</span> date_epoch   <span class="comment">-- 把日期转数值，方便回归</span></span><br><span class="line">    <span class="keyword">from</span> t</span><br><span class="line">) <span class="keyword">as</span> x</span><br><span class="line"><span class="keyword">order</span> <span class="keyword">by</span> shop, dt;</span><br></pre></td></tr></table></figure></li></ol><h3 id="trino语法"><a href="#trino语法" class="headerlink" title="trino语法"></a>trino语法</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">drop</span> <span class="keyword">table</span> if <span class="keyword">exists</span> t;</span><br><span class="line"><span class="keyword">create table</span> t(shop <span class="type">varchar</span>, dt <span class="type">varchar</span>, sales <span class="type">integer</span>);</span><br><span class="line"><span class="keyword">insert into</span> t <span class="keyword">values</span></span><br><span class="line">(<span class="string">&#x27;A店&#x27;</span>,<span class="string">&#x27;2025-09-01&#x27;</span>,<span class="number">100</span>),</span><br><span class="line">(<span class="string">&#x27;A店&#x27;</span>,<span class="string">&#x27;2025-09-02&#x27;</span>,<span class="number">200</span>),</span><br><span class="line">(<span class="string">&#x27;A店&#x27;</span>,<span class="string">&#x27;2025-09-03&#x27;</span>,<span class="number">300</span>),</span><br><span class="line">(<span class="string">&#x27;A店&#x27;</span>,<span class="string">&#x27;2025-09-04&#x27;</span>,<span class="number">400</span>),</span><br><span class="line">(<span class="string">&#x27;B店&#x27;</span>,<span class="string">&#x27;2025-09-01&#x27;</span>,<span class="number">150</span>),</span><br><span class="line">(<span class="string">&#x27;B店&#x27;</span>,<span class="string">&#x27;2025-09-02&#x27;</span>,<span class="number">250</span>),</span><br><span class="line">(<span class="string">&#x27;B店&#x27;</span>,<span class="string">&#x27;2025-09-03&#x27;</span>,<span class="number">400</span>),</span><br><span class="line">(<span class="string">&#x27;B店&#x27;</span>,<span class="string">&#x27;2025-09-04&#x27;</span>,<span class="keyword">null</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span></span><br><span class="line">    shop,dt,sales</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 聚合类 */</span></span><br><span class="line">    ,<span class="built_in">sum</span>(sales)           <span class="keyword">over</span>(<span class="keyword">partition</span> <span class="keyword">by</span> shop <span class="keyword">order</span> <span class="keyword">by</span> dt) <span class="keyword">as</span> run_sum</span><br><span class="line">    ,round(<span class="built_in">avg</span>(sales)     <span class="keyword">over</span>(<span class="keyword">partition</span> <span class="keyword">by</span> shop <span class="keyword">order</span> <span class="keyword">by</span> dt), <span class="number">1</span>) <span class="keyword">as</span> run_avg</span><br><span class="line">    ,<span class="built_in">count</span>(sales)         <span class="keyword">over</span>(<span class="keyword">partition</span> <span class="keyword">by</span> shop <span class="keyword">order</span> <span class="keyword">by</span> dt) <span class="keyword">as</span> run_cnt</span><br><span class="line">    ,<span class="built_in">min</span>(sales)           <span class="keyword">over</span>(<span class="keyword">partition</span> <span class="keyword">by</span> shop <span class="keyword">order</span> <span class="keyword">by</span> dt) <span class="keyword">as</span> run_min</span><br><span class="line">    ,<span class="built_in">max</span>(sales)           <span class="keyword">over</span>(<span class="keyword">partition</span> <span class="keyword">by</span> shop <span class="keyword">order</span> <span class="keyword">by</span> dt) <span class="keyword">as</span> run_max</span><br><span class="line">  </span><br><span class="line"><span class="keyword">from</span>(</span><br><span class="line">    <span class="keyword">select</span> <span class="operator">*</span>,to_unixtime(<span class="built_in">cast</span>(dt <span class="keyword">as</span> <span class="type">timestamp</span> <span class="keyword">with</span> <span class="type">time</span> zone)) <span class="keyword">as</span> date_epoch  <span class="comment">-- 把日期转数值，方便回归</span></span><br><span class="line">    <span class="keyword">from</span> t</span><br><span class="line">) <span class="keyword">as</span> x</span><br><span class="line"><span class="keyword">order</span> <span class="keyword">by</span> shop, dt;</span><br></pre></td></tr></table></figure><h1 id="最常用模板"><a href="#最常用模板" class="headerlink" title="最常用模板"></a>最常用模板</h1><ol><li><p>累计值</p><ol><li>sum()</li></ol></li><li><p>分组累计（按店铺）</p><ol><li>sum()、partition by</li></ol></li><li><p>移动平均（近2行）</p><ol><li>对每个店，算最近两天平均销售额</li><li>avg()、partition by、row 1 preceding</li><li>历史平均销售额rows between unbounded preceding and 1 preceding</li></ol></li><li><p>环比（上一日）</p><ol><li>lag()先取出上一日数据</li><li>两个字段名的英文来源如下：<ol><li>prev_sales prev 是 <em>previous</em>（之前的）的缩写，sales 即“销售额”，合起来表示“上一条销售额”。</li><li>delta 源自希腊字母 Δ（delta），在数学&#x2F;编程里习惯用它表示“差值、变化量”，这里即“销售额的变化量”。</li></ol></li></ol></li><li><p>排名&#x2F;去重（每组只留第一行&#x2F;取最新的记录&#x2F;取TOP-N）</p><ol><li>row_number()、partition by、DESC</li></ol></li><li><p>一次性定义多个窗口（省代码）</p><ol><li>over w</li><li>window w as (partition by shop order by dt)</li></ol></li><li><p>范围窗口（近 1 个月）</p><ol><li><p>range between interval ‘1 month’ preceding and current row</p></li><li><p>INTERVAL ‘1 month’怎么算的</p><ol><li><p>加减一个月先找“同号日”，没有就拉回到目标月最后一天；范围窗口以此算出 闭区间 边界。</p></li><li><pre><code class="language-SQL">SELECT date &#39;2025-01-30&#39; + INTERVAL &#39;1 month&#39;;  -- 2025-02-28（2025 非闰年）SELECT date &#39;2024-01-30&#39; + INTERVAL &#39;1 month&#39;;  -- 2024-02-29（闰年）SELECT date &#39;2025-03-31&#39; - INTERVAL &#39;1 month&#39;;  -- 2025-02-28date/timestamp时间戳同理，时分秒保留SELECT timestamp &#39;2025-01-30 23:59:59&#39; + INTERVAL &#39;1 month&#39;;-- 2025-02-28 23:59:59</code></pre></li></ol></li></ol></li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> SQL </tag>
            
            <tag> Postgres </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>快速精通SQL</title>
      <link href="/2025/10/20/%E5%BF%AB%E9%80%9F%E7%B2%BE%E9%80%9ASQL/"/>
      <url>/2025/10/20/%E5%BF%AB%E9%80%9F%E7%B2%BE%E9%80%9ASQL/</url>
      
        <content type="html"><![CDATA[<h1 id="重点知识"><a href="#重点知识" class="headerlink" title="重点知识"></a>重点知识</h1><h2 id="SQL执行顺序："><a href="#SQL执行顺序：" class="headerlink" title="SQL执行顺序："></a>SQL执行顺序：</h2><p>1.<code>FROM</code> &amp; <code>JOIN</code> → 2. <code>WHERE</code> → 3. <code>GROUP BY</code> → 4. <code>HAVING</code> → 5. <code>SELECT</code> → 6. <code>ORDER BY</code></p><ul><li><strong>FROM 和 JOIN</strong>：首先确定要从哪些表中获取数据</li><li><strong>WHERE</strong>：对FROM和JOIN返回的行进行过滤</li><li><strong>GROUP BY</strong>：将过滤后的行分组</li><li><strong>HAVING</strong>：对分组后的结果进行过滤</li><li><strong>SELECT</strong>：选择要返回的列（包括计算和别名）</li><li><strong>DISTINCT</strong>：去除重复的行</li><li><strong>ORDER BY</strong>：对结果进行排序</li><li><strong>LIMIT&#x2F;OFFSET&#x2F;TOP</strong>：限制返回的行数</li></ul><h1 id="SQL基础"><a href="#SQL基础" class="headerlink" title="SQL基础"></a>SQL基础</h1><h2 id="基础语法"><a href="#基础语法" class="headerlink" title="基础语法"></a>基础语法</h2><ol><li>查询：<ul><li>Select；Where；Distinct；And；Or</li></ul></li><li>建表、删表、分区：<ul><li>Create table；Drop table；Insert into；Partition by</li></ul></li><li>表连接：<ul><li>常用四类join操作：</li><li>[inner] join；Left join；Right join；Full join</li></ul></li><li>函数：<ul><li>聚合函数；日期函数；数字类函数；字符类函数</li></ul></li><li>嵌套、分组、排序：<ul><li>双重where；Group by；Order by</li></ul></li><li>SQL三范式&amp;注意事项：<ol><li>三范式<ol><li>保证每列的原子性</li><li>每列均与主键相关</li><li>每列均与主键直接相关</li></ol></li><li>注意事项<ol><li>小表拼大表</li><li>先过滤再拼表</li><li>避免过度嵌套</li></ol></li></ol></li></ol><h3 id="查询"><a href="#查询" class="headerlink" title="查询"></a>查询</h3><p>Select 列名称 from 表名称 where 列 运算符 表名称</p><p>运算符：&#x3D;, &gt;, &lt;, &gt;&#x3D;, &lt;&#x3D;, <strong>&lt;&gt;, !&#x3D;</strong>, between, like, <strong>in, %, is</strong> <strong>null, is not null</strong></p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">Select</span> <span class="operator">*</span> <span class="keyword">from</span> edw_cdm.dim_trx_loan <span class="keyword">where</span> dt <span class="keyword">in</span> (‘<span class="number">2021</span><span class="number">-02</span><span class="number">-28</span>’,’<span class="number">2021</span><span class="number">-03</span><span class="number">-31</span>’); <span class="comment">--取月末数据</span></span><br><span class="line"><span class="comment">-- dt&lt;=&#x27;2025-09-30&#x27; and cast(dt as date)=last_day_of_month(cast(dt as date))</span></span><br></pre></td></tr></table></figure><ol><li><p>比较运算符（直接比）</p><ul><li><p>适用：数值、日期、字符串的等于 &#x2F; 不等于 &#x2F; 大小比较。</p></li><li><p>关键符号：<code>=</code>（等于）、<code>&gt;</code>&#x2F;<code>&lt;</code>（大于 &#x2F; 小于）、<code>&gt;=</code>&#x2F;<code>&lt;=</code>（大于等于 &#x2F; 小于等于）、<code>&lt;&gt;</code>&#x2F;<code>!=</code>（不等于）。</p></li></ul></li><li><p>范围运算符（圈范围）</p><ul><li><p><code>between ... and</code>：取连续范围（含边界），如 “score between 80 and 90”。</p></li><li><p><code>in (值1,值2)</code>：取离散值列表，如 “address in (‘ 北京 ‘,’ 上海 ‘)”；加<code>no</code>t则排除。</p></li></ul></li><li><p>模糊匹配（查部分）</p><ul><li><p>仅用于字符串，需搭配<code>%</code>（任意字符）或<code>_</code>（单个字符）。</p></li><li><p>示例：<code>name like &#39;张%&#39;</code>（姓张）、<code>name like &#39;%晓%&#39;</code>（含 “晓” 字）。</p></li></ul></li><li><p>空值判断（判空值）</p><ul><li>不能用<code>=</code>，必须用<code>is null</code>（为空）或<code>is not null</code>（不为空），如 “address is null”。</li></ul></li><li><p>组合逻辑（多条件）</p><ul><li>用<code>and</code>（同时满足）或<code>or</code>（满足一个）组合条件，如 “age&gt;18 AND score&gt;80”。</li></ul></li></ol><h3 id="建表、删表、分区"><a href="#建表、删表、分区" class="headerlink" title="建表、删表、分区"></a>建表、删表、分区</h3><p>create table 表名称 (列名称1 数据类型, 列名称2 数据类型, 列名称3 数据类型…)</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create table</span> sql_grammar_cust_base</span><br><span class="line">    (cust_id  string  comment  ‘客户号’，<span class="comment">--comment 为添加注释</span></span><br><span class="line">     fst_crd_cls_dt    string  comment  ‘首次授信日期’，</span><br><span class="line">     fst_crd_base_lvl_busiclass  string  comment ‘首次授信业务基础维度’) </span><br><span class="line">partitioned <span class="keyword">by</span> (dt  string  comment ’日期’)；</span><br></pre></td></tr></table></figure><p><code>partitioned by</code><strong>注：分区可以存储更多的数据，并优化查询效率，写代码时注意限制分区字段</strong></p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">drop</span> <span class="keyword">table</span> if <span class="keyword">exists</span> aaa_tmp;</span><br><span class="line"><span class="keyword">create table</span> aaa_tmp <span class="keyword">as</span></span><br></pre></td></tr></table></figure><h4 id="分区和非分区的区别"><a href="#分区和非分区的区别" class="headerlink" title="分区和非分区的区别"></a>分区和非分区的区别</h4><p>逻辑上没有区别，主要区别在于<strong>物理存储</strong>上， hive表的数据以文件形式存储，分区表按照分区列的值分别存储，<strong>一个分区对应一个目录</strong>，非分区表只有一个目录。</p><p>分区的目的是为了提高查询效率和回溯历史状态，具体表现为：</p><ul><li><strong>提高查询效率</strong>。如果没有分区，每次全表扫描，对于数据量大的表查询效率低下，分区表通过限制分区，只需扫描部分分区数据，大大提高查询效率。</li><li><strong>回溯历史状态</strong>。Hive分区表大部分通过增量+全量的方式更新，如果当天的数据出错，可以通过前一天的分区快速修复；通过记录月末快照分区，可以回溯历史状态，可用于分析和定位问题。</li></ul><blockquote><p>100个球，10种颜色，各有10个，编号1-10</p><ul><li>非分区表：所有球装在一个大袋子里</li><li>分区表：每种颜色的球分别装在对应颜色的小袋子里，然后再装到大袋子里</li></ul><p>需求：找出白色3号球</p><ul><li>非分区表：全表扫描，从100个球中找出白色3号球</li><li>分区表：局部扫描，从白</li><li>色小袋子里找，从10个球中找出白色3号球</li></ul></blockquote><h3 id="表连接"><a href="#表连接" class="headerlink" title="表连接"></a>表连接</h3><p><img src="/./../%E5%BF%AB%E9%80%9F%E7%B2%BE%E9%80%9ASQL/70a34cbd-ad2b-4eae-8a7b-31d8da835f79.png" alt="SQL JOINS"></p><p>✅ <strong>总结记忆口诀</strong>：</p><table><thead><tr><th>join 类型</th><th>返回结果</th></tr></thead><tbody><tr><td>inner join</td><td>两表交集</td></tr><tr><td>left join</td><td>左表全量 + 右表匹配</td></tr><tr><td>right join</td><td>右表全量 + 左表匹配</td></tr><tr><td>full outer join</td><td>两表并集（含所有记录）</td></tr><tr><td>left&#x2F;right join + where null</td><td>仅返回左&#x2F;右表独有的记录</td></tr><tr><td>full outer join + where null</td><td>仅返回两表中不匹配的记录（对称差）</td></tr></tbody></table><p>📌 <strong>提示</strong>：</p><ul><li>实际使用中，<code>inner join</code> 最常用。</li><li><code>left join</code> 常用于“主表 + 关联表”的场景（如订单 + 用户信息）。</li><li><code>left join ... where b.key is null</code>（左外连接排除内连接）也常用。</li><li><code>full outer join</code> 在某些分析场景有用，但性能开销较大。</li><li>使用 <code>where ... is null</code> 是筛选“无匹配记录”的关键技巧。</li></ul><p><strong>图中涉及的 JOIN 类型：</strong></p><ol><li><p><strong>left join（左连接）</strong></p><ul><li><p><strong>图示</strong>：红色区域包括 <code>A</code> 的全部 + <code>A ∩ B</code></p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">&lt;</span>select_list<span class="operator">&gt;</span> <span class="keyword">from</span> <span class="keyword">table</span> a <span class="keyword">left</span> <span class="keyword">join</span> <span class="keyword">table</span> b <span class="keyword">on</span> a.key <span class="operator">=</span> b.key</span><br></pre></td></tr></table></figure></li><li><p><strong>含义</strong>：返回左表（tablea）的所有记录，以及右表（tableb）中匹配的记录。如果右表无匹配，则对应字段为 <code>null</code>。</p></li></ul></li><li><p><strong>inner join（内连接）</strong></p><ul><li><p><strong>图示</strong>：仅红色区域为 <code>A ∩ B</code>（交集）</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">&lt;</span>select_list<span class="operator">&gt;</span> <span class="keyword">from</span> <span class="keyword">table</span> a <span class="keyword">inner</span> <span class="keyword">join</span> <span class="keyword">table</span> b <span class="keyword">on</span> a.key <span class="operator">=</span> b.key</span><br></pre></td></tr></table></figure></li><li><p><strong>含义</strong>：只返回两个表中<strong>键值匹配</strong>的记录，即交集部分。</p></li></ul></li><li><p><strong>right join（右连接）</strong></p><ul><li><p><strong>图示</strong>：红色区域包括 <code>B</code> 的全部 + <code>A ∩ B</code></p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">&lt;</span>select_list<span class="operator">&gt;</span> <span class="keyword">from</span> <span class="keyword">table</span> a <span class="keyword">right</span> <span class="keyword">join</span> <span class="keyword">table</span> b <span class="keyword">on</span> a.key <span class="operator">=</span> b.key</span><br></pre></td></tr></table></figure></li><li><p><strong>含义</strong>：返回右表（tableb）的所有记录，以及左表（tablea）中匹配的记录。如果左表无匹配，则对应字段为 <code>null</code>。</p></li></ul></li><li><p><strong>left join … where b.key is</strong> <strong>null（左外连接排除内连接）</strong></p><ul><li><p><strong>图示</strong>：红色区域仅为 <code>A - (A ∩ B)</code>（左表独有部分）</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">&lt;</span>select_list<span class="operator">&gt;</span> <span class="keyword">from</span> <span class="keyword">table</span> a <span class="keyword">left</span> <span class="keyword">join</span> <span class="keyword">table</span> b <span class="keyword">on</span> a.key <span class="operator">=</span> b.key</span><br><span class="line"><span class="keyword">where</span> b.key <span class="keyword">is</span> <span class="keyword">null</span></span><br></pre></td></tr></table></figure></li><li><p><strong>含义</strong>：返回左表中<strong>没有在右表中找到匹配</strong>的记录，常用于查找“孤儿记录”。</p></li></ul></li><li><p><strong>full outer join（全外连接）</strong></p><ul><li><p><strong>图示</strong>：红色区域为 <code>A ∪ B</code>（并集），即两个表的所有记录</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">&lt;</span>select_list<span class="operator">&gt;</span> <span class="keyword">from</span> <span class="keyword">table</span> a <span class="keyword">full</span> <span class="keyword">outer</span> <span class="keyword">join</span> <span class="keyword">table</span> b <span class="keyword">on</span> a.key <span class="operator">=</span> b.key</span><br></pre></td></tr></table></figure></li><li><p><strong>含义</strong>：返回两个表中的所有记录。</p></li><li><p>若某一侧无匹配，则该侧对应字段为 <code>null</code>。</p></li></ul></li><li><p><strong>full outer join … where a.key is</strong> <strong>null</strong> <strong>or b.key is null（全外连接排除内连接）</strong></p><ul><li><p><strong>图示</strong>：红色区域为 <code>(A - B) ∪ (B - A)</code>（对称差集）</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">&lt;</span>select_list<span class="operator">&gt;</span> <span class="keyword">from</span> <span class="keyword">table</span> a <span class="keyword">full</span> <span class="keyword">outer</span> <span class="keyword">join</span> <span class="keyword">table</span> b <span class="keyword">on</span> a.key <span class="operator">=</span> b.key</span><br><span class="line"><span class="keyword">where</span> a.key <span class="keyword">is</span> <span class="keyword">null</span> <span class="keyword">or</span> b.key <span class="keyword">is</span> <span class="keyword">null</span></span><br></pre></td></tr></table></figure></li><li><p><strong>含义</strong>：返回<strong>仅在一个表中存在</strong>的记录，即两个表中不匹配的部分。</p></li></ul></li></ol><h3 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h3><table><thead><tr><th>聚合函数</th><th>日期函数</th></tr></thead><tbody><tr><td>求和<code>sum()</code> <br />求均值<code>avg()</code> <br />计数<code>count()</code> <br />求最大值<code>max()</code> <br />求最小值<code>min()</code> <br /><strong>注意：null值不包含在计算中</strong> <br />例：人均VS有贷人均是否响应</td><td>返回日期加上指定天数的结果：<code>date_add(date, n)</code> <br />返回日期加上指定月的结果：<code>add_months(date, n)</code> <br />返回两个日期的差：<code>datediff(date1, date2)</code>(备注date1-date2) <br />返回两个日期的月份差：<code>months_between(date1, date2)</code> <br />返回这个月末的日期：<strong><code>last_day(date)</code></strong> <br />例：分区表限制<code>dt=last_day(&#39;2025-04-19&#39;)</code></td></tr></tbody></table><table><thead><tr><th>数字类函数</th><th>字符类函数</th></tr></thead><tbody><tr><td>求绝对值<code>abs()</code><br />向上取整<code>ceil(n)</code><br />向下取整<code>floor(n)</code><br />四舍五入<code>round(n, len)</code><br />求指数值<code>exp(n)</code><br />求对数值<code>log(n)</code><br />求正弦值<code>sin(n)</code><br />求余弦值<code>cos(n)</code></td><td>求长度<code>length(n)</code><br /><strong>字符串截取<code>substr(s, start, [length])&lt;br /&gt;</code></strong><br />字符串拼接<code>concat(s1, s2)&lt;br /&gt;</code><br />字符串替换<code>replace(S1, s1, S2)&lt;br /&gt;</code><br />切割函数<code>split_part(s,delimiter,field)</code><br />split_part(字段，分隔符，<strong>子串位置（从1开始计数）</strong>)</td></tr></tbody></table><h3 id="嵌套、分组、排序"><a href="#嵌套、分组、排序" class="headerlink" title="嵌套、分组、排序"></a>嵌套、分组、排序</h3><ol><li><p>嵌套</p><p>select * from sql_grammar_cust_base where cust_id in  (select cust_id from sql_grammar_lon_base);  –不加t</p><p>Select * from (select cust_id from sql_grammar_lon_base) t;  –加t</p><ul><li>在 PB 级场景下，建议直接用<code>JOIN</code>替代<code>IN</code>子查询，效率更稳定</li><li>在 SQL 中，<code>JOIN</code>（默认指<code>INNER JOIN</code>，内连接）</li></ul><p>详细解析：</p><ul><li>第一个查询（<code>IN</code>子查询，不加别名）</li></ul><p>特点：</p><p> <code>IN</code>子查询不需要别名，因为它作为值列表直接参与条件判断。</p><p> 数据库会自动处理子查询结果与外部条件的关联。</p><ul><li>第二个查询（派生表子查询，必须加别名）</li></ul><p>特点：</p><ul><li>该临时表必须指定别名（这里是 <code>t</code>），否则会报语法错误。</li><li>派生表（Derived Table）是完整的临时结果集，必须通过别名引用。</li><li>常用于复杂查询中的中间步骤。</li></ul></li><li><p>分组</p><p>group by</p><p>与聚合函数搭配使用</p><p>聚合函数（如 <code>SUM</code>, <code>AVG</code>, <code>COUNT</code>, <code>MAX</code>, <code>MIN</code>）</p></li><li><p>排序</p></li></ol><p>Select 列 from 表 order by 列 asc&#x2F;desc</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 按客群随机抽样（招行1w人，生活号2w人，共3w人</span></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> </span><br><span class="line"><span class="keyword">from</span> (</span><br><span class="line"><span class="keyword">select</span> </span><br><span class="line">cust_id</span><br><span class="line">,lvl1_bus_cls_nm</span><br><span class="line">,<span class="built_in">row_number</span>() <span class="keyword">over</span>(<span class="keyword">partition</span> <span class="keyword">by</span> lvl1_bus_cls_nm <span class="keyword">order</span> <span class="keyword">by</span> rand()) rn  <span class="comment">-- 按客群分组，随机排序编号</span></span><br><span class="line"><span class="keyword">from</span> sql_grammar_cust_base_lon</span><br><span class="line"> ) t </span><br><span class="line"><span class="keyword">where</span> </span><br><span class="line">(lvl1_bus_cls_nm <span class="operator">=</span> <span class="string">&#x27;招行&#x27;</span> <span class="keyword">and</span> rn <span class="operator">&lt;=</span> <span class="number">10000</span>) <span class="keyword">or</span>      <span class="comment">-- 招行客群取前1w人</span></span><br><span class="line">(lvl1_bus_cls_nm <span class="operator">=</span> <span class="string">&#x27;好期贷生活号&#x27;</span> <span class="keyword">and</span> rn <span class="operator">&lt;=</span> <span class="number">20000</span>);  <span class="comment">-- 生活号客群取前2w人</span></span><br></pre></td></tr></table></figure><ul><li>随机函数差异：<ul><li>MySQL：<code>order by rand()</code></li><li>PostgreSQL：<code>order by random()</code></li><li>SQL Server：<code>order by newid()</code>（生成随机GUID排序）</li><li>Oracle：<code>order by dbms_random.value()</code></li></ul></li><li>潜在问题：<ul><li><code>ORDER BY RAND()</code> 在大数据量时性能极差（需全表扫描并排序）。</li></ul></li><li>性能优化：<ul><li><code>rand()</code> 在大数据量表中效率低（需全表扫描并生成随机数），可先缩小范围再抽样</li></ul></li></ul><table><thead><tr><th>SQL功能</th><th>核心函数&#x2F;语法</th><th>典型场景</th></tr></thead><tbody><tr><td>按条件随机抽样</td><td>Order by rand() + row_number() + where 筛选</td><td>客群分层抽样、AB测试样本选取</td></tr></tbody></table><h2 id="三范式"><a href="#三范式" class="headerlink" title="三范式"></a>三范式</h2><div class="tabs"><div class="nav-tabs"><button type="button" class="tab active">确保每列的原子式</button><button type="button" class="tab">确保表中的每列与主键相关</button><button type="button" class="tab">确保表中的每列与主键直接相关</button></div><div class="tab-contents"><div class="tab-item-content active"><p>每列&#x2F;每个属性都是不可再分的原子单元&#x2F;数据单元</p><p>比如：地址这个字段应该被拆分成省份、城市、街道…</p></div><div class="tab-item-content"><p>在一个数据库表中，一个表中只能保存一种数据</p></div><div class="tab-item-content"><p>在一个数据表中，每列应该与主键直接相关，而不是间接相关</p></div></div><div class="tab-to-top"><button type="button" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div><p>注：hive使用的是一种类SQL语言，没有所谓的主键，也不需要满足的标准的SQL三范式，但是在语法上与SQL基本一致</p><h2 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h2><table><thead><tr><th><strong>小表拼大表</strong></th><th>我们常用的Left join是从右表找左索引的，左表小的话搜索次数少，效率高</th></tr></thead><tbody><tr><td><strong>先过滤再拼表</strong></td><td>拼表之前先加where限制，筛选出符合条件的子表，减少每个阶段的数据量</td></tr><tr><td><strong>避免过多嵌套</strong></td><td>避免一段代码嵌套太多逻辑，多使用中间表来完成</td></tr></tbody></table><div class="tabs"><div class="nav-tabs"><button type="button" class="tab active">小表拼大表</button><button type="button" class="tab">先过滤再拼表</button><button type="button" class="tab">避免过多嵌套</button></div><div class="tab-contents"><div class="tab-item-content active"><p><strong>我们常用的Left join是从右表找左索引的，左表小的话搜索次数少，效率高</strong></p></div><div class="tab-item-content"><p><strong>拼表之前先加where限制，筛选出符合条件的子表，减少每个阶段的数据量</strong></p></div><div class="tab-item-content"><p><strong>避免一段代码嵌套太多逻辑，多使用中间表来完成</strong></p></div></div><div class="tab-to-top"><button type="button" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div><h2 id="SQL的规范与优化"><a href="#SQL的规范与优化" class="headerlink" title="SQL的规范与优化"></a>SQL的规范与优化</h2><h3 id="常见的SQL不规范类型"><a href="#常见的SQL不规范类型" class="headerlink" title="常见的SQL不规范类型"></a>常见的SQL不规范类型</h3><ol><li><p>全量分区表没有加分区限制</p><ul><li><code>where</code>限制dt，避免不必要的全分区扫描，养成限制分区的好习惯；避免无意义字段的返回，可以有效提升查询效率。</li><li><code>udf.getmaxpar</code> 通常是一个自定义函数（UDF，User-Defined Function），从命名推测其功能可能是 “获取某个参数（Parameter）的最大值”</li><li>避免 <code>SELECT *</code>：只查需要的列</li></ul></li><li><p>笛卡尔积相关</p><ul><li>多表关联时漏写部分关联条件（无 ON 条件）</li><li><strong>规范写法</strong>：明确每两张表之间的关联关系，确保关联条件逻辑正确，必要时通过业务主键（如 user_id、order_id）关联。</li><li>笛卡尔积关联的数据量是N*M，尽量避免使用笛卡尔积关联</li></ul></li><li><p>索引列 &#x2F; 分区列上使用函数</p><ul><li><strong>不规范表现</strong>：<ul><li>数据库：<code>SELECT * FROM user WHERE SUBSTR(phone, 1, 3) = &#39;138&#39;;</code>（phone 为索引列，使用了 SUBSTR 函数）</li><li>数仓：<code>SELECT * FROM dwd_order_di WHERE DATE_FORMAT(dt, &#39;yyyy-MM&#39;) = &#39;2024-01&#39;;</code>（dt 为分区列，使用了 DATE_FORMAT 函数）</li></ul></li><li><strong>核心影响</strong>：数据库无法使用 phone 列的索引，数仓无法下推分区过滤，均会触发全表 &#x2F; 全分区扫描。</li><li><strong>规范写法</strong>：<strong>将函数逻辑转移到等号右侧</strong>：<ul><li>数据库：<code>SELECT * FROM user WHERE phone LIKE &#39;138%&#39;;</code></li><li>数仓：<code>SELECT * FROM dwd_order_di WHERE dt BETWEEN &#39;20240101&#39; AND &#39;20240131&#39;;</code></li></ul></li></ul></li><li><p>隐式类型转换</p><ul><li><strong>不规范表现</strong>：<code>SELECT * FROM order WHERE order_id = 123456;</code>（order_id 实际为 VARCHAR 类型，传入了数值 123456）</li><li><strong>核心影响</strong>：数据库会对每一行的 order_id 进行<code>CAST(order_id AS INT)</code>转换，导致索引失效，触发全表扫描。</li><li><strong>规范写法</strong>：确保传入的参数类型与表字段类型一致，如 <code>WHERE order_id = &#39;123456&#39;;</code></li></ul></li><li><p>相关子查询</p><ul><li><p><strong>外层每一行都触发一次****子查询</strong></p><ul><li><code>SELECT a.user_id, (SELECT b.name FROM user b WHERE b.id = a.user_id) AS user_name FROM order a;</code></li></ul></li><li><p><strong>核心影响</strong>：若外层表有 100 万行，子查询会执行 100 万次，性能极低，相当于 “循环嵌套查询”。</p></li><li><p><strong>用 JOIN 替代相关子查询</strong>，将多次查询转为一次关联查询：</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> a.user_id, b.name <span class="keyword">as</span> user_name </span><br><span class="line"><span class="keyword">from</span> <span class="keyword">order</span> a </span><br><span class="line"><span class="keyword">left</span> <span class="keyword">join</span> <span class="keyword">user</span> b <span class="keyword">on</span> a.user_id <span class="operator">=</span> b.id;</span><br></pre></td></tr></table></figure></li></ul></li></ol><hr><h3 id="SQL优化的技巧"><a href="#SQL优化的技巧" class="headerlink" title="SQL优化的技巧"></a>SQL优化的技巧</h3><h4 id="分区限制"><a href="#分区限制" class="headerlink" title="分区限制"></a>分区限制</h4><p>增量分区表添加分区限制，减少扫描的数据量</p><h4 id="先过滤再关联"><a href="#先过滤再关联" class="headerlink" title="先过滤再关联"></a>先过滤再关联</h4><p>核心优化逻辑：减少参与关联的数据集大小，避免大表直接关联导致的性能损耗。</p><p>优化前：</p><p>先关联两张大表，关联后才用where筛选条件，导致关联的数据量极大</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> dt, <span class="built_in">count</span>(<span class="keyword">distinct</span> usr_id) <span class="keyword">as</span> num</span><br><span class="line"><span class="keyword">from</span> (</span><br><span class="line"><span class="comment">-- 先关联两张大表</span></span><br><span class="line">  <span class="keyword">select</span> a.dt, a.usr_id, a.apl_chnl_cd, a.apl_dt, b.apl_cust_typ</span><br><span class="line">  <span class="keyword">from</span> edw.cdm.dwd_cas_apl_aprv_di a</span><br><span class="line">  <span class="keyword">join</span> edw.cdm.dwd_cas_apl_aprv_tag_di b <span class="keyword">on</span> a.apl_nbr <span class="operator">=</span> b.apl_nbr</span><br><span class="line">) c</span><br><span class="line"><span class="comment">-- 关联后才筛选条件，导致关联的数据量极大</span></span><br><span class="line"><span class="keyword">where</span> dt <span class="operator">=</span> <span class="string">&#x27;2020-11-01&#x27;</span></span><br><span class="line"><span class="keyword">and</span> apl_chnl_cd <span class="operator">=</span> <span class="string">&#x27;0APP&#x27;</span></span><br><span class="line"><span class="keyword">and</span> apl_cust_typ <span class="operator">=</span> <span class="string">&#x27;CRT_CUST_FIRST&#x27;</span></span><br><span class="line"><span class="keyword">and</span> apl_dt <span class="operator">&gt;</span> <span class="string">&#x27;1900-01-01&#x27;</span></span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span> dt;</span><br></pre></td></tr></table></figure><p>方案1：关联时直接添加过滤条件</p><p>在on时就筛选</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> a.dt, <span class="built_in">count</span>(<span class="keyword">distinct</span> a.usr_id) <span class="keyword">as</span> num</span><br><span class="line"><span class="keyword">from</span> edw_cdm.dwd_cas_apl_aprv_di a</span><br><span class="line"><span class="keyword">join</span> edw_cdm.dwd_cas_apl_aprv_tag_di b</span><br><span class="line"><span class="keyword">on</span> a.apl_nbr <span class="operator">=</span> b.apl_nbr</span><br><span class="line"><span class="keyword">and</span> b.apl_cust_typ <span class="operator">=</span> <span class="string">&#x27;CRT_CUST_FIRST&#x27;</span><span class="comment">-- 右表过滤条件提前到 on 子句</span></span><br><span class="line"><span class="comment">-- 左表过滤条件放在 where 中（或 on 中，视关联类型而定）</span></span><br><span class="line"><span class="keyword">where</span> a.dt <span class="operator">=</span> <span class="string">&#x27;2020-11-01&#x27;</span></span><br><span class="line"><span class="keyword">and</span> a.apl_chnl_cd <span class="operator">=</span> <span class="string">&#x27;0APP&#x27;</span></span><br><span class="line"><span class="keyword">and</span> a.apl_dt <span class="operator">&gt;</span> <span class="string">&#x27;1900-01-01&#x27;</span></span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span> a.dt;</span><br></pre></td></tr></table></figure><p>方案2：子查询先过滤单表，再关联（效率更优）</p><p>先分别where筛选需要的数据，再join关联表</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> a.dt, <span class="built_in">count</span>(<span class="keyword">distinct</span> a.usr_id) <span class="keyword">as</span> num</span><br><span class="line"><span class="keyword">from</span> (</span><br><span class="line">  <span class="comment">-- 子查询 1：先过滤左表 a，只保留需要的行</span></span><br><span class="line">  <span class="keyword">select</span> dt, usr_id, apl_nbr</span><br><span class="line">  <span class="keyword">from</span> edw_cdm.dwd_cas_apl_aprv_di</span><br><span class="line">  <span class="keyword">where</span> dt <span class="operator">=</span> <span class="string">&#x27;2020-11-01&#x27;</span></span><br><span class="line">  <span class="keyword">and</span> apl_chnl_cd <span class="operator">=</span> <span class="string">&#x27;0APP&#x27;</span></span><br><span class="line">  <span class="keyword">and</span> apl_dt <span class="operator">&gt;</span> <span class="string">&#x27;1900-01-01&#x27;</span></span><br><span class="line">) a</span><br><span class="line"><span class="keyword">join</span> (</span><br><span class="line">  <span class="comment">-- 子查询 2：先过滤右表 b，只保留需要的行</span></span><br><span class="line">  <span class="keyword">select</span> apl_nbr</span><br><span class="line">  <span class="keyword">from</span> edw_cdm.dwd_cas_apl_aprv_tag_di</span><br><span class="line">  <span class="keyword">where</span> apl_cust_typ <span class="operator">=</span> <span class="string">&#x27;CRT_CUST_FIRST&#x27;</span></span><br><span class="line">) b <span class="keyword">on</span> a.apl_nbr <span class="operator">=</span> b.apl_nbr <span class="comment">-- 小数据集关联，效率高</span></span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span> a.dt;</span><br></pre></td></tr></table></figure><h4 id="先过滤再使用复杂函数"><a href="#先过滤再使用复杂函数" class="headerlink" title="先过滤再使用复杂函数"></a>先过滤再使用复杂函数</h4><p>优化前：</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> usr_id, pvc</span><br><span class="line"><span class="keyword">from</span> (</span><br><span class="line">    <span class="keyword">select</span></span><br><span class="line">    user_no <span class="keyword">as</span> usr_id</span><br><span class="line">    ,get_json_object(cust_info, <span class="string">&#x27;$.merchantAddress&#x27;</span>) <span class="keyword">as</span> pvc  <span class="comment">-- 复杂 JSON 解析函数</span></span><br><span class="line">    ,<span class="built_in">row_number</span>() <span class="keyword">over</span>(<span class="keyword">partition</span> <span class="keyword">by</span> user_no <span class="keyword">order</span> <span class="keyword">by</span> create_datetime <span class="keyword">desc</span>) <span class="keyword">as</span> rn  <span class="comment">-- 窗口函数</span></span><br><span class="line">    <span class="keyword">from</span> edw_ods.cas_trx_cst_ext_provide_info</span><br><span class="line">) t1</span><br><span class="line"><span class="keyword">where</span> rn <span class="operator">=</span> <span class="number">1</span>;</span><br></pre></td></tr></table></figure><p>优化后：</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span></span><br><span class="line">  usr_id,</span><br><span class="line">  get_json_object(cust_info, <span class="string">&#x27;$.merchantAddress&#x27;</span>) <span class="keyword">as</span> pvc <span class="comment">-- 仅对过滤后的数据执行 JSON 解析</span></span><br><span class="line"><span class="keyword">from</span> (</span><br><span class="line">  <span class="keyword">select</span></span><br><span class="line">    user_no <span class="keyword">as</span> usr_id</span><br><span class="line">    ,cust_info <span class="comment">-- 仅保留原始字段，不提前解析 JSON</span></span><br><span class="line">    ,<span class="built_in">row_number</span>() <span class="keyword">over</span>(<span class="keyword">partition</span> <span class="keyword">by</span> user_no <span class="keyword">order</span> <span class="keyword">by</span> create_datetime <span class="keyword">desc</span>) <span class="keyword">as</span> rn</span><br><span class="line">  <span class="keyword">from</span> edw_ods.cas_trx_cst_ext_provide_info</span><br><span class="line">) t1</span><br><span class="line"><span class="keyword">where</span> rn<span class="operator">=</span><span class="number">1</span>;</span><br></pre></td></tr></table></figure><h4 id="提前过滤null"><a href="#提前过滤null" class="headerlink" title="提前过滤null"></a>提前过滤null</h4><ul><li>JOIN倾斜-大表关联大表</li></ul><p>两个大表关联，如果关联字段包含大量无效值（NULL、空值等）或有大量重复数据，关联之后会导致数据倾斜，数据倾斜的特征是脚本执行过程中长时间卡在99%。</p><ul><li>倾斜值为无效值（NULL，空串等），如果无效值不需要，则直接过滤。</li></ul><p>优化前：</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 申请基表和申请标签表分别有几千万笔案件的客户号为空</span></span><br><span class="line"><span class="keyword">select</span> xxx <span class="keyword">from</span> edw_cdm.dwd_cas_apl_aprv_di a <span class="keyword">join</span> edw_cdm.dwd_cas_apl_aprv_tag_di b <span class="keyword">on</span> a.cust_id<span class="operator">=</span>b.cust_id;</span><br></pre></td></tr></table></figure><p>优化后：</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 过滤无效值</span></span><br><span class="line"><span class="keyword">select</span> xxx </span><br><span class="line"><span class="keyword">from</span>(<span class="keyword">select</span> apl_nbr,cust_id <span class="keyword">from</span> edw_cdm.dwd_cas_apl_aprv_di <span class="keyword">where</span> cust_id<span class="operator">&lt;&gt;</span><span class="string">&#x27;&#x27;</span>) a</span><br><span class="line"><span class="keyword">join</span>(<span class="keyword">select</span> apl_nbr,cust_id <span class="keyword">from</span> edw_cdm.dwd_cas_apl_aprv_tag_di <span class="keyword">where</span> cust_id<span class="operator">&lt;&gt;</span><span class="string">&#x27;&#x27;</span>) b <span class="keyword">on</span> a.cust_id<span class="operator">=</span>b.cust_id;</span><br></pre></td></tr></table></figure><ul><li>倾斜值为无效值（NULL，空串等），如果无效值需要保留，则先对无效值进行随机处理。</li></ul><h4 id="用group-by去重"><a href="#用group-by去重" class="headerlink" title="用group by去重"></a>用<code>group by</code>去重</h4><ul><li>Reduce倾斜-<code>distinct</code></li><li>用<code>group by</code>替代<code>distinct</code>去重</li></ul><p><code>distinct</code>会导致最后只有一个reducer，而<code>group by</code>会分发到不同的reducer上。考虑用<code>group by</code>代替。</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 优化前  用时276s</span></span><br><span class="line"><span class="keyword">select</span> <span class="built_in">count</span>(<span class="keyword">distinct</span> cust_id) <span class="keyword">as</span> num </span><br><span class="line"><span class="keyword">from</span> edw_cdm.dwd_cas_apl_aprv_di <span class="keyword">where</span> rsl_flg<span class="operator">=</span><span class="string">&#x27;Y&#x27;</span>;</span><br><span class="line"><span class="comment">-- 优化后 用时93s</span></span><br><span class="line"><span class="keyword">select</span> <span class="built_in">count</span>(<span class="number">1</span>) <span class="keyword">as</span> num</span><br><span class="line"><span class="keyword">from</span> (<span class="keyword">select</span> cust_id <span class="keyword">from</span> edw_cdm.dwd_cas_apl_aprv_di <span class="keyword">where</span> rsl_flg<span class="operator">=</span><span class="string">&#x27;Y&#x27;</span> <span class="keyword">group</span> <span class="keyword">by</span> cust_id) t1;</span><br></pre></td></tr></table></figure><hr><h1 id="刷7大类型SQL题"><a href="#刷7大类型SQL题" class="headerlink" title="刷7大类型SQL题"></a>刷7大类型SQL题</h1><blockquote><p>题型基本覆盖面试90%的问题！</p></blockquote><ul><li>排序类问题（普通排序，组内排序）</li><li>TOPN 问题</li><li>用户留存、复购率、完播率等计算复合指标问题</li><li>新用户数、用户间隔连续登录天数、最长连续登陆问题</li><li>偏移类求和求平均问题（lag, lead函数）</li><li>行列互转问题</li><li>中位数问题<ul><li>每个问题的相关的函数和语法有哪些，有没有哪些问题这7类没总结的</li><li>对 7 大类型 SQL 面试题，结合 PostgreSQL 语法给出典型例题及答案</li><li>对 7 大类型 SQL 面试题，结合 PostgreSQL 和trino语法分别给出典型例题及答案，用最少的表和字段完成所有示例，关键字用小写，示例要解释语法的使用和用到的函数</li><li>PostgreSQL 和trino语法分别给出答案，关键字用小写</li></ul></li></ul><h2 id="排序类问题（普通排序，组内排序）"><a href="#排序类问题（普通排序，组内排序）" class="headerlink" title="排序类问题（普通排序，组内排序）"></a>排序类问题（普通排序，组内排序）</h2><p><strong>普通排序</strong>：使用<code>order by</code>对查询结果进行排序。<br><strong>组内排序</strong>：使用窗口函数<code>row_number()</code>, <code>rank()</code>, <code>dense_rank()</code>等，在分组内进行排序。<br>配合 <code>PARTITION BY</code>进行分组，<code>ORDER BY</code>在组内排序</p><ul><li>排序函数：row_number(), rank(), dense_rank(), tnile()</li><li>ASC&#x2F;DESC</li></ul><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="built_in">row_number</span>() <span class="keyword">over</span>(<span class="keyword">partition</span> <span class="keyword">by</span> region <span class="keyword">order</span> <span class="keyword">by</span> dt)  <span class="comment">-- 连续不重复排名   </span></span><br><span class="line"><span class="built_in">rank</span>() <span class="keyword">over</span>(<span class="keyword">partition</span> <span class="keyword">by</span> region <span class="keyword">order</span> <span class="keyword">by</span> sales)       <span class="comment">-- 并列排名会跳过后续名次</span></span><br><span class="line"><span class="built_in">dense_rank</span>() <span class="keyword">over</span>(<span class="keyword">partition</span> <span class="keyword">by</span> region <span class="keyword">order</span> <span class="keyword">by</span> sales) <span class="comment">-- 并列排名不跳名次</span></span><br><span class="line"><span class="built_in">ntile</span>(n) <span class="keyword">over</span>(<span class="keyword">order</span> <span class="keyword">by</span> sales)                       <span class="comment">-- 分组排名</span></span><br></pre></td></tr></table></figure><ul><li><code>ROW_NUMBER()</code>: 连续唯一序号（1,2,3,4）</li><li><code>RANK()</code>: 并列时排名相同，后续序号跳过（1,2,2,4）</li><li><code>DENSE_RANK()</code>: 并列时排名相同，序号连续（1,2,2,3）</li><li><code>NTILE()</code>: 分桶，常用于五分位、十分位等</li></ul><p><strong>例题</strong>：有表1（<code>region</code>地区，<code>dt</code>日期，<code>sales</code>销售额），按地区分组，给每天的销售额按降序排组内名次（允许并列，不跳号）。</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> region</span><br></pre></td></tr></table></figure><h2 id="TOPN-问题"><a href="#TOPN-问题" class="headerlink" title="TOPN 问题"></a>TOPN 问题</h2><p>使用窗口函数或子查询来获取每个组内前N条记录。</p><ul><li>使用<code>row_number()</code>配合where条件</li><li>或者使用<code>limit()</code>（在MySQL&#x2F;PostgreSQL）或TOP（在SQL Server）等</li></ul><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 使用窗口函数</span></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span>(</span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span></span><br><span class="line">,<span class="built_in">row_number</span>() <span class="keyword">over</span>(<span class="keyword">partition</span> <span class="keyword">by</span> region <span class="keyword">order</span> <span class="keyword">by</span> <span class="type">date</span> <span class="keyword">DESC</span>) <span class="keyword">as</span> rn</span><br><span class="line"><span class="keyword">from</span> table1</span><br><span class="line">)t</span><br><span class="line"><span class="keyword">where</span> rn<span class="operator">&lt;=</span><span class="number">3</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 使用LIMIT（简单场景）</span></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> table1</span><br><span class="line"><span class="keyword">order</span> <span class="keyword">by</span> <span class="type">date</span> <span class="keyword">DESC</span></span><br><span class="line">limit <span class="number">3</span>;</span><br></pre></td></tr></table></figure><ol><li><p>全局TOPN<br>语法：</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span>(</span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span>,<span class="built_in">row_number</span>() <span class="keyword">over</span>(<span class="keyword">order</span> <span class="keyword">by</span> 排序列 <span class="keyword">DESC</span>) <span class="keyword">as</span> rn</span><br><span class="line">    <span class="keyword">from</span> 表名</span><br><span class="line">)t</span><br><span class="line"><span class="keyword">where</span> rn<span class="operator">&lt;=</span>N</span><br><span class="line">;</span><br></pre></td></tr></table></figure><p>示例：取销售额前3的订单</p></li><li><p>分组TOPN<br>语法：</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span>(</span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span>,<span class="built_in">row_number</span>() <span class="keyword">over</span>(<span class="keyword">partition</span> <span class="keyword">by</span> 分组列 <span class="keyword">order</span> <span class="keyword">by</span> 排序列 <span class="keyword">DESC</span>) <span class="keyword">as</span> rn</span><br><span class="line">    <span class="keyword">from</span> 表名</span><br><span class="line">)t</span><br><span class="line"><span class="keyword">where</span> rn<span class="operator">&lt;=</span>N</span><br><span class="line">;</span><br></pre></td></tr></table></figure><p>示例：取每个地区销售额前2的订单</p></li></ol><h2 id="用户留存、复购率、完播率等计算复合指标问题"><a href="#用户留存、复购率、完播率等计算复合指标问题" class="headerlink" title="用户留存、复购率、完播率等计算复合指标问题"></a>用户留存、复购率、完播率等计算复合指标问题</h2><p>这类问题通常需要计算比率，例如用户留存率是计算某天新增的用户在后续某天仍然活跃的比例。</p><ul><li>常用日期函数：<code>date_diff()</code>, <code>date_add()</code> 等</li><li>聚合函数：<code>sum(case when ...)</code>, <code>count(distinct ...)</code></li><li>条件表达式：case when, if</li><li>小数保留n位数：<code>round(expr, n)</code></li><li>数据类型转换：<code>cast(expr as decimal)</code></li></ul><p>PostgreSQL</p><ul><li><code>expr + INTERVAL &#39;1 day&#39;</code></li></ul><p>Trino</p><ul><li><code>date_add(&#39;day&#39;, 1, expr)</code></li></ul><h2 id="新用户数、用户间隔连续登录天数、最长连续登陆问题"><a href="#新用户数、用户间隔连续登录天数、最长连续登陆问题" class="headerlink" title="新用户数、用户间隔连续登录天数、最长连续登陆问题"></a>新用户数、用户间隔连续登录天数、最长连续登陆问题</h2><ul><li>常用窗口函数：<code>lag()</code>、<code>lead()</code>，用于获取前后行的数据</li><li>日期函数：<code>date_diff()</code>、<code>timestamp_diff()</code>，计算时间间隔</li><li>使用变量或窗口函数来分组连续登录</li></ul><p>PostgreSQL</p><ul><li><code>expr +/- INTERVAL &#39;1 day&#39;</code></li></ul><p>Trino</p><ul><li><code>date_add(&#39;day&#39;, 1, expr)</code></li></ul><h3 id="抖音电商数据分析笔试SQL题"><a href="#抖音电商数据分析笔试SQL题" class="headerlink" title="抖音电商数据分析笔试SQL题"></a>抖音电商数据分析笔试SQL题</h3><p>1、有一张订单表(order_info)，表结构如下:order_id、goods_id、order_time、order_gmv<br>问题：请统计2024年9月10日这天销量金额前10的商品信息。<br>要求:排名相同的一起作为同排名次序输出<br>2、有一张用户登录表(user_login_log)，表结构如下:uid、login_time<br>问题：请统计2024.9.1之前活跃过，但是9.1之后再也没有活跃过的用户</p><ul><li><p>创建表并帮我填入一些数据</p></li><li><p>解法是最高效率的吗，bp级数据可用不</p></li></ul><ol><li><p>商品销量排名前10：</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 2层子查询</span></span><br><span class="line"><span class="keyword">select</span> </span><br><span class="line">good_id</span><br><span class="line">,order_gmv</span><br><span class="line">,rank</span><br><span class="line"><span class="keyword">from</span>(</span><br><span class="line"><span class="keyword">select</span></span><br><span class="line">    good_id</span><br><span class="line">    ,order_gmv</span><br><span class="line">    ,<span class="built_in">dense_rank</span>() <span class="keyword">over</span>(<span class="keyword">order</span> <span class="keyword">by</span> total_gmv <span class="keyword">desc</span>) <span class="keyword">as</span> rank</span><br><span class="line">    <span class="keyword">from</span>(</span><br><span class="line">    <span class="keyword">select</span></span><br><span class="line">        good_id</span><br><span class="line">        ,<span class="built_in">sum</span>(order_gmv) <span class="keyword">as</span> total_gmv</span><br><span class="line">        <span class="keyword">from</span> order_info</span><br><span class="line">        <span class="keyword">where</span> <span class="built_in">cast</span>(order_time <span class="keyword">as</span> <span class="type">date</span>) <span class="operator">=</span> <span class="string">&#x27;2024-09-10&#x27;</span></span><br><span class="line">        <span class="keyword">group</span> <span class="keyword">by</span> good_id</span><br><span class="line">    ) <span class="keyword">as</span> res</span><br><span class="line">) <span class="keyword">as</span> res</span><br><span class="line"><span class="keyword">where</span> rank <span class="operator">&lt;=</span> <span class="number">10</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 1层子查询</span></span><br><span class="line"><span class="keyword">select</span> </span><br><span class="line">    rank_num, goods_id, total_gmv</span><br><span class="line"><span class="keyword">from</span> (</span><br><span class="line">    <span class="keyword">select</span> </span><br><span class="line">        <span class="built_in">dense_rank</span>() <span class="keyword">over</span> (<span class="keyword">order</span> <span class="keyword">by</span> <span class="built_in">sum</span>(total_gmv) <span class="keyword">desc</span>) <span class="keyword">as</span> rank</span><br><span class="line">        ,goods_id</span><br><span class="line">        ,<span class="built_in">sum</span>(order_gmv) <span class="keyword">as</span> total_gmv</span><br><span class="line">    <span class="keyword">from</span> order_info</span><br><span class="line">    <span class="keyword">where</span> <span class="built_in">cast</span>(order_time <span class="keyword">as</span> <span class="type">date</span>) <span class="operator">=</span> <span class="string">&#x27;2024-09-10&#x27;</span></span><br><span class="line">    <span class="keyword">group</span> <span class="keyword">by</span> goods_id</span><br><span class="line">) t</span><br><span class="line"><span class="keyword">where</span> rank <span class="operator">&lt;=</span> <span class="number">10</span>;</span><br></pre></td></tr></table></figure></li><li><p>用户流失分析：</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 不写CTE</span></span><br><span class="line"><span class="keyword">select</span> </span><br><span class="line">t.uid</span><br><span class="line"><span class="keyword">from</span>(</span><br><span class="line"><span class="keyword">select</span> </span><br><span class="line">    uid</span><br><span class="line">    <span class="keyword">from</span> user_login_log</span><br><span class="line">    <span class="keyword">where</span> login_time <span class="operator">&lt;=</span> <span class="string">&#x27;2024-09-01&#x27;</span></span><br><span class="line">    <span class="keyword">group</span> <span class="keyword">by</span> uid</span><br><span class="line">) <span class="keyword">as</span> t</span><br><span class="line"><span class="keyword">left</span> <span class="keyword">join</span>(</span><br><span class="line"><span class="keyword">select</span> </span><br><span class="line">    uid</span><br><span class="line">    <span class="keyword">from</span> user_login_log</span><br><span class="line">    <span class="keyword">where</span> login_time <span class="operator">&gt;</span> <span class="string">&#x27;2024-09-01&#x27;</span></span><br><span class="line">    <span class="keyword">group</span> <span class="keyword">by</span> uid</span><br><span class="line">)<span class="keyword">as</span> t1 </span><br><span class="line"><span class="keyword">on</span> t.uid<span class="operator">=</span>t1.uid</span><br><span class="line"><span class="keyword">where</span> t1.uid <span class="keyword">is</span> <span class="keyword">null</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 写CTE</span></span><br><span class="line"><span class="keyword">with</span> tmp_before <span class="keyword">as</span>(</span><br><span class="line"><span class="keyword">select</span> uid</span><br><span class="line">    <span class="keyword">from</span> user_login_log</span><br><span class="line">    <span class="keyword">where</span> login_time <span class="operator">&lt;=</span> <span class="string">&#x27;2024-09-01&#x27;</span></span><br><span class="line">    <span class="keyword">group</span> <span class="keyword">by</span> <span class="number">1</span></span><br><span class="line">)</span><br><span class="line">, tmp_after <span class="keyword">as</span>(</span><br><span class="line"><span class="keyword">select</span> uid</span><br><span class="line">    <span class="keyword">from</span> user_login_log</span><br><span class="line">    <span class="keyword">where</span> login_time <span class="operator">&gt;</span> <span class="string">&#x27;2024-09-01&#x27;</span></span><br><span class="line">    <span class="keyword">group</span> <span class="keyword">by</span> <span class="number">1</span></span><br><span class="line">)</span><br><span class="line"><span class="keyword">select</span> t.uid</span><br><span class="line"><span class="keyword">from</span> tmp_before t</span><br><span class="line"><span class="keyword">left</span> <span class="keyword">join</span> tmp_after t1 <span class="keyword">on</span> t.uid<span class="operator">=</span>t1.uid</span><br><span class="line"><span class="keyword">where</span> t1.uid <span class="keyword">is</span> <span class="keyword">null</span></span><br></pre></td></tr></table></figure></li><li><p>建表测试：</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* PostgreSQL语法 */</span></span><br><span class="line"><span class="comment">-- 创建订单表</span></span><br><span class="line"><span class="keyword">create table</span> order_info (</span><br><span class="line">    order_id <span class="type">int</span> <span class="keyword">primary key</span>,</span><br><span class="line">    goods_id <span class="type">int</span>,</span><br><span class="line">    order_time <span class="type">timestamp</span>,</span><br><span class="line">    order_gmv <span class="type">decimal</span>(<span class="number">10</span>, <span class="number">2</span>)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 插入测试数据（2024年9月10日）</span></span><br><span class="line"><span class="keyword">insert into</span> order_info <span class="keyword">values</span></span><br><span class="line">(<span class="number">1001</span>, <span class="number">101</span>, <span class="string">&#x27;2024-09-10 08:30:00&#x27;</span>, <span class="number">299.99</span>),</span><br><span class="line">(<span class="number">1002</span>, <span class="number">102</span>, <span class="string">&#x27;2024-09-10 09:15:00&#x27;</span>, <span class="number">1500.00</span>),</span><br><span class="line">(<span class="number">1003</span>, <span class="number">103</span>, <span class="string">&#x27;2024-09-10 10:20:00&#x27;</span>, <span class="number">899.50</span>),</span><br><span class="line">(<span class="number">1004</span>, <span class="number">101</span>, <span class="string">&#x27;2024-09-10 10:45:00&#x27;</span>, <span class="number">299.99</span>),</span><br><span class="line">(<span class="number">1005</span>, <span class="number">102</span>, <span class="string">&#x27;2024-09-10 11:00:00&#x27;</span>, <span class="number">1500.00</span>),</span><br><span class="line">(<span class="number">1006</span>, <span class="number">104</span>, <span class="string">&#x27;2024-09-10 11:30:00&#x27;</span>, <span class="number">599.99</span>),</span><br><span class="line">(<span class="number">1007</span>, <span class="number">105</span>, <span class="string">&#x27;2024-09-10 12:00:00&#x27;</span>, <span class="number">2299.00</span>),</span><br><span class="line">(<span class="number">1008</span>, <span class="number">101</span>, <span class="string">&#x27;2024-09-10 12:45:00&#x27;</span>, <span class="number">299.99</span>),</span><br><span class="line">(<span class="number">1009</span>, <span class="number">106</span>, <span class="string">&#x27;2024-09-10 13:20:00&#x27;</span>, <span class="number">450.00</span>),</span><br><span class="line">(<span class="number">1010</span>, <span class="number">102</span>, <span class="string">&#x27;2024-09-10 14:00:00&#x27;</span>, <span class="number">1500.00</span>),</span><br><span class="line">(<span class="number">1011</span>, <span class="number">107</span>, <span class="string">&#x27;2024-09-10 14:30:00&#x27;</span>, <span class="number">3499.99</span>),</span><br><span class="line">(<span class="number">1012</span>, <span class="number">103</span>, <span class="string">&#x27;2024-09-10 15:00:00&#x27;</span>, <span class="number">899.50</span>),</span><br><span class="line">(<span class="number">1013</span>, <span class="number">108</span>, <span class="string">&#x27;2024-09-10 15:45:00&#x27;</span>, <span class="number">199.99</span>),</span><br><span class="line">(<span class="number">1014</span>, <span class="number">105</span>, <span class="string">&#x27;2024-09-10 16:20:00&#x27;</span>, <span class="number">2299.00</span>),</span><br><span class="line">(<span class="number">1015</span>, <span class="number">109</span>, <span class="string">&#x27;2024-09-10 17:00:00&#x27;</span>, <span class="number">799.99</span>),</span><br><span class="line">(<span class="number">1016</span>, <span class="number">101</span>, <span class="string">&#x27;2024-09-10 17:30:00&#x27;</span>, <span class="number">299.99</span>),</span><br><span class="line">(<span class="number">1017</span>, <span class="number">110</span>, <span class="string">&#x27;2024-09-10 18:00:00&#x27;</span>, <span class="number">1099.00</span>),</span><br><span class="line">(<span class="number">1018</span>, <span class="number">102</span>, <span class="string">&#x27;2024-09-10 18:45:00&#x27;</span>, <span class="number">1500.00</span>),</span><br><span class="line">(<span class="number">1019</span>, <span class="number">107</span>, <span class="string">&#x27;2024-09-10 19:20:00&#x27;</span>, <span class="number">3499.99</span>),</span><br><span class="line">(<span class="number">1020</span>, <span class="number">111</span>, <span class="string">&#x27;2024-09-10 20:00:00&#x27;</span>, <span class="number">599.50</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> order_info;</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* PostgreSQL语法 */</span></span><br><span class="line"><span class="comment">-- 创建用户登录表</span></span><br><span class="line"><span class="keyword">create table</span> user_login_log (</span><br><span class="line">    uid <span class="type">int</span>,</span><br><span class="line">    login_time <span class="type">timestamp</span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 插入测试数据</span></span><br><span class="line"><span class="comment">-- 用户1001: 9月1日前活跃，之后未活跃（流失用户）</span></span><br><span class="line"><span class="keyword">insert into</span> user_login_log <span class="keyword">values</span></span><br><span class="line">(<span class="number">1001</span>, <span class="string">&#x27;2024-08-25 10:30:00&#x27;</span>),</span><br><span class="line">(<span class="number">1001</span>, <span class="string">&#x27;2024-08-28 14:20:00&#x27;</span>),</span><br><span class="line">(<span class="number">1001</span>, <span class="string">&#x27;2024-08-31 18:45:00&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 用户1002: 9月1日前活跃，之后也活跃（保留用户）</span></span><br><span class="line"><span class="keyword">insert into</span> user_login_log <span class="keyword">values</span></span><br><span class="line">(<span class="number">1002</span>, <span class="string">&#x27;2024-08-20 09:00:00&#x27;</span>),</span><br><span class="line">(<span class="number">1002</span>, <span class="string">&#x27;2024-08-30 15:30:00&#x27;</span>),</span><br><span class="line">(<span class="number">1002</span>, <span class="string">&#x27;2024-09-05 11:20:00&#x27;</span>),</span><br><span class="line">(<span class="number">1002</span>, <span class="string">&#x27;2024-09-15 16:45:00&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 用户1003: 9月1日前活跃，之后未活跃（流失用户）</span></span><br><span class="line"><span class="keyword">insert into</span> user_login_log <span class="keyword">values</span></span><br><span class="line">(<span class="number">1003</span>, <span class="string">&#x27;2024-08-15 10:00:00&#x27;</span>),</span><br><span class="line">(<span class="number">1003</span>, <span class="string">&#x27;2024-08-22 13:30:00&#x27;</span>),</span><br><span class="line">(<span class="number">1003</span>, <span class="string">&#x27;2024-08-29 20:15:00&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 用户1004: 仅在9月1日后活跃（新用户，不符合条件）</span></span><br><span class="line"><span class="keyword">insert into</span> user_login_log <span class="keyword">values</span></span><br><span class="line">(<span class="number">1004</span>, <span class="string">&#x27;2024-09-10 12:00:00&#x27;</span>),</span><br><span class="line">(<span class="number">1004</span>, <span class="string">&#x27;2024-09-18 14:30:00&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 用户1005: 9月1日前活跃，之后也活跃（保留用户）</span></span><br><span class="line"><span class="keyword">insert into</span> user_login_log <span class="keyword">values</span></span><br><span class="line">(<span class="number">1005</span>, <span class="string">&#x27;2024-08-10 08:00:00&#x27;</span>),</span><br><span class="line">(<span class="number">1005</span>, <span class="string">&#x27;2024-08-25 17:45:00&#x27;</span>),</span><br><span class="line">(<span class="number">1005</span>, <span class="string">&#x27;2024-09-08 09:20:00&#x27;</span>),</span><br><span class="line">(<span class="number">1005</span>, <span class="string">&#x27;2024-09-20 19:00:00&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 用户1006: 9月1日前活跃，之后未活跃（流失用户）</span></span><br><span class="line"><span class="keyword">insert into</span> user_login_log <span class="keyword">values</span></span><br><span class="line">(<span class="number">1006</span>, <span class="string">&#x27;2024-08-05 11:30:00&#x27;</span>),</span><br><span class="line">(<span class="number">1006</span>, <span class="string">&#x27;2024-08-31 15:20:00&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 用户1007: 9月1日前活跃，之后未活跃（流失用户）</span></span><br><span class="line"><span class="keyword">insert into</span> user_login_log <span class="keyword">values</span></span><br><span class="line">(<span class="number">1007</span>, <span class="string">&#x27;2024-08-12 10:00:00&#x27;</span>),</span><br><span class="line">(<span class="number">1007</span>, <span class="string">&#x27;2024-08-26 13:15:00&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 用户1008: 仅在9月1日后活跃（新用户）</span></span><br><span class="line"><span class="keyword">insert into</span> user_login_log <span class="keyword">values</span></span><br><span class="line">(<span class="number">1008</span>, <span class="string">&#x27;2024-09-22 11:00:00&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> user_login_log;</span><br></pre></td></tr></table></figure></li></ol><h2 id="偏移类求和求平均问题（lag-lead函数）"><a href="#偏移类求和求平均问题（lag-lead函数）" class="headerlink" title="偏移类求和求平均问题（lag, lead函数）"></a>偏移类求和求平均问题（lag, lead函数）</h2><ul><li>窗口函数：<code>lag()</code>、<code>lead()</code>, 用于获取前后行的值</li><li>窗口函数：<code>sum()</code>，<code>avg()</code> 等结合rows&#x2F;range</li></ul><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="built_in">lag</span>(sales,<span class="number">1</span>) <span class="keyword">over</span>(<span class="keyword">partition</span> <span class="keyword">by</span> region <span class="keyword">order</span> <span class="keyword">by</span> <span class="type">date</span>) <span class="keyword">as</span> prev_sales</span><br><span class="line"><span class="built_in">lead</span>(sales,<span class="number">1</span>) <span class="keyword">over</span>(<span class="keyword">partition</span> <span class="keyword">by</span> region <span class="keyword">order</span> <span class="keyword">by</span> <span class="type">date</span>) <span class="keyword">as</span> next_sales</span><br><span class="line"><span class="built_in">avg</span>(sales) <span class="keyword">over</span>(<span class="keyword">partition</span> <span class="keyword">by</span> region <span class="keyword">order</span> <span class="keyword">by</span> <span class="type">date</span> <span class="keyword">rows</span> <span class="keyword">between</span> <span class="number">6</span> preceding <span class="keyword">and</span> <span class="keyword">current</span> <span class="type">row</span>) <span class="keyword">as</span> moving_avg</span><br></pre></td></tr></table></figure><ul><li><strong>rows&#x2F;range</strong> 窗口帧<ul><li>包括左右区间</li><li><code>unbounded preceding</code>                      分区头</li><li><code>unbounded following</code>                       分区尾</li><li><code>interval &#39;1 month&#39; preceding</code>    前1个月</li><li><code>n preceding </code>                 前n行</li><li><code>current row</code>                   当前行</li><li><code>n following</code>                   后n行</li></ul></li></ul><ol><li><p>分区头到分区尾：</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">rows</span> <span class="keyword">between</span> unbounded preceding <span class="keyword">and</span> unbounded following</span><br></pre></td></tr></table></figure></li><li><p>前n行到当前行</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">rows</span> <span class="keyword">between</span> n preceding <span class="keyword">and</span> <span class="keyword">current</span> <span class="type">row</span></span><br></pre></td></tr></table></figure></li><li><p>当前行到后n行</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">rows</span> <span class="keyword">between</span> <span class="keyword">current</span> <span class="type">row</span> <span class="keyword">and</span> n following</span><br></pre></td></tr></table></figure></li><li><p>前n行到后n行</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">rows</span> <span class="keyword">between</span> n preceding <span class="keyword">and</span> n following</span><br></pre></td></tr></table></figure></li><li><p>分区头到当前行</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">rows</span> <span class="keyword">between</span> unbounded preceding <span class="keyword">and</span> <span class="keyword">current</span> <span class="type">row</span></span><br></pre></td></tr></table></figure></li><li><p>当前行到分区尾</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">rows</span> <span class="keyword">between</span> <span class="keyword">current</span> <span class="type">row</span> <span class="keyword">and</span> unbounded following</span><br></pre></td></tr></table></figure></li><li><p>前一个月到当前行</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">range</span> <span class="keyword">between</span> <span class="type">interval</span> <span class="string">&#x27;1 month&#x27;</span> preceding <span class="keyword">and</span> <span class="keyword">current</span> <span class="type">row</span></span><br></pre></td></tr></table></figure></li><li><p>继续。。。</p></li></ol><ul><li>同比环比<ul><li><code>lag(expr,1)</code>，<code>lag(expr,12)</code></li></ul></li></ul><h2 id="行列互转问题"><a href="#行列互转问题" class="headerlink" title="行列互转问题"></a>行列互转问题</h2><ul><li>行转列：使用<code>case when</code>或 <code>pivot</code>（部分数据库支持，如SQL Server）</li><li>列转行：使用<code>union all</code>或 <code>unpivot</code>（部分数据库支持）</li></ul><p><strong>核心概念</strong></p><ul><li><p>行转列：</p><p> 将某一列中的唯一值转换为新的列名，并将另一列的值填充到这些新列之下。通常伴随聚合操作。</p><ul><li><em>示例：</em> 将 <code>(年份, 季度, 销售额)</code> 转换为 <code>(年份, Q1销售额, Q2销售额, Q3销售额, Q4销售额)</code>。</li></ul></li><li><p>列转行：</p><p> 是行转列的逆操作，将多个列合并成两个列：一个用于存储原列名（键），一个用于存储原列的值（值）。</p><ul><li><em>示例：</em> 将 <code>(年份, Q1销售额, Q2销售额, Q3销售额, Q4销售额)</code> 转换回 <code>(年份, 季度, 销售额)</code>。</li></ul></li></ul><p><img src="/./../%E5%BF%AB%E9%80%9F%E7%B2%BE%E9%80%9ASQL/image-20251023164941369.png" alt="image-20251023164941369"></p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 通用语法？？？ */</span></span><br><span class="line"><span class="keyword">create table</span> t(id <span class="type">int</span>, seller text, product text, amount <span class="type">int</span>);</span><br><span class="line"><span class="keyword">insert into</span> t <span class="keyword">values</span></span><br><span class="line">(<span class="string">&#x27;101&#x27;</span>, <span class="string">&#x27;alice&#x27;</span>,<span class="string">&#x27;dior&#x27;</span>,<span class="number">310</span>),</span><br><span class="line">(<span class="string">&#x27;101&#x27;</span>, <span class="string">&#x27;alice&#x27;</span>,<span class="string">&#x27;lamer&#x27;</span>,<span class="number">285</span>),</span><br><span class="line">(<span class="string">&#x27;101&#x27;</span>, <span class="string">&#x27;alice&#x27;</span>,<span class="string">&#x27;sk2&#x27;</span>,<span class="number">265</span>),</span><br><span class="line">(<span class="string">&#x27;102&#x27;</span>, <span class="string">&#x27;bob&#x27;</span>,<span class="string">&#x27;dior&#x27;</span>,<span class="number">305</span>),</span><br><span class="line">(<span class="string">&#x27;102&#x27;</span>, <span class="string">&#x27;bob&#x27;</span>,<span class="string">&#x27;lamer&#x27;</span>,<span class="number">290</span>),</span><br><span class="line">(<span class="string">&#x27;102&#x27;</span>, <span class="string">&#x27;bob&#x27;</span>,<span class="string">&#x27;sk2&#x27;</span>,<span class="number">280</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span></span><br><span class="line">    id,seller</span><br><span class="line">    ,<span class="built_in">sum</span>(amount) <span class="keyword">filter</span> (<span class="keyword">where</span> product <span class="operator">=</span> <span class="string">&#x27;dior&#x27;</span>)  <span class="keyword">as</span> dior</span><br><span class="line">    ,<span class="built_in">sum</span>(amount) <span class="keyword">filter</span> (<span class="keyword">where</span> product <span class="operator">=</span> <span class="string">&#x27;lamer&#x27;</span>) <span class="keyword">as</span> lamer</span><br><span class="line">    ,<span class="built_in">sum</span>(amount) <span class="keyword">filter</span> (<span class="keyword">where</span> product <span class="operator">=</span> <span class="string">&#x27;sk2&#x27;</span>)   <span class="keyword">as</span> sk2</span><br><span class="line"><span class="keyword">from</span> t</span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span> <span class="number">1</span>,<span class="number">2</span>;</span><br></pre></td></tr></table></figure><p>PostgreSQL</p><ul><li><code>case when</code></li><li><code>filter</code></li></ul><p>Trino</p><ul><li><code>case when</code></li><li><code>filter</code></li><li><code>count_if</code></li></ul><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* PostgreSQL语法 */</span></span><br><span class="line"><span class="keyword">select</span> dt</span><br><span class="line">,<span class="built_in">sum</span>(<span class="keyword">case</span> <span class="keyword">when</span> shop<span class="operator">=</span><span class="string">&#x27;A店&#x27;</span> <span class="keyword">then</span> <span class="number">1</span> <span class="keyword">else</span> <span class="number">0</span> <span class="keyword">end</span>) <span class="keyword">as</span> shop1</span><br><span class="line">,<span class="built_in">sum</span>(<span class="keyword">case</span> <span class="keyword">when</span> shop<span class="operator">=</span><span class="string">&#x27;B店&#x27;</span> <span class="keyword">then</span> <span class="number">1</span> <span class="keyword">else</span> <span class="number">0</span> <span class="keyword">end</span>) <span class="keyword">as</span> shop2</span><br><span class="line"><span class="keyword">from</span> t</span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span> <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/* Trino语法 */</span></span><br><span class="line"><span class="keyword">select</span> dt</span><br><span class="line">,count_if(shop<span class="operator">=</span><span class="string">&#x27;A店&#x27;</span>) <span class="keyword">as</span> shop1</span><br><span class="line">,count_if(shop<span class="operator">=</span><span class="string">&#x27;B店&#x27;</span>) <span class="keyword">as</span> shop2</span><br><span class="line"><span class="keyword">from</span> t</span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span> <span class="number">1</span>;</span><br></pre></td></tr></table></figure><h2 id="中位数问题"><a href="#中位数问题" class="headerlink" title="中位数问题"></a>中位数问题</h2><ul><li>方法1：使用窗口函数：PERCENTILE_CONT, PERCENTILE_DISC等（部分数据库支持，如PostgreSQL、SQL Server）</li><li>方法2：使用排序和计数的方法</li></ul><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="built_in">percentile_cont</span>(<span class="number">0.5</span>) <span class="keyword">within</span> <span class="keyword">group</span>(<span class="keyword">order</span> <span class="keyword">by</span> score) <span class="keyword">as</span> median</span><br></pre></td></tr></table></figure><p>PostgreSQL</p><ul><li><code>percentile_cont()</code>连续百分位数（推荐）</li><li><code>percentile_disc()</code>离散百分位数</li><li><strong>如何选择？</strong><ul><li>若数据是<strong>连续型</strong>（如价格、时长），且希望百分位结果更精确（允许插值），用 <code>percentile_cont</code>；</li><li>若数据是<strong>离散型</strong>（如评分、数量），或要求结果必须是原始数据中的值，用 <code>percentile_disc</code>。</li></ul></li></ul><p>Trino</p><ul><li><code>approx_percentile()</code></li></ul><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* PostgreSQL语法 */</span></span><br><span class="line"><span class="keyword">select</span></span><br><span class="line"><span class="built_in">percentile_cont</span>(<span class="number">0.5</span>) <span class="keyword">within</span> <span class="keyword">group</span>(<span class="keyword">order</span> <span class="keyword">by</span> sales)</span><br><span class="line">,<span class="built_in">percentile_disc</span>(<span class="number">0.5</span>) <span class="keyword">within</span> <span class="keyword">group</span>(<span class="keyword">order</span> <span class="keyword">by</span> sales)</span><br><span class="line"><span class="keyword">from</span> t;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/* Trino语法 */</span></span><br><span class="line"><span class="comment">-- 基础用法（返回近似值）</span></span><br><span class="line"><span class="keyword">select</span></span><br><span class="line">approx_percentile(sales, <span class="number">0.5</span>)</span><br><span class="line"><span class="keyword">from</span> t;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 按商店分组</span></span><br><span class="line"><span class="keyword">select</span></span><br><span class="line">shop</span><br><span class="line">,approx_percentile(sales, <span class="number">0.5</span>)</span><br><span class="line"><span class="keyword">from</span> t</span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span> <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 作为窗口函数</span></span><br><span class="line"><span class="keyword">select</span></span><br><span class="line">shop</span><br><span class="line">,approx_percentile(sales, <span class="number">0.5</span>) <span class="keyword">over</span>(partiiton <span class="keyword">by</span> shop)</span><br><span class="line"><span class="keyword">from</span> t;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 多个百分位数</span></span><br><span class="line"><span class="keyword">select</span></span><br><span class="line">approx_percentile(sales, <span class="keyword">array</span>[<span class="number">0.25</span>, <span class="number">0.5</span>, <span class="number">0.75</span>])</span><br><span class="line"><span class="keyword">from</span> t;</span><br></pre></td></tr></table></figure><p>通用解法：</p><p>排序求解</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">with</span> tmp1 <span class="keyword">as</span>(</span><br><span class="line"><span class="keyword">select</span> sales</span><br><span class="line">,<span class="built_in">row_number</span>() <span class="keyword">over</span>(<span class="keyword">order</span> <span class="keyword">by</span> sales) <span class="keyword">as</span> rn</span><br><span class="line">,<span class="built_in">count</span>(<span class="operator">*</span>) <span class="keyword">over</span>() <span class="keyword">as</span> total_rows</span><br><span class="line"><span class="keyword">from</span> t</span><br><span class="line">)</span><br><span class="line"><span class="keyword">select</span> <span class="built_in">avg</span>(sales) <span class="keyword">as</span> median</span><br><span class="line"><span class="keyword">from</span> tmp1</span><br><span class="line"><span class="keyword">where</span> rn <span class="keyword">in</span>((total_rows<span class="operator">+</span><span class="number">1</span>) div <span class="number">2</span>, (total_rows<span class="operator">+</span><span class="number">2</span>) <span class="operator">/</span> <span class="number">2</span>);</span><br></pre></td></tr></table></figure><ul><li><code>count(*) over() as total_rows</code>  – 窗口函数：全表总行数（不分组）</li><li><code>where rn in((total_rows+1) div 2, (total_rows+2) / 2)</code>我没懂</li></ul><p>​这段条件的核心是 <strong>用一个公式同时适配 “奇数总行数” 和 “偶数总行数”</strong>，不用写 IF&#x2F;CASE 判断，靠整数除法的特性自动筛选出需要的中间行。咱们用「具体例子」拆解，瞬间就能懂！</p><p><strong>先明确两个前提</strong></p><ul><li><code>rn</code>：按销售额排序后的唯一行号（1、2、3、…、total_rows）；</li><li><code>total_rows</code>：数据集的总行数（比如 5 行、6 行，分别对应奇数、偶数）；</li><li>关键：SQL 里的整数除法（比如 (5+1)&#x2F;2）会 <strong>自动向下取整</strong>（不用管小数部分）。</li></ul><p><strong>例子 1：总行数是奇数（total_rows&#x3D;5）</strong></p><p>比如数据排序后行号 <code>rn=1、2、3、4、5</code>，中位数是第 3 行的值。代入公式计算两个位置：</p><ol><li>第一个位置：<code>(5+1)/2 = 3</code>（整数除法，结果 &#x3D; 3）；</li><li>第二个位置：<code>(5+2)/2 = 3.5</code>（整数除法，向下取整 &#x3D; 3）；</li></ol><p>所以 <code>rn IN (3, 3)</code> → 实际筛选 <code>rn=3</code> 的行（只 1 行），用 AVG 计算就是它本身（中位数 &#x3D; 第 3 行的值）。</p><p><strong>例子 2：总行数是偶数（total_rows&#x3D;6）</strong></p><p>比如数据排序后行号 <code>rn=1、2、3、4、5、6</code>，中位数是第 3 行和第 4 行的平均值。代入公式计算两个位置：</p><ol><li>第一个位置：<code>(6+1)/2 = 3.5</code>（整数除法，向下取整 &#x3D; 3）；</li><li>第二个位置：<code>(6+2)/2 = 4</code>（整数除法，结果 &#x3D; 4）；</li></ol><p>所以 <code>rn IN (3, 4)</code> → 筛选出第 3 行和第 4 行，用 AVG 计算就是这两个值的平均（中位数 &#x3D;（第 3 行 + 第 4 行）&#x2F;2）。</p><p><strong>一句话总结公式的巧妙之处</strong></p><ul><li>奇数行：两个公式算出来的位置 <strong>相同</strong> → 只取 1 行；</li><li>偶数行：两个公式算出来的位置 <strong>相邻</strong> → 取 2 行；</li></ul><h2 id="其他问题"><a href="#其他问题" class="headerlink" title="其他问题"></a>其他问题</h2><p><code>UNION ALL</code>：合并结果</p><p><strong>自连接 (Self Join)</strong>: 用于比较表内相同记录（例如，查找薪资高于其经理的员工，查找重复记录）。</p><p><strong>字符串处理</strong>: 文本提取、拼接、模式匹配等。</p><p><strong>日期&#x2F;时间处理</strong>: 复杂的日期计算、跨时区处理、时间窗口聚合等。</p><p><strong>地理空间查询</strong>: 使用 PostGIS 等扩展进行空间数据分析（在 PostgreSQL 中常见）。</p><p><strong>数据倾斜处理</strong>: 在分布式 SQL 引擎（如 Trino）中，如何识别和处理因数据分布不均导致的性能问题。</p><hr><h1 id="类型转换"><a href="#类型转换" class="headerlink" title="类型转换"></a>类型转换</h1><h2 id="日期-时间戳→数值"><a href="#日期-时间戳→数值" class="headerlink" title="日期&#x2F;时间戳→数值"></a>日期&#x2F;时间戳→数值</h2><p>各数据库的替代写法</p><table><thead><tr><th align="left">数据库</th><th align="left">写法</th></tr></thead><tbody><tr><td align="left"><strong>PostgreSQL</strong></td><td align="left"><code>extract(epoch from date)</code></td></tr><tr><td align="left"><strong>Trino</strong></td><td align="left"><code>to_unixtime(date)</code></td></tr><tr><td align="left"><strong>MySQL</strong></td><td align="left"><code>unix_timestamp(date)</code></td></tr><tr><td align="left"><strong>Hive</strong></td><td align="left"><code>unix_timestamp(date)</code></td></tr></tbody></table><p>为什么Unix时间戳更适合回归分析</p><ul><li><strong>Unix时间戳</strong>: 每天均匀增加 <code>86400</code> 秒，适合线性回归</li><li><strong>YYYYMMDD格式</strong>: 数字跳跃很大（<code>20250901</code> → <code>20250902</code>），且间隔不均匀</li></ul><h2 id="函数语法"><a href="#函数语法" class="headerlink" title="函数语法"></a>函数语法</h2><p>全部都支持通用标准转换：<code>cast(expr as type)</code></p><table><thead><tr><th align="left">数据库</th><th align="left">专用转换函数</th><th>字符串→日期</th><th>日期→字符串</th><th>字符串→整数</th></tr></thead><tbody><tr><td align="left"><strong>PostgreSQL</strong></td><td align="left"><code>::</code>操作符</td><td><code>cast(expr as date)</code></td><td><code>cast(expr as text)</code></td><td><code>cast(expr as integer)</code></td></tr><tr><td align="left"><strong>Trino</strong></td><td align="left"><code>try_cast()</code></td><td><code>cast(expr as date)</code></td><td><code>cast(expr as varchar)</code></td><td><code>cast(expr as integer)</code></td></tr><tr><td align="left"><strong>MySQL</strong></td><td align="left"><code>convert(),cast()</code></td><td><code>cast(expr as date)</code></td><td><code>cast(expr as char)</code></td><td><code>cast(expr as signed)</code></td></tr><tr><td align="left"><strong>Hive</strong></td><td align="left">无<code>try_cast</code></td><td><code>cast(expr as date)</code></td><td><code>cast(expr as string)</code></td><td><code>cast(expr as int)</code></td></tr></tbody></table><p>不同数据库中的数据类型转换，数据库类型按照企业级分类</p><table><thead><tr><th align="left">分类</th><th align="left">数据库</th><th align="left">标准CAST</th><th align="left">推荐&#x2F;专用转换语法</th><th align="left">核心特点与注意事项</th></tr></thead><tbody><tr><td align="left"><strong>🔒 传统OLTP</strong></td><td align="left"><strong>PostgreSQL</strong></td><td align="left">✅</td><td align="left"><code>expr::type</code> <code>to_char(expr)</code> <code>extract(epoch from expr)</code></td><td align="left"><strong>类型系统最严格</strong>，转换失败直接报错。功能最丰富，支持自定义类型和运算符。</td></tr><tr><td align="left"></td><td align="left"><strong>MySQL</strong></td><td align="left">✅</td><td align="left"><code>CONVERT(expr, type)</code> <code>DATE_FORMAT(...)</code> <code>CAST(expr as signed)</code></td><td align="left"><strong>隐式转换宽松</strong>，可能导致意外结果。例如，字符串转数字会截取开头部分。</td></tr><tr><td align="left"><strong>🚀 大数据OLAP</strong></td><td align="left"><strong>Trino&#x2F;Presto</strong></td><td align="left">✅</td><td align="left"><strong><code>try_cast(expr as type)</code></strong> <code>to_unixtime(expr)</code> <code>format_datetime(expr)</code></td><td align="left"><strong>强调稳定性</strong>。<code>try_cast</code>转换失败返回<code>NULL</code>，是ETL任务首选。类型名多用<code>VARCHAR</code>。</td></tr><tr><td align="left"></td><td align="left"><strong>Spark SQL</strong></td><td align="left">✅</td><td align="left"><code>try_cast(expr as type)</code> (新版本) <code>date_format(...)</code> <code>unix_timestamp(...)</code></td><td align="left">与Trino理念类似，但函数名更接近Hive。处理脏数据时推荐使用<code>try_cast</code>。</td></tr><tr><td align="left"></td><td align="left"><strong>Hive</strong></td><td align="left">✅</td><td align="left"><code>unix_timestamp(...)</code> <code>from_unixtime(...)</code> <code>date_format(...)</code></td><td align="left"><strong>“读时模式”</strong>，转换相对宽松。版本间行为可能有变（如Hive 3时间戳时区处理）。</td></tr><tr><td align="left"><strong>🌐 云原生HTAP</strong></td><td align="left"><strong>TiDB</strong></td><td align="left">✅</td><td align="left"><code>CONVERT(expr, type)</code> <code>DATE_FORMAT(...)</code></td><td align="left"><strong>高度兼容MySQL语法</strong>，但作为分布式系统，某些函数（如<code>CONVERT</code>）的行为旨在确保集群一致性。</td></tr><tr><td align="left"><strong>📈 专用OLAP</strong></td><td align="left"><strong>ClickHouse</strong></td><td align="left">✅</td><td align="left"><strong><code>accurateCast(expr, type)</code></strong> <code>toUnixTimestamp(...)</code> <code>toString(...)</code></td><td align="left"><strong>类型转换函数家族庞大</strong>。<code>accurateCast</code>更安全（范围检查），<code>cast</code>会尝试尽力转换。</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> 专精训练 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SQL </tag>
            
            <tag> PostgreSQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>大文档</title>
      <link href="/2025/09/24/%E5%A4%A7%E6%96%87%E6%A1%A3/"/>
      <url>/2025/09/24/%E5%A4%A7%E6%96%87%E6%A1%A3/</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="密码错误，请重新输入" data-whm="认证失败，再试一试">  <script id="hbeData" type="hbeData" data-hmacdigest="f9bd7992cc114b30194fc653647c95b566c7dba60a171033fce11285f84ea2d9"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-blink">      <input class="hbe hbe-input-field hbe-input-field-blink" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-blink" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-blink" data-content="请输入密码">请输入密码</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      
        <tags>
            
            <tag> password </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>怎么缴税</title>
      <link href="/2025/09/24/%E6%80%8E%E4%B9%88%E7%BC%B4%E7%A8%8E/"/>
      <url>/2025/09/24/%E6%80%8E%E4%B9%88%E7%BC%B4%E7%A8%8E/</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="密码错误，请重新输入" data-whm="认证失败，再试一试">  <script id="hbeData" type="hbeData" data-hmacdigest="d64e6a7a671e943061d36ce0926405e9a7d9f66fa46263aaec4a781131c3643c"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-blink">      <input class="hbe hbe-input-field hbe-input-field-blink" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-blink" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-blink" data-content="请输入密码">请输入密码</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      
        <tags>
            
            <tag> password </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SQL子查询</title>
      <link href="/2025/09/23/SQL%E5%AD%90%E6%9F%A5%E8%AF%A2/"/>
      <url>/2025/09/23/SQL%E5%AD%90%E6%9F%A5%E8%AF%A2/</url>
      
        <content type="html"><![CDATA[<h2 id="🍋子查询的使用"><a href="#🍋子查询的使用" class="headerlink" title="🍋子查询的使用"></a>🍋子查询的使用</h2><ul><li>企业常用的子查询示例？</li><li>有哪些必须用子查询的情况，有哪些常见的改join&#x2F;with提高性能的例子？</li><li>Hash Join、Semi Join、宽表、FilterProject、SemiJoin 、HashBuilder这些词什么意思</li></ul><p>下面把“<strong>必须用子查询</strong>”和“<strong>可以改 JOIN &#x2F; WITH 提速</strong>”这两种场景一次性拆开讲透。</p><p>每条都给出 <strong>Trino（Presto）语法示例</strong>，并注明 <strong>为什么必须&#x2F;可以改写</strong></p><h3 id="一、4-种“必须用子查询”的场景"><a href="#一、4-种“必须用子查询”的场景" class="headerlink" title="一、4 种“必须用子查询”的场景"></a>一、4 种“<strong>必须</strong>用子查询”的场景</h3><p>（改写 JOIN 会<strong>语义错误</strong>或<strong>更慢</strong>）</p><table><thead><tr><th align="left">场景</th><th align="left">必须用子查询的原因</th><th align="left">Trino 示例</th></tr></thead><tbody><tr><td align="left">1. 聚合后回查原表（“找高于部门平均”）</td><td align="left">聚合值与明细行<strong>逐行比较</strong>，JOIN 先聚合再回查&#x3D;自己和自己连，只能用相关子查询或窗口函数</td><td align="left">SELECT * FROM employee e WHERE <code>salary &gt;</code> (SELECT <code>AVG(salary)</code> FROM employee WHERE dept&#x3D;e.dept)</td></tr><tr><td align="left">2. EXISTS &#x2F; NOT EXISTS</td><td align="left">语义是“<strong>有无匹配</strong>”，JOIN 会<strong>放大行数</strong>；NOT IN 对 NULL 敏感</td><td align="left">SELECT * FROM customer c WHERE NOT <code>EXISTS</code> (<code>SELECT 1</code> FROM orders o WHERE o.customer_id&#x3D;c.id)</td></tr><tr><td align="left">3. 行号&#x2F; Top-N 子查询（每组取最新 1 条）</td><td align="left">需要<strong>先排序再过滤</strong>，JOIN 写不出“每组”限制</td><td align="left">SELECT * FROM (SELECT *, row_number() OVER (PARTITION BY user_id ORDER BY login_dt DESC) rn FROM login_log) t <code>WHERE rn=1</code></td></tr><tr><td align="left">4. 测量数据质量（重复主键、空值率）</td><td align="left">只关心<strong>统计结果</strong>，不需要展开明细；JOIN 会强行拉明细</td><td align="left">SELECT order_id, COUNT() FROM orders GROUP BY order_id <code>HAVING COUNT()&gt;1</code></td></tr></tbody></table><h3 id="二、6-个“常见可改写”例子"><a href="#二、6-个“常见可改写”例子" class="headerlink" title="二、6 个“常见可改写”例子"></a>二、6 个“<strong>常见可改写</strong>”例子</h3><p>（子查询 → JOIN &#x2F; WITH，<strong>性能 2-10 倍</strong>提升）</p><h4 id="1-相关子查询-→-JOIN"><a href="#1-相关子查询-→-JOIN" class="headerlink" title="1. 相关子查询 → JOIN"></a>1. 相关子查询 → JOIN</h4><p><strong>原写法（慢）</strong></p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> emp_id, emp_name,</span><br><span class="line">       (<span class="keyword">SELECT</span> dept_name <span class="keyword">FROM</span> department d <span class="keyword">WHERE</span> d.dept_id <span class="operator">=</span> e.dept_id) <span class="keyword">AS</span> dept_name</span><br><span class="line"><span class="keyword">FROM</span> employee e;</span><br></pre></td></tr></table></figure><p><strong>改写（快）</strong></p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> e.emp_id, e.emp_name, d.dept_name</span><br><span class="line"><span class="keyword">FROM</span> employee e</span><br><span class="line"><span class="keyword">JOIN</span> department d <span class="keyword">ON</span> d.dept_id <span class="operator">=</span> e.dept_id;</span><br></pre></td></tr></table></figure><p><strong>提速点</strong>：把 <strong>每行一次索引回表</strong> 改成 <strong>一次 Hash Join</strong>。</p><hr><h4 id="2-相关聚合子查询-→-WITH-JOIN"><a href="#2-相关聚合子查询-→-WITH-JOIN" class="headerlink" title="2. 相关聚合子查询 → WITH + JOIN"></a>2. 相关聚合子查询 → WITH + JOIN</h4><p><strong>原写法（O(N²)）</strong></p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> emp_id, salary,</span><br><span class="line">       salary <span class="operator">-</span> (<span class="keyword">SELECT</span> <span class="built_in">AVG</span>(salary) <span class="keyword">FROM</span> employee <span class="keyword">WHERE</span> dept_id <span class="operator">=</span> e.dept_id) <span class="keyword">AS</span> diff</span><br><span class="line"><span class="keyword">FROM</span> employee e;</span><br></pre></td></tr></table></figure><p><strong>改写（O(N)）</strong></p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">WITH</span> dept_avg <span class="keyword">AS</span> (</span><br><span class="line">    <span class="keyword">SELECT</span> dept_id, <span class="built_in">AVG</span>(salary) <span class="keyword">AS</span> avg_salary</span><br><span class="line">    <span class="keyword">FROM</span> employee</span><br><span class="line">    <span class="keyword">GROUP</span> <span class="keyword">BY</span> dept_id</span><br><span class="line">)</span><br><span class="line"><span class="keyword">SELECT</span> e.emp_id, e.salary, e.salary <span class="operator">-</span> d.avg_salary <span class="keyword">AS</span> diff</span><br><span class="line"><span class="keyword">FROM</span> employee e</span><br><span class="line"><span class="keyword">JOIN</span> dept_avg d <span class="keyword">ON</span> d.dept_id <span class="operator">=</span> e.dept_id;</span><br></pre></td></tr></table></figure><p><strong>提速点</strong>：聚合只算一次，复用结果。</p><hr><h4 id="3-IN-子查询-→-Semi-Join"><a href="#3-IN-子查询-→-Semi-Join" class="headerlink" title="3. IN (子查询) → Semi Join"></a>3. IN (子查询) → Semi Join</h4><p><strong>原写法</strong></p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> customer</span><br><span class="line"><span class="keyword">WHERE</span> customer_id <span class="keyword">IN</span> (<span class="keyword">SELECT</span> customer_id <span class="keyword">FROM</span> orders <span class="keyword">WHERE</span> order_amt <span class="operator">&gt;</span> <span class="number">10000</span>);</span><br></pre></td></tr></table></figure><p><strong>改写（Trino 自动做，也可显式写）</strong></p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> c.<span class="operator">*</span></span><br><span class="line"><span class="keyword">FROM</span> customer c</span><br><span class="line"><span class="keyword">WHERE</span> <span class="keyword">EXISTS</span> (<span class="keyword">SELECT</span> <span class="number">1</span> <span class="keyword">FROM</span> orders o <span class="keyword">WHERE</span> o.customer_id <span class="operator">=</span> c.customer_id <span class="keyword">AND</span> o.order_amt <span class="operator">&gt;</span> <span class="number">10000</span>);</span><br></pre></td></tr></table></figure><p><strong>提速点</strong>：Semi Join 可在 <strong>Hash Build 阶段</strong>直接过滤，<strong>不放大右表</strong>。</p><hr><h4 id="4-子查询当“临时宽表”-→-WITH-展开后多次复用"><a href="#4-子查询当“临时宽表”-→-WITH-展开后多次复用" class="headerlink" title="4. 子查询当“临时宽表” → WITH 展开后多次复用"></a>4. 子查询当“临时宽表” → WITH 展开后多次复用</h4><p><strong>场景</strong>：同一张中间结果要被<strong>选两次</strong></p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">WITH</span> high_val_customer <span class="keyword">AS</span> (</span><br><span class="line">    <span class="keyword">SELECT</span> customer_id, <span class="built_in">SUM</span>(order_amt) <span class="keyword">AS</span> total</span><br><span class="line">    <span class="keyword">FROM</span> orders</span><br><span class="line">    <span class="keyword">GROUP</span> <span class="keyword">BY</span> customer_id</span><br><span class="line">    <span class="keyword">HAVING</span> <span class="built_in">SUM</span>(order_amt) <span class="operator">&gt;</span> <span class="number">100000</span></span><br><span class="line">)</span><br><span class="line"><span class="keyword">SELECT</span> h.customer_id, h.total, a.address</span><br><span class="line"><span class="keyword">FROM</span> high_val_customer h</span><br><span class="line"><span class="keyword">JOIN</span> address a <span class="keyword">ON</span> a.customer_id <span class="operator">=</span> h.customer_id;</span><br></pre></td></tr></table></figure><p><strong>提速点</strong>：只扫描一次 <code>orders</code>，<strong>CTE 结果默认物化</strong>（Trino 358+ 支持 <strong>CTE Reuse</strong>）。</p><hr><h4 id="5-多层嵌套子查询-→-一步-JOIN"><a href="#5-多层嵌套子查询-→-一步-JOIN" class="headerlink" title="5. 多层嵌套子查询 → 一步 JOIN"></a>5. 多层嵌套子查询 → 一步 JOIN</h4><p><strong>原写法</strong></p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span></span><br><span class="line"><span class="keyword">FROM</span> sku s</span><br><span class="line"><span class="keyword">WHERE</span> category_id <span class="operator">=</span> (<span class="keyword">SELECT</span> category_id <span class="keyword">FROM</span> category <span class="keyword">WHERE</span> category_name <span class="operator">=</span> <span class="string">&#x27;手机&#x27;</span>)</span><br><span class="line">  <span class="keyword">AND</span> brand_id    <span class="operator">=</span> (<span class="keyword">SELECT</span> brand_id   <span class="keyword">FROM</span> brand    <span class="keyword">WHERE</span> brand_name    <span class="operator">=</span> <span class="string">&#x27;华为&#x27;</span>);</span><br></pre></td></tr></table></figure><p><strong>改写</strong></p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> s.<span class="operator">*</span></span><br><span class="line"><span class="keyword">FROM</span> sku s</span><br><span class="line"><span class="keyword">JOIN</span> category c <span class="keyword">ON</span> c.category_id <span class="operator">=</span> s.category_id <span class="keyword">AND</span> c.category_name <span class="operator">=</span> <span class="string">&#x27;手机&#x27;</span></span><br><span class="line"><span class="keyword">JOIN</span> brand    b <span class="keyword">ON</span> b.brand_id    <span class="operator">=</span> s.brand_id    <span class="keyword">AND</span> b.brand_name    <span class="operator">=</span> <span class="string">&#x27;华为&#x27;</span>;</span><br></pre></td></tr></table></figure><p><strong>提速点</strong>：两次相关子查询 → <strong>一次多表 Hash Join</strong>，且可以利用 <strong>复合索引</strong>。</p><hr><h4 id="6-子查询里再子查询-→-扁平化-JOIN-窗口函数"><a href="#6-子查询里再子查询-→-扁平化-JOIN-窗口函数" class="headerlink" title="6. 子查询里再子查询 → 扁平化 JOIN + 窗口函数"></a>6. 子查询里再子查询 → 扁平化 JOIN + 窗口函数</h4><p><strong>原写法</strong></p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span></span><br><span class="line"><span class="keyword">FROM</span> (</span><br><span class="line">    <span class="keyword">SELECT</span> <span class="operator">*</span>, (<span class="keyword">SELECT</span> <span class="built_in">COUNT</span>(<span class="operator">*</span>) <span class="keyword">FROM</span> orders o <span class="keyword">WHERE</span> o.customer_id <span class="operator">=</span> c.customer_id) <span class="keyword">AS</span> cnt</span><br><span class="line">    <span class="keyword">FROM</span> customer c</span><br><span class="line">) t</span><br><span class="line"><span class="keyword">WHERE</span> cnt <span class="operator">&gt;=</span> <span class="number">5</span>;</span><br></pre></td></tr></table></figure><p><strong>改写</strong></p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> c.<span class="operator">*</span>, t.cnt</span><br><span class="line"><span class="keyword">FROM</span> customer c</span><br><span class="line"><span class="keyword">JOIN</span> (<span class="keyword">SELECT</span> customer_id, <span class="built_in">COUNT</span>(<span class="operator">*</span>) <span class="keyword">AS</span> cnt <span class="keyword">FROM</span> orders <span class="keyword">GROUP</span> <span class="keyword">BY</span> customer_id) t</span><br><span class="line">  <span class="keyword">ON</span> t.customer_id <span class="operator">=</span> c.customer_id</span><br><span class="line"><span class="keyword">WHERE</span> t.cnt <span class="operator">&gt;=</span> <span class="number">5</span>;</span><br></pre></td></tr></table></figure><p><strong>提速点</strong>：把 <strong>相关子查询</strong> 变成 <strong>非相关聚合</strong>，再 <strong>Hash Join</strong>。</p><h3 id="三、1-张决策表，10-秒判断“能不能改”"><a href="#三、1-张决策表，10-秒判断“能不能改”" class="headerlink" title="三、1 张决策表，10 秒判断“能不能改”"></a>三、1 张决策表，10 秒判断“能不能改”</h3><table><thead><tr><th align="left">检查项</th><th align="left">子查询必须保留</th><th align="left">可改写 JOIN&#x2F;WITH</th></tr></thead><tbody><tr><td align="left">是否 EXISTS &#x2F; NOT EXISTS</td><td align="left">✅</td><td align="left">❌</td></tr><tr><td align="left">是否“聚合后回查明细”</td><td align="left">✅（或改窗口）</td><td align="left">❌</td></tr><tr><td align="left">是否“每组 Top-N”</td><td align="left">✅（需窗口）</td><td align="left">❌</td></tr><tr><td align="left">是否只拿聚合指标</td><td align="left">❌</td><td align="left">✅（先 WITH 聚合）</td></tr><tr><td align="left">是否相关子查询且<strong>无聚合</strong></td><td align="left">❌</td><td align="left">✅（直接 JOIN）</td></tr><tr><td align="left">是否 IN (子查询)</td><td align="left">❌</td><td align="left">✅（Semi Join）</td></tr></tbody></table><h3 id="四、小结口诀"><a href="#四、小结口诀" class="headerlink" title="四、小结口诀"></a>四、小结口诀</h3><blockquote><p><strong>“聚合回查、存在性、Top-N 必须子查；其余一律拉出来做 JOIN&#x2F;WITH。”</strong></p></blockquote><p>拿不准执行计划时，<strong>EXPLAIN (TYPE DISTRIBUTED)</strong> 看有没有 <strong>FilterProject+SemiJoin</strong> 或 <strong>HashBuilder</strong> 即可。</p><h3 id="高频黑话"><a href="#高频黑话" class="headerlink" title="高频黑话"></a>高频黑话</h3><ol><li>Hash Join（哈希连接）</li></ol><ul><li><p><strong>定义</strong>：把两表里<strong>连接键</strong>先算成哈希表，再一次性“对号入座”做等值匹配。</p></li><li><p><strong>类比</strong>：老师拿两张名单，先给 A 班每人发一个“学号-座位号”小纸条（建哈希表），再让 B 班学生按纸条找座位，<strong>O(1) 定位</strong>。</p></li><li><p><strong>Trino 计划里</strong>：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">└─ InnerJoin[hash = (user_id)]  </span><br><span class="line">   ├─ Scan[user_id, …]  ←  Build 端（通常选小表）  </span><br><span class="line">   └─ Scan[user_id, …]  ←  Probe 端</span><br></pre></td></tr></table></figure></li></ul><ol start="2"><li>Semi Join（半连接）</li></ol><ul><li><p><strong>定义</strong>：只关心<strong>左表记录是否在右表存在匹配</strong>，<strong>不返回右表列</strong>，也<strong>不去重左表</strong>。</p></li><li><p><strong>类比</strong>：安检门只看你是否在“黑名单”里，<strong>查到就拦下</strong>，不会把黑名单详细信息打印出来。</p></li><li><p><strong>Trino 自动把</strong> <code>EXISTS / IN (子查询)</code> <strong>改写成</strong> <code>SemiJoin</code>：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">└─ SemiJoin[hash = (user_id)]  </span><br><span class="line">   ├─ Scan…  ← 左表（旅客）  </span><br><span class="line">   └─ Scan…  ← 右表（黑名单）</span><br></pre></td></tr></table></figure></li></ul><ol start="3"><li>HashBuilder（哈希建造者）</li></ol><ul><li><strong>定义</strong>：Trino 执行计划里的一个<strong>运行时算子</strong>，负责把 Build 端数据<strong>全部读进内存</strong>并建成哈希表。</li><li><strong>类比</strong>：安检人员先把黑名单<strong>一次性录入扫描枪</strong>（HashBuilder），后面每过来一个旅客就<strong>扫一下枪</strong>（Probe）。</li><li><strong>计划关键字</strong>：<code>HashBuilder[hash = (key)]</code> 常出现在 <code>SemiJoin</code> 或 <code>HashJoin</code> 的<strong>右分支</strong>。</li></ul><ol start="4"><li>FilterProject（过滤+投影）</li></ol><ul><li><p><strong>定义</strong>：Trino 里最轻量的算子，<strong>先过滤行</strong>（Filter）<strong>再裁剪列</strong>（Project），无 I&#x2F;O 开销。</p></li><li><p><strong>类比</strong>：超市收银台：先把你购物车里的<strong>过期商品扔掉</strong>（Filter），再把<strong>不需要的小票副联撕掉</strong>（Project）。</p></li><li><p><strong>计划示例</strong>：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">└─ FilterProject[predicate = (status = &#x27;PAID&#x27;)]  </span><br><span class="line">   └─ Scan…</span><br></pre></td></tr></table></figure></li></ul><ol start="5"><li>宽表（Wide Table）</li></ol><ul><li><strong>定义</strong>：把<strong>多张维度表字段冗余到一张事实表</strong>里，减少 Join，牺牲存储换查询速度。</li><li><strong>类比</strong>：原本要点 5 份外卖（5 张表 Join），现在直接买一份“全家桶”（宽表），<strong>一口吃到所有菜</strong>。</li><li><strong>在 Trino 里</strong>：宽表通常以 <strong>Hive&#x2F;Iceberg Parquet&#x2F;ORC</strong> 形式存在，<strong>列式存储 + 分区</strong>，配合 <strong>列裁剪</strong> 扫描极快。</li></ul><ol start="6"><li>总结</li></ol><table><thead><tr><th>术语</th><th>口诀</th></tr></thead><tbody><tr><td>Hash Join</td><td>小表先变哈希，大表逐行探。</td></tr><tr><td>Semi Join</td><td>只问“有没有”，不拿右表数据。</td></tr><tr><td>HashBuilder</td><td>造哈希表的阶段，看右支。</td></tr><tr><td>FilterProject</td><td>先过滤行，再裁剪列。</td></tr><tr><td>宽表</td><td>把字段先拼好，省掉 Join。</td></tr></tbody></table><h2 id="🍋子查询其他"><a href="#🍋子查询其他" class="headerlink" title="🍋子查询其他"></a>🍋子查询其他</h2><h4 id="LATERAL横向子查询"><a href="#LATERAL横向子查询" class="headerlink" title="LATERAL横向子查询"></a>LATERAL横向子查询</h4><ul><li>横向子查询是什么</li><li>这效率很不高吧</li><li>那我为什么不用普通 JOIN</li><li>ON true什么意思</li></ul><p>“横向子查询”是 LATERAL子查询 的直译，也有人叫 横向派生表、横向连接。 它的核心作用只有一句话：</p><blockquote><p>让右侧的子查询能够引用左侧已经列出的表&#x2F;别名，实现“逐行计算”。</p></blockquote><ol><li>出现位置 只能出现在 <code>FROM</code> 或 <code>JOIN</code> 子句里，且前面必须带关键字 <code>LATERAL</code>（PostgreSQL、SQL Server、Oracle、MySQL 8.0+ 都支持）。</li><li>与普通子查询的区别</li></ol><table><thead><tr><th>普通派生表</th><th>LATERAL 子查询</th></tr></thead><tbody><tr><td>先整体算出结果，再拿给外层用</td><td>对外层每一行都重新计算一次</td></tr><tr><td>内部看不到外层的任何列</td><td>内部可以直接引用外层“左边”已经出现的列</td></tr></tbody></table><ul><li>一眼看懂例子 <ul><li>需求：对每笔订单，找出“该客户”历史订单里金额最高的那一条。</li><li>orders订单表</li></ul></li></ul><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> o.<span class="operator">*</span>, top.<span class="operator">*</span><span class="keyword">FROM</span> orders <span class="keyword">AS</span> o</span><br><span class="line"><span class="keyword">LEFT</span> <span class="keyword">JOIN</span> <span class="keyword">LATERAL</span> (<span class="keyword">SELECT</span> <span class="operator">*</span><span class="keyword">FROM</span> orders o2</span><br><span class="line">    <span class="keyword">WHERE</span> o2.customer_id <span class="operator">=</span> o.customer_id      <span class="comment">-- 直接用到外层 o 的列</span></span><br><span class="line">    <span class="keyword">ORDER</span> <span class="keyword">BY</span> o2.amount <span class="keyword">DESC</span></span><br><span class="line">    LIMIT <span class="number">1</span></span><br><span class="line">) <span class="keyword">AS</span> top <span class="keyword">ON</span> <span class="literal">true</span>;</span><br></pre></td></tr></table></figure><p>典型场景速记</p><ol><li>每组&#x2F;每行求 Top-N、累积、相邻行、行列转换</li><li>把“相关子查询”改写成 JOIN 形式，方便利用索引、避免重复扫描</li><li>需要“行级函数”效果，又不想写存储过程</li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> SQL </tag>
            
            <tag> Trino </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SQL窗口函数速查表</title>
      <link href="/2025/09/23/SQL%E7%AA%97%E5%8F%A3%E5%87%BD%E6%95%B0%E9%80%9F%E6%9F%A5%E8%A1%A8/"/>
      <url>/2025/09/23/SQL%E7%AA%97%E5%8F%A3%E5%87%BD%E6%95%B0%E9%80%9F%E6%9F%A5%E8%A1%A8/</url>
      
        <content type="html"><![CDATA[<h3 id="一、排名与分布分析类（核心用：给数据-“排位置、看占比”）"><a href="#一、排名与分布分析类（核心用：给数据-“排位置、看占比”）" class="headerlink" title="一、排名与分布分析类（核心用：给数据 “排位置、看占比”）"></a>一、排名与分布分析类（核心用：给数据 “排位置、看占比”）</h3><p>专门用于确定数据在整体 &#x2F; 分区中的相对位置、排名顺序或分布比例，是最常用的窗口函数类型。</p><ol><li><strong>ROW_NUMBER()</strong>：给分区内每行贴唯一连续序号，同值也不重复（如 “给每天的订单按时间排 1、2、3 号”）。</li><li><strong>RANK()</strong>：按排序值排名，同值同名次，后续名次跳号（如 “成绩并列第 1，下一名直接第 3”）。</li><li><strong>DENSE_RANK()</strong>：按排序值排名，同值同名次，后续名次不跳号（如 “成绩并列第 1，下一名仍第 2”）。</li><li><strong>PERCENT_RANK()</strong>：返回相对百分位排名（公式：(名次 - 1)&#x2F;(总行数 - 1)），范围 0~1，体现 “比多少数据好 &#x2F; 差”。</li><li><strong>CUME_DIST()</strong>：返回 “≤当前值的行数 &#x2F; 总行数”，范围 0~1，体现 “当前值及以下数据的占比”。</li><li><strong>NTILE(n)</strong>：将分区数据均匀分成 n 个 “桶”，返回每行所属桶号（如 “把员工绩效分成 3 组，标 1&#x2F;2&#x2F;3 桶”）。</li></ol><h3 id="二、相邻数据取值类（核心用：“跨行取数”，比当前行前-后-特定位置的值）"><a href="#二、相邻数据取值类（核心用：“跨行取数”，比当前行前-后-特定位置的值）" class="headerlink" title="二、相邻数据取值类（核心用：“跨行取数”，比当前行前 &#x2F; 后 &#x2F; 特定位置的值）"></a>二、相邻数据取值类（核心用：“跨行取数”，比当前行前 &#x2F; 后 &#x2F; 特定位置的值）</h3><p>专门用于获取分区内 “非当前行” 的数据，无需手动关联表，直接跨行提取目标位置的值。</p><ol><li><strong>LAG(expr [,offset [,default]])</strong>：取当前行 “往上数 offset 行” 的 expr 值，无对应行返回 default（如 “取前 1 天的销售额，无则返回 0”）。</li><li><strong>LEAD(expr [,offset [,default]])</strong>：取当前行 “往下数 offset 行” 的 expr 值，无对应行返回 default（如 “取后 1 天的销售额，无则返回 0”）。</li><li><strong>FIRST_VALUE(expr)</strong>：取分区内按排序规则的 “第一行” expr 值（如 “取店铺本月第一天的销售额”）。</li><li><strong>LAST_VALUE(expr)</strong>：取分区内 “到当前行为止” 的最后一行 expr 值（需注意窗口框架，默认到当前行，非全分区）。</li><li><strong>NTH_VALUE(expr, n)</strong>：取分区内排序后的 “第 n 行” expr 值，无第 n 行则返回 NULL（如 “取店铺本月第 2 天的销售额”）。</li></ol><h3 id="三、窗口聚合计算类（核心用：“累计-整体统计”，在分区内做聚合，不压缩行数）"><a href="#三、窗口聚合计算类（核心用：“累计-整体统计”，在分区内做聚合，不压缩行数）" class="headerlink" title="三、窗口聚合计算类（核心用：“累计 &#x2F; 整体统计”，在分区内做聚合，不压缩行数）"></a>三、窗口聚合计算类（核心用：“累计 &#x2F; 整体统计”，在分区内做聚合，不压缩行数）</h3><p>将普通聚合函数（SUM&#x2F;AVG 等）改造为窗口模式，不合并行，每行都能显示聚合结果（累计或全分区）。</p><h4 id="1-基础累计-局部聚合（支持按顺序累计，默认-“从第一行到当前行”）"><a href="#1-基础累计-局部聚合（支持按顺序累计，默认-“从第一行到当前行”）" class="headerlink" title="1. 基础累计 &#x2F; 局部聚合（支持按顺序累计，默认 “从第一行到当前行”）"></a>1. 基础累计 &#x2F; 局部聚合（支持按顺序累计，默认 “从第一行到当前行”）</h4><ul><li><strong>SUM(expr)</strong>：计算分区内到当前行的 expr 累计和（如 “按日期累计店铺销售额”）。</li><li><strong>AVG(expr)</strong>：计算分区内到当前行的 expr 累计平均值（如 “按日期累计店铺日均销售额”）。</li><li><strong>COUNT(expr)</strong>：统计分区内到当前行的非 NULL 行数（如 “按日期累计店铺营业天数”）。</li><li><strong>MIN(expr)</strong>：取分区内到当前行的 expr 最小值（如 “按日期记录店铺截至当天的最低销售额”）。</li><li><strong>MAX(expr)</strong>：取分区内到当前行的 expr 最大值（如 “按日期记录店铺截至当天的最高销售额”）。</li></ul><h4 id="2-全分区统计（不累计，直接计算整个分区的统计量，每行结果相同）"><a href="#2-全分区统计（不累计，直接计算整个分区的统计量，每行结果相同）" class="headerlink" title="2. 全分区统计（不累计，直接计算整个分区的统计量，每行结果相同）"></a>2. 全分区统计（不累计，直接计算整个分区的统计量，每行结果相同）</h4><ul><li><strong>STDDEV_POP(expr)</strong>：计算分区内 expr 的 “总体标准差”（用全部数据计算，分母为总行数）。</li><li><strong>STDDEV_SAMP(expr)</strong>：计算分区内 expr 的 “样本标准差”（用样本数据计算，分母为总行数 - 1）。</li><li><strong>VAR_POP(expr)</strong>：计算分区内 expr 的 “总体方差”（总体标准差的平方）。</li><li><strong>VAR_SAMP(expr)</strong>：计算分区内 expr 的 “样本方差”（样本标准差的平方）。</li></ul><h3 id="四、多变量关联分析类（核心用：“分析两个变量的关系”，如相关性、回归）"><a href="#四、多变量关联分析类（核心用：“分析两个变量的关系”，如相关性、回归）" class="headerlink" title="四、多变量关联分析类（核心用：“分析两个变量的关系”，如相关性、回归）"></a>四、多变量关联分析类（核心用：“分析两个变量的关系”，如相关性、回归）</h3><p>专门用于分析分区内两个变量（如 “销售额” 与 “日期”、“广告投入” 与 “销量”）的关联程度或回归规律。</p><ol><li><p><strong>COVAR_POP(y, x)</strong>：计算 y 和 x 的 “总体协方差”，体现两变量的整体联动方向（正 &#x2F; 负相关趋势）。</p></li><li><p><strong>COVAR_SAMP(y, x)</strong>：计算 y 和 x 的 “样本协方差”，基于样本数据体现两变量的联动方向。</p></li><li><p><strong>CORR(y, x)</strong>：计算 y 和 x 的 “皮尔逊相关系数”，范围 - 1~1，直接体现关联强度（1 &#x3D; 完全正相关，-1 &#x3D; 完全负相关）。</p></li><li><p>REGR_* 系列</p><p>：一次线性回归专用函数，如：</p><ul><li><strong>REGR_SLOPE(y, x)</strong>：计算 y 对 x 的回归斜率（如 “销售额随日期变化的每日增长幅度”）。</li><li><strong>REGR_INTERCEPT(y, x)</strong>：计算回归截距（如 “回归公式的初始值”）。</li><li><strong>REGR_R2(y, x)</strong>：计算决定系数 R²，体现回归模型的拟合优度（越接近 1 拟合越好）。</li><li><strong>REGR_COUNT(y, x)</strong>：统计 y 和 x 均非空的行数（回归分析的有效数据量）</li></ul></li></ol><h3 id="五、窗口函数常见错误与避坑指南"><a href="#五、窗口函数常见错误与避坑指南" class="headerlink" title="五、窗口函数常见错误与避坑指南"></a>五、窗口函数常见错误与避坑指南</h3><p>窗口函数功能强大但细节复杂，实际使用中容易因理解框架范围、分区逻辑或排序规则导致结果不符合预期。以下是最常见的错误类型及解决方案：</p><h4 id="1-LAST-VALUE-结果不符合预期（最容易踩的坑）"><a href="#1-LAST-VALUE-结果不符合预期（最容易踩的坑）" class="headerlink" title="1.LAST_VALUE() 结果不符合预期（最容易踩的坑）"></a>1.<code>LAST_VALUE()</code> 结果不符合预期（最容易踩的坑）</h4><p><strong>错误表现：</strong></p><p>使用 <code>LAST_VALUE()</code> 时，返回的不是分区内最后一行的值，而是当前行或靠前位置的值。</p><p><strong>错误原因：</strong></p><p>窗口函数默认框架是 <code>RANGE BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW</code>（从第一行到当前行），而非全分区。例如：</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 错误示例：想取全分区最后一行，却返回当前行及之前的最后一行</span></span><br><span class="line"><span class="keyword">SELECT</span> </span><br><span class="line">  shop, <span class="type">date</span>, sales,</span><br><span class="line">  <span class="built_in">LAST_VALUE</span>(sales) <span class="keyword">OVER</span> (<span class="keyword">PARTITION</span> <span class="keyword">BY</span> shop <span class="keyword">ORDER</span> <span class="keyword">BY</span> <span class="type">date</span>) <span class="keyword">AS</span> last_sales</span><br><span class="line"><span class="keyword">FROM</span> t;</span><br></pre></td></tr></table></figure><p><strong>解决方案：</strong></p><p>显式指定全分区框架 <code>ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING</code>：</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> </span><br><span class="line">  shop, <span class="type">date</span>, sales,</span><br><span class="line">  <span class="built_in">LAST_VALUE</span>(sales) <span class="keyword">OVER</span> (</span><br><span class="line">    <span class="keyword">PARTITION</span> <span class="keyword">BY</span> shop </span><br><span class="line">    <span class="keyword">ORDER</span> <span class="keyword">BY</span> <span class="type">date</span></span><br><span class="line">    <span class="keyword">ROWS</span> <span class="keyword">BETWEEN</span> UNBOUNDED PRECEDING <span class="keyword">AND</span> UNBOUNDED FOLLOWING</span><br><span class="line">  ) <span class="keyword">AS</span> last_sales  <span class="comment">-- 正确返回分区内最后一行</span></span><br><span class="line"><span class="keyword">FROM</span> t;</span><br></pre></td></tr></table></figure><h2 id="二、遗漏-PARTITION-BY-导致全局计算"><a href="#二、遗漏-PARTITION-BY-导致全局计算" class="headerlink" title="二、遗漏 PARTITION BY 导致全局计算"></a>二、遗漏 <code>PARTITION BY</code> 导致全局计算</h2><h3 id="错误表现："><a href="#错误表现：" class="headerlink" title="错误表现："></a>错误表现：</h3><p>希望按分组（如店铺）单独计算窗口函数，结果却变成了所有数据的全局计算。</p><h3 id="错误原因："><a href="#错误原因：" class="headerlink" title="错误原因："></a>错误原因：</h3><p>忘记添加 <code>PARTITION BY</code>，函数默认对全表数据进行计算。例如：</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 错误示例：想按店铺计算累计销售额，却计算了所有店铺的总和</span></span><br><span class="line"><span class="keyword">SELECT</span> </span><br><span class="line">  shop, <span class="type">date</span>, sales,</span><br><span class="line">  <span class="built_in">SUM</span>(sales) <span class="keyword">OVER</span> (<span class="keyword">ORDER</span> <span class="keyword">BY</span> <span class="type">date</span>) <span class="keyword">AS</span> running_sum  <span class="comment">-- 缺少 PARTITION BY shop</span></span><br><span class="line"><span class="keyword">FROM</span> t;</span><br></pre></td></tr></table></figure><h3 id="解决方案："><a href="#解决方案：" class="headerlink" title="解决方案："></a>解决方案：</h3><p>明确添加 <code>PARTITION BY</code> 定义分组：</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> </span><br><span class="line">  shop, <span class="type">date</span>, sales,</span><br><span class="line">  <span class="built_in">SUM</span>(sales) <span class="keyword">OVER</span> (<span class="keyword">PARTITION</span> <span class="keyword">BY</span> shop <span class="keyword">ORDER</span> <span class="keyword">BY</span> <span class="type">date</span>) <span class="keyword">AS</span> running_sum  <span class="comment">-- 正确按店铺分组</span></span><br><span class="line"><span class="keyword">FROM</span> t;</span><br></pre></td></tr></table></figure><h2 id="三、ORDER-BY-排序方向错误影响结果"><a href="#三、ORDER-BY-排序方向错误影响结果" class="headerlink" title="三、ORDER BY 排序方向错误影响结果"></a>三、<code>ORDER BY</code> 排序方向错误影响结果</h2><h3 id="错误表现：-1"><a href="#错误表现：-1" class="headerlink" title="错误表现："></a>错误表现：</h3><p><code>PERCENT_RANK()</code>&#x2F;<code>CUME_DIST()</code> 等排名函数的值与预期相反（如最大值的百分比反而大）。</p><h3 id="错误原因：-1"><a href="#错误原因：-1" class="headerlink" title="错误原因："></a>错误原因：</h3><p>排序方向与分析目标不符。例如：</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 错误示例：想让销售额越高，PERCENT_RANK() 越小，却用了升序</span></span><br><span class="line"><span class="keyword">SELECT</span> </span><br><span class="line">  shop, sales,</span><br><span class="line">  <span class="built_in">PERCENT_RANK</span>() <span class="keyword">OVER</span> (<span class="keyword">ORDER</span> <span class="keyword">BY</span> sales <span class="keyword">ASC</span>) <span class="keyword">AS</span> pct_rnk  <span class="comment">-- 升序导致最大值的百分比为1</span></span><br><span class="line"><span class="keyword">FROM</span> t;</span><br></pre></td></tr></table></figure><h3 id="解决方案：-1"><a href="#解决方案：-1" class="headerlink" title="解决方案："></a>解决方案：</h3><p>根据业务目标选择排序方向（通常分析 “头部数据” 用 <code>DESC</code>）：</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> </span><br><span class="line">  shop, sales,</span><br><span class="line">  <span class="built_in">PERCENT_RANK</span>() <span class="keyword">OVER</span> (<span class="keyword">ORDER</span> <span class="keyword">BY</span> sales <span class="keyword">DESC</span>) <span class="keyword">AS</span> pct_rnk  <span class="comment">-- 降序让最大值的百分比为0</span></span><br><span class="line"><span class="keyword">FROM</span> t;</span><br></pre></td></tr></table></figure><h2 id="四、RANK-与-DENSE-RANK-混淆导致排名错误"><a href="#四、RANK-与-DENSE-RANK-混淆导致排名错误" class="headerlink" title="四、RANK() 与 DENSE_RANK() 混淆导致排名错误"></a>四、<code>RANK()</code> 与 <code>DENSE_RANK()</code> 混淆导致排名错误</h2><h3 id="错误表现：-2"><a href="#错误表现：-2" class="headerlink" title="错误表现："></a>错误表现：</h3><p>需要连续排名时用了 <code>RANK()</code>（出现跳号），或需要保留名次空位时用了 <code>DENSE_RANK()</code>（连续编号）。</p><h3 id="错误示例："><a href="#错误示例：" class="headerlink" title="错误示例："></a>错误示例：</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 若想统计“第2名”包含并列情况但不跳号，却用了 RANK()</span></span><br><span class="line"><span class="keyword">SELECT</span> </span><br><span class="line">  sales,</span><br><span class="line">  <span class="built_in">RANK</span>() <span class="keyword">OVER</span> (<span class="keyword">ORDER</span> <span class="keyword">BY</span> sales <span class="keyword">DESC</span>) <span class="keyword">AS</span> rnk  <span class="comment">-- 若前2名并列，下一名会是3（跳号）</span></span><br><span class="line"><span class="keyword">FROM</span> t;</span><br></pre></td></tr></table></figure><h3 id="解决方案：-2"><a href="#解决方案：-2" class="headerlink" title="解决方案："></a>解决方案：</h3><ul><li>需跳号（如比赛排名，允许第 1 名并列后直接第 3 名）→ 用 <code>RANK()</code></li><li>需连续（如筛选前 3 名，包含并列且不跳号）→ 用 <code>DENSE_RANK()</code></li></ul><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> </span><br><span class="line">  sales,</span><br><span class="line">  <span class="built_in">DENSE_RANK</span>() <span class="keyword">OVER</span> (<span class="keyword">ORDER</span> <span class="keyword">BY</span> sales <span class="keyword">DESC</span>) <span class="keyword">AS</span> dense_rnk  <span class="comment">-- 并列第1后，下一名是2（不跳号）</span></span><br><span class="line"><span class="keyword">FROM</span> t;</span><br></pre></td></tr></table></figure><h2 id="五、窗口聚合函数的-“累计”-与-“全量”-混淆"><a href="#五、窗口聚合函数的-“累计”-与-“全量”-混淆" class="headerlink" title="五、窗口聚合函数的 “累计” 与 “全量” 混淆"></a>五、窗口聚合函数的 “累计” 与 “全量” 混淆</h2><h3 id="错误表现：-3"><a href="#错误表现：-3" class="headerlink" title="错误表现："></a>错误表现：</h3><p>使用 <code>SUM()</code>&#x2F;<code>AVG()</code> 时，希望得到全分区的总量，却返回了累计值。</p><h3 id="错误原因：-2"><a href="#错误原因：-2" class="headerlink" title="错误原因："></a>错误原因：</h3><p><code>ORDER BY</code> 会触发 “累计计算”（从第一行到当前行），省略 <code>ORDER BY</code> 则返回全分区聚合结果。例如：</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 错误示例：想获取店铺总销售额，却因加了 ORDER BY 变成累计值</span></span><br><span class="line"><span class="keyword">SELECT</span> </span><br><span class="line">  shop, <span class="type">date</span>, sales,</span><br><span class="line">  <span class="built_in">SUM</span>(sales) <span class="keyword">OVER</span> (<span class="keyword">PARTITION</span> <span class="keyword">BY</span> shop <span class="keyword">ORDER</span> <span class="keyword">BY</span> <span class="type">date</span>) <span class="keyword">AS</span> total_sales  <span class="comment">-- 累计值，非总量</span></span><br><span class="line"><span class="keyword">FROM</span> t;</span><br></pre></td></tr></table></figure><h3 id="解决方案：-3"><a href="#解决方案：-3" class="headerlink" title="解决方案："></a>解决方案：</h3><ul><li>需累计值 → 保留 <code>ORDER BY</code>（默认从第一行到当前行）</li><li>需全分区总量 → 省略 <code>ORDER BY</code></li></ul><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> </span><br><span class="line">  shop, <span class="type">date</span>, sales,</span><br><span class="line">  <span class="built_in">SUM</span>(sales) <span class="keyword">OVER</span> (<span class="keyword">PARTITION</span> <span class="keyword">BY</span> shop) <span class="keyword">AS</span> total_sales  <span class="comment">-- 正确返回店铺总销售额</span></span><br><span class="line"><span class="keyword">FROM</span> t;</span><br></pre></td></tr></table></figure><h2 id="六、LAG-LEAD-越界处理缺失"><a href="#六、LAG-LEAD-越界处理缺失" class="headerlink" title="六、LAG()&#x2F;LEAD() 越界处理缺失"></a>六、<code>LAG()</code>&#x2F;<code>LEAD()</code> 越界处理缺失</h2><h3 id="错误表现：-4"><a href="#错误表现：-4" class="headerlink" title="错误表现："></a>错误表现：</h3><p>第一行用 <code>LAG()</code> 或最后一行用 <code>LEAD()</code> 时，返回 <code>NULL</code> 导致后续计算错误。</p><h3 id="错误原因：-3"><a href="#错误原因：-3" class="headerlink" title="错误原因："></a>错误原因：</h3><p>未指定越界时的默认值，函数默认返回 <code>NULL</code>。例如：</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 错误示例：第一行的 LAG() 返回 NULL，可能导致计算失败</span></span><br><span class="line"><span class="keyword">SELECT</span> </span><br><span class="line">  shop, <span class="type">date</span>, sales,</span><br><span class="line">  sales <span class="operator">-</span> <span class="built_in">LAG</span>(sales) <span class="keyword">OVER</span> (<span class="keyword">PARTITION</span> <span class="keyword">BY</span> shop <span class="keyword">ORDER</span> <span class="keyword">BY</span> <span class="type">date</span>) <span class="keyword">AS</span> diff  <span class="comment">-- 第一行 diff 为 NULL</span></span><br><span class="line"><span class="keyword">FROM</span> t;</span><br></pre></td></tr></table></figure><h3 id="解决方案：-4"><a href="#解决方案：-4" class="headerlink" title="解决方案："></a>解决方案：</h3><p>显式指定 <code>default</code> 参数（如 0 或其他合理值）：</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> </span><br><span class="line">  shop, <span class="type">date</span>, sales,</span><br><span class="line">  sales <span class="operator">-</span> <span class="built_in">LAG</span>(sales, <span class="number">1</span>, <span class="number">0</span>) <span class="keyword">OVER</span> (<span class="keyword">PARTITION</span> <span class="keyword">BY</span> shop <span class="keyword">ORDER</span> <span class="keyword">BY</span> <span class="type">date</span>) <span class="keyword">AS</span> diff  <span class="comment">-- 越界返回0</span></span><br><span class="line"><span class="keyword">FROM</span> t;</span><br></pre></td></tr></table></figure><h2 id="七、NTILE-n-数据分配不均时的误解"><a href="#七、NTILE-n-数据分配不均时的误解" class="headerlink" title="七、NTILE(n) 数据分配不均时的误解"></a>七、<code>NTILE(n)</code> 数据分配不均时的误解</h2><h3 id="错误表现：-5"><a href="#错误表现：-5" class="headerlink" title="错误表现："></a>错误表现：</h3><p>期望 <code>NTILE(n)</code> 严格均分数据，实际某些桶的行数多 1（如 7 行数据分 3 桶，结果为 3、2、2）。</p><h3 id="错误原因：-4"><a href="#错误原因：-4" class="headerlink" title="错误原因："></a>错误原因：</h3><p><code>NTILE(n)</code> 会优先向前几个桶分配多余的行（总行数不能被 n 整除时），保证分配尽可能均匀而非绝对均分。</p><h3 id="解决方案：-5"><a href="#解决方案：-5" class="headerlink" title="解决方案："></a>解决方案：</h3><ul><li>接受合理偏差（函数设计如此）</li><li>若需严格均分，可先过滤数据使总行数为 n 的倍数，或自定义逻辑：</li></ul><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 替代方案：用 ROW_NUMBER() 手动分配，确保前m个桶多1行</span></span><br><span class="line"><span class="keyword">SELECT</span> </span><br><span class="line">  <span class="operator">*</span>,</span><br><span class="line">  (<span class="built_in">ROW_NUMBER</span>() <span class="keyword">OVER</span> (<span class="keyword">ORDER</span> <span class="keyword">BY</span> sales) <span class="operator">-</span> <span class="number">1</span>) <span class="operator">%</span> <span class="number">3</span> <span class="operator">+</span> <span class="number">1</span> <span class="keyword">AS</span> custom_ntile</span><br><span class="line"><span class="keyword">FROM</span> t;</span><br></pre></td></tr></table></figure><h2 id="避坑总结：3-个核心检查点"><a href="#避坑总结：3-个核心检查点" class="headerlink" title="避坑总结：3 个核心检查点"></a>避坑总结：3 个核心检查点</h2><ol><li><strong>框架范围</strong>：<code>LAST_VALUE()</code> 必须显式指定全分区框架，其他函数注意默认框架是否符合需求。</li><li><strong>分区与排序</strong>：是否遗漏 <code>PARTITION BY</code>（导致全局计算），<code>ORDER BY</code> 方向是否与业务目标一致。</li><li><strong>边界处理</strong>：<code>LAG()</code>&#x2F;<code>LEAD()</code> 显式指定默认值，<code>RANK()</code> 与 <code>DENSE_RANK()</code> 根据排名规则选择。</li></ol>]]></content>
      
      
      <categories>
          
          <category> 技术速查 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Markdown常用</title>
      <link href="/2025/04/12/Markdown%E5%B8%B8%E7%94%A8/"/>
      <url>/2025/04/12/Markdown%E5%B8%B8%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<p>Markdown中使用表格</p><p>Markdown中使用表格</p><p>博客文章 Front-matter的Markdown使用</p><p>如果有文章（例如：转载文章）不需要显示版权，可以在文章 Front-matter 单独设置</p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">copyright:</span> <span class="literal">false</span></span><br></pre></td></tr></table></figure><p>从Butterfly3.0.0开始，支持对单独文章设置版权信息，可以在文章 Front-matter 单独设置</p><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">copyright<span class="emphasis">_author: xxxx</span></span><br><span class="line"><span class="emphasis">copyright_</span>author<span class="emphasis">_href: https://xxxxxx.com</span></span><br><span class="line"><span class="emphasis">copyright_</span>url: https://xxxxxx.com</span><br><span class="line">copyright<span class="emphasis">_info: 此文章版权归 xxxxx 所有，如有转载，请注明来自原作者</span></span><br></pre></td></tr></table></figure><h2 id="Markdown中使用Mermaid画图"><a href="#Markdown中使用Mermaid画图" class="headerlink" title="Markdown中使用Mermaid画图"></a>Markdown中使用Mermaid画图</h2><p>可以绘制流程图、序列图、饼图、甘特图和类图等图形。</p><h3 id="Mermaid代码的语法"><a href="#Mermaid代码的语法" class="headerlink" title="Mermaid代码的语法"></a><strong>Mermaid代码的语法</strong></h3><p>Mermaid代码通常放在一个代码块中，代码块的语法如下：</p><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="code">```mermaid</span></span><br><span class="line"><span class="code">[Mermaid代码]</span></span><br><span class="line"><span class="code">```</span></span><br></pre></td></tr></table></figure><p>使用方法：在 Markdown 中，敲击三个后写下mermaid回车即可。</p><p>展示如下图：</p><p><img src="/./../Markdown%E5%B8%B8%E7%94%A8/image-20250904101750820.png" alt="展示图"></p><h3 id="流程图graph"><a href="#流程图graph" class="headerlink" title="流程图graph"></a>流程图graph</h3><p>流程图用于展示流程步骤和关系，支持多种布局方向。</p><p><strong>语法说明</strong>：</p><ul><li><code>graph [方向]</code>：定义图表方向（<code>LR</code> 左右，<code>TB</code> 上下，<code>RL</code> 右左，<code>BT</code> 下上）</li><li>节点表示：<code>id[文本]</code>（默认矩形）、<code>id(文本)</code>（圆角矩形）、<code>id&#123;文本&#125;</code>（菱形）、<code>id((文本))</code>（圆形）等</li><li>连接线：<code>--&gt;</code>（实线箭头）、<code>---</code>（实线无箭头）、<code>-.-&gt;</code>（虚线箭头）等，可添加标签（<code>--&gt;|标签|</code>）</li></ul><p><strong>示例</strong>：</p><pre><code class="highlight mermaid">graph TD    A[开始] --&gt; B&#123;是或否&#125;    B --&gt;|是| C[执行任务]    B --&gt;|否| D[结束]    C --&gt; D</code></pre><pre><code class="highlight mermaid">graph LR    产品[产品]    产品 --&gt;|m| 构成&#123;构成&#125;    构成 --&gt;|n| 零件[零件]    零件 --&gt;|n| 存储&#123;存储&#125;    零件 --&gt;|n| 消耗&#123;消耗&#125; --&gt;|m| 材料    存储 --&gt;|1| 仓库[仓库]        产品号((产品号)) --- 产品    产品名((产品名)) --- 产品    预算((预算)) --- 产品    零件数((零件数)) --- 构成    零件号((零件号)) --- 零件    零件名((零件名)) --- 零件    存储量((存储量)) --- 存储    仓库 --- 仓库号((仓库号))    仓库 --- 面积((面积))    仓库 --- 库管员((库管员))    消耗 --- 存储量    材料 --- 材料号((材料号))    材料 --- 材料名((材料名))    材料 --- 单位((单位))    材料 --- 单价((单价))</code></pre><h3 id="流程图进阶"><a href="#流程图进阶" class="headerlink" title="流程图进阶"></a>流程图进阶</h3><p><strong>参数说明：</strong></p><ul><li><code>fill</code>        背景色</li><li><code>stroke</code>      边框色</li><li><code>stroke-width</code> 边框粗细</li><li><code>color</code>       文字颜色</li><li><code>opacity</code>     透明度 0–1</li><li><code>rx/ry</code>       圆角半径</li></ul><p><strong>示例：</strong></p><pre><code class="highlight mermaid">graph TD    A[开始] --&gt; B&#123;是或否&#125;    B --&gt;|是| C[执行任务]    B --&gt;|否| D[结束]    C --&gt; D%% 直接给节点填色、描边、改字色style A fill:#d73027,stroke:#333,stroke-width:2px,color:#fffstyle B fill:#fc8d59,stroke:#333,stroke-width:2pxstyle C fill:#fee08b,stroke:#333,stroke-width:2pxstyle D fill:#91bfdb,stroke:#333,stroke-width:2px</code></pre><h3 id="序列图sequenceDiagram"><a href="#序列图sequenceDiagram" class="headerlink" title="序列图sequenceDiagram"></a>序列图sequenceDiagram</h3><p>展示对象之间的交互时序，常用于系统交互流程。</p><p><strong>语法说明</strong>：</p><ul><li><code>participant 参与者</code>：定义参与对象</li><li>消息传递：<code>A-&gt;B: 消息内容</code>（实线箭头）、<code>A--&gt;B: 消息内容</code>（虚线箭头，如返回）</li><li>激活状态：<code>activate A</code>（激活对象，显示生命线）、<code>deactivate A</code>（取消激活）</li></ul><p><strong>示例</strong>：</p><pre><code class="highlight mermaid">sequenceDiagram    participant A    participant B    A-&gt;&gt;B: 发送消息    B-&gt;&gt;A: 回复消息</code></pre><h3 id="饼图Pie"><a href="#饼图Pie" class="headerlink" title="饼图Pie"></a>饼图Pie</h3><p>展示数据占比关系。</p><p><strong>语法说明</strong>：</p><ul><li><code>pie</code> 开头</li><li><code>title 标题</code></li><li><code>标签: 数值</code> 定义各部分</li></ul><p><strong>示例</strong>：</p><pre><code class="highlight mermaid">pie    title 网站用户来源    &quot;直接访问&quot; : 30    &quot;搜索引擎&quot; : 50    &quot;外部链接&quot; : 15    &quot;其他&quot; : 5</code></pre><h3 id="甘特图gantt"><a href="#甘特图gantt" class="headerlink" title="甘特图gantt"></a>甘特图gantt</h3><p>用于项目进度规划，展示任务时间安排。</p><p><strong>语法说明</strong>：</p><ul><li><code>dateFormat</code>：日期格式（如 <code>YYYY-MM-DD</code>）</li><li><code>section 模块名</code>：分组任务</li><li>任务格式：<code>任务名 : 状态, 任务ID, 开始日期, 结束日期</code>（状态可选 <code>done</code>&#x2F;<code>active</code> 等）</li></ul><p><strong>示例</strong>：</p><pre><code class="highlight mermaid">gantt    dateFormat  YYYY-MM-DD    section 现有任务    已完成任务           :done,    des1, 2025-01-06,2025-01-08    进行中任务           :active,  des2, 2025-01-09, 3d    待办任务             :         des3, after des2, 5d    section 新增任务    新任务1              :         des4, after des3, 5d    新任务2              :         des5, after des4, 5d</code></pre><h3 id="思维导图mindmap"><a href="#思维导图mindmap" class="headerlink" title="思维导图mindmap"></a>思维导图mindmap</h3><p><strong>语法说明</strong>：</p><ul><li>根节点（中心主题）用 <code>root((内容))</code> 定义（<code>(( ))</code> 是固定格式，确保居中显示）</li><li>分支层级通过<strong>空格缩进</strong>区分（建议用 2-4 个空格，同一层级缩进一致）：<ul><li>无缩进：一级分支（直接从根节点延伸）</li><li>缩进 2-4 空格：二级分支（从一级分支延伸）</li><li>缩进更多：三级、四级分支（以此类推）</li><li>不支持 Tab 键，建议用 2-4 个空格统一缩进，否则会导致层级混乱</li><li>分支层级建议不超过 4 级</li></ul></li></ul><pre><code class="highlight mermaid">mindmap  root((技能check list))    硬性      编程技能: SQL、Python/R、Excel      统计学知识        假设检验: 参数检验、非参数检验、置信区间        数据分布、相关性、贝叶斯等        大数定律、中心极限定理等      建模知识        数据处理方法: 连续/离散数据、样本不平衡        聚类: K-means、DBSCAN等        回归        分类        时间序列分析: AMAR、ARIMA、prophet等        transformer、bert      因果推断        辛普森悖论        ATE、ATT、CATE、HTE        IV、DID、PSM、RDD、DRL、DML、Uplift Model、Casual forest等      数据解读&amp;本质提炼      报告撰写&amp;数据展示    业务      常见方法: 维度下钻分析、归因分析、路径分析、触点分析、用户画像分析; 其他（RFM、生命周期等）      业务分析问题        指标体系搭建        实验分析        问题归因        专项分析: 机会点、价值论证      业务理解    软性      商业sense      听信息      拆解信息      汇报信息      抗压能力      时间管理</code></pre><h3 id="思维导图实现2"><a href="#思维导图实现2" class="headerlink" title="思维导图实现2"></a>思维导图实现2</h3><p><code>graph LR</code>（左右布局）+ 分支分组</p><pre><code class="highlight mermaid">graph LR    %% 根节点（居中，作为核心）    Root[&quot;🎯 技能check list&quot;]        %% 左侧分支：硬性技能（向左展开，层级清晰）    Root --&gt; Hard[&quot;🔧 硬性技能&quot;]    Hard --&gt; Code[&quot;编程技能&quot;]    Code --&gt; code[SQL、Python/R、Excel]        Hard --&gt; Stat[&quot;统计学知识&quot;]    Stat --&gt;|1| Test[假设检验]    Test --&gt; Param[参数检验]    Test --&gt; NonParam[非参数检验]    Test --&gt; CI[置信区间]    Stat --&gt;|2| Dist[数据分布、相关性、贝叶斯等]    Stat --&gt;|3| Law[大数定律、中心极限定理等]        Hard --&gt; Model[&quot;建模知识&quot;]    Model --&gt;|1| Process[数据处理方法]    Process --&gt; Cont[连续/离散数据]    Process --&gt; Imb[样本不平衡]    Model --&gt; Cluster[聚类]    Model --&gt; Reg[回归]    Model --&gt; Class[分类]    Model --&gt; TS[时间序列分析]    Cluster --&gt; cluster[K-means、DBSCAN等]    TS --&gt; ARIMA[AMAR、ARIMA、Prophet等]    TS --&gt; Trans[Transformer、BERT]        Hard --&gt; Causal[&quot;因果推断&quot;]    Causal --&gt; Simp[辛普森悖论]    Causal --&gt; Metric[ATE、ATT、CATE、HTE]    Causal --&gt; Method[先掌握：IV、DID、PSM、RDD]    Method --&gt; method[DRL、DML、Uplift Model、Casual forest等]        Hard --&gt; Ana[数据解读&amp;提炼]    Hard --&gt; Rep[报告撰写&amp;展示]        %% 右侧分支1：业务技能（向右展开）    Root --&gt; Bus[&quot;💼 业务技能&quot;]    Bus --&gt; Meth[&quot;常见分析方法&quot;]    Meth --&gt; Drill[维度下钻分析]    Meth --&gt; Reason[归因分析]    Meth --&gt; Path[路径分析]    Meth --&gt; Touch[触点分析]    Meth --&gt; Portrait[用户画像分析]    Meth --&gt; MethOthers[还有一些别的：RFM、生命周期等]        Bus --&gt; Prob[&quot;业务分析问题&quot;]    Prob --&gt; Ind[指标体系搭建]    Prob --&gt; Exp[实验分析]    Prob --&gt; Attr[问题归因]    Prob --&gt; Spec[专项分析]    Spec --&gt; spec[机会点、价值论证]        Bus --&gt; Under[业务理解]        %% 右侧分支2：软性技能（与业务技能并列，更舒展）    Root --&gt; Soft[&quot;🌟 软性技能&quot;]    Soft --&gt; Sense[商业sense]    Soft --&gt; Listen[信息倾听]    Soft --&gt; Split[信息拆解]    Soft --&gt; ReportExp[汇报表达]    Soft --&gt; Stress[抗压能力]    Soft --&gt; Time[时间管理]        %% 样式优化：颜色+边框，区分度拉满    classDef rootColor fill:#fff3e0,stroke:#ff9800,stroke-width:2px,font-weight:bold    classDef hardColor fill:#e8f5e8,stroke:#4caf50,stroke-width:1px    classDef busColor fill:#e3f2fd,stroke:#2196f3,stroke-width:1px    classDef softColor fill:#fce4ec,stroke:#e91e63,stroke-width:1px        class Root rootColor    class Hard,Code,code,Stat,Test,Param,NonParam,CI,Dist,Law,Model,Process,Cont,Imb,Cluster,cluster,Reg,Class,TS,ARIMA,Trans,Causal,Simp,Metric,Method,method,Ana,Rep hardColor    class Bus,Meth,Drill,Reason,Path,Touch,Portrait,MethOthers,Prob,Ind,Exp,Attr,Spec,spec,Under busColor    class Soft,Sense,Listen,Split,ReportExp,Stress,Time softColor</code></pre><h1 id="使用-Markdown-编写文档用什么软件"><a href="#使用-Markdown-编写文档用什么软件" class="headerlink" title="使用 Markdown 编写文档用什么软件"></a>使用 Markdown 编写文档用什么软件</h1><ol><li><p>Typora<br> 核心优势：所见即所得（WYSIWYG）界面，实时渲染 Markdown 语法，支持表格、代码块、数学公式（LaTeX）、任务列表等。<br> 导出能力：直接导出为 PDF、HTML、Word、ePub 等格式，适合生成报告或电子书。<br> 价格：买断制 89 元人民币，支持 Windows&#x2F;macOS&#x2F;Linux。<br> 适用场景：个人写作、技术文档、学术论文。</p></li><li><p>VS Code + 插件<br> 核心优势：代码编辑器的强大扩展性，通过插件支持 Markdown 语法高亮、实时预览、TOC 生成。<br> 插件：<br> Markdown All in One：快捷键和格式转换工具。<br> Markdown PDF：一键导出 PDF（需安装 LaTeX 环境）。<br> 适用场景：开发者、技术文档撰写者。<br> 缺点：不能通过剪切板粘图，需要手动上传图片。这是我特别常用的一个功能，所以需要一个更好的软件。</p></li><li><p>MarkText<br> 核心优势：开源免费，支持实时预览、多主题切换（如 Material Dark）、三种编辑模式（源码 &#x2F; 打字机 &#x2F; 专注）。<br> 特色功能：直接粘贴图片到文档，支持数学公式（KaTeX）和 Mermaid 图表。<br> 导出能力：导出 HTML 和 PDF，适合轻量级文档。<br> 适用场景：学生、自由职业者、开源项目贡献者。<br> 缺点：现在好像没人维护了，最新版本还是v0.17.1。</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> 常用命令 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Markdown </tag>
            
            <tag> Typora </tag>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Github常用</title>
      <link href="/2025/04/11/Github%E5%B8%B8%E7%94%A8/"/>
      <url>/2025/04/11/Github%E5%B8%B8%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<hr><h1 id="Git命令"><a href="#Git命令" class="headerlink" title="Git命令"></a>Git命令</h1><h2 id="专业名词（黑话）"><a href="#专业名词（黑话）" class="headerlink" title="专业名词（黑话）"></a>专业名词（黑话）</h2><ol><li><p><strong>Git 工作流</strong></p><pre><code class="highlight mermaid">graph LR    A[关联工作区] -- git add --&gt; B[暂存区]    B -- git commit --&gt; C[本地仓库]    C -- git push --&gt; E[远程仓库]</code></pre></li><li><p><strong>工作区文件</strong>：本地文件夹的文件。<br>在 Git 版本控制中，<strong>工作区文件</strong>指的是你在本地电脑上直接编辑、修改的项目文件，也就是你能在操作系统的文件夹里看到的那些文件（比如文档、代码、图片等）。</p><p>简单说，工作区（Working Directory）就是你克隆或创建项目后，在本地电脑上存放项目文件的那个文件夹，而这个文件夹里的所有文件（包括子文件夹里的文件）都可以称为 “工作区文件”。</p></li><li><p><strong>暂存区：</strong><br>在 Git 版本控制中，<strong>暂存区（Staging Area）</strong> 是一个介于「工作区」和「本地仓库」之间的临时存储区域，也被称为「索引（Index）」。它的核心作用是：<strong>临时存放你想要提交到本地仓库的修改</strong>，让你可以先 “预览” 哪些修改会被纳入下一次提交，再统一提交到仓库</p><p><strong>为什么需要暂存区？</strong></p><p>想象一个场景：你同时修改了项目中的 3 个文件（A、B、C），但其中只有 A 和 B 的修改是完整的，C 的修改还没完成。这时候你想先提交 A 和 B 的修改，而暂时忽略 C—— 暂存区就是用来解决这个问题的：你可以先把 A 和 B 放入暂存区，然后只提交暂存区的内容，C 仍然留在工作区继续修改。</p></li><li><p><strong>工作区文件的状态：</strong></p><ol><li><strong>未跟踪（Untracked）</strong>：新创建的文件，还没被 Git 记录（Git 不知道它的存在）；</li><li>已跟踪（Tracked）：已被 Git 记录的文件，包括：<ul><li>未修改（Unmodified）：和 Git 最后一次记录的版本一致；</li><li>已修改（Modified）：被编辑过，但还没存入暂存区；</li><li>已暂存（Staged）：修改后被添加到暂存区（通过 <code>git add</code> 命令），等待提交到本地仓库。</li></ul></li></ol></li><li><p>**子模块：**嵌套仓库<br>在 Git 中，<strong>子模块（Submodule）</strong> 是一种特殊功能，用于在一个 Git 仓库（称为 “主项目”）中嵌入另一个独立的 Git 仓库（称为 “子模块项目”），同时保持两个仓库的独立性。</p></li><li><p>done</p></li></ol><h2 id="Git-版本控制工具中常用的命令"><a href="#Git-版本控制工具中常用的命令" class="headerlink" title="Git 版本控制工具中常用的命令"></a>Git 版本控制工具中常用的命令</h2><h3 id="git-clone"><a href="#git-clone" class="headerlink" title="git clone"></a><code>git clone</code></h3><p>：“下载” 远程项目到本地；</p><p><strong>作用</strong>：从远程仓库（比如 GitHub、GitLab 等）复制一个完整的项目到本地电脑。<br>它会将远程仓库的所有文件、分支、提交历史等完整下载到本地，并自动创建一个与远程仓库同名的文件夹，同时初始化本地 Git 仓库，关联到远程仓库。</p><p><strong>示例</strong>：</p><p>克隆远程仓库到当前目录（生成与仓库同名的文件夹）：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">clone</span> &lt;远程仓库地址&gt;</span><br><span class="line"><span class="comment"># 示例：克隆 GitHub 上的仓库</span></span><br><span class="line">git <span class="built_in">clone</span> https://github.com/Kkkika/Kkkika.github.io.git</span><br></pre></td></tr></table></figure><ul><li><p><strong>自定义文件夹名称</strong>（不使用仓库默认名称）：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">clone</span> &lt;远程仓库地址&gt; &lt;本地目录名&gt;</span><br><span class="line"><span class="comment"># 示例：克隆到名为 &quot;my-project&quot; 的文件夹</span></span><br><span class="line">git <span class="built_in">clone</span> https://github.com/Kkkika/Kkkika.github.io.git my-project</span><br></pre></td></tr></table></figure></li><li><p><strong>只克隆指定分支</strong>（默认克隆所有分支，此参数可节省时间）：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">clone</span> -b &lt;分支名&gt; --single-branch &lt;远程仓库地址&gt;</span><br><span class="line"><span class="comment"># 示例：只克隆远程的 dev 分支</span></span><br><span class="line">git <span class="built_in">clone</span> -b dev --single-branch https://github.com/username/repo-name.git</span><br></pre></td></tr></table></figure></li><li><p><strong>浅克隆</strong>（只获取最近的 N 次提交，适合大型仓库，加快克隆速度）：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">clone</span> --depth &lt;次数&gt; &lt;远程仓库地址&gt;</span><br><span class="line"><span class="comment"># 示例：只获取最近 10 次提交</span></span><br><span class="line">git <span class="built_in">clone</span> --depth 10 https://github.com/username/repo-name.git</span><br></pre></td></tr></table></figure></li><li><p><strong>克隆时包含子模块</strong>（如果项目包含子模块，需用此参数才能完整克隆）：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">clone</span> --recursive &lt;远程仓库地址&gt;</span><br><span class="line"><span class="comment"># 若已克隆但子模块未下载，可补拉：git submodule update --init --recursive</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="git-branch"><a href="#git-branch" class="headerlink" title="git branch"></a><code>git branch</code></h3><p>：“管理” 本地分支（查看、创建、删除）；</p><p><strong>作用</strong>：用于管理本地分支（分支可以理解为项目的 “并行开发线”，方便多人协作或功能隔离）。</p><p>常用用法：</p><h4 id="1-查看分支"><a href="#1-查看分支" class="headerlink" title="1. 查看分支"></a>1. 查看分支</h4><ul><li><p>不带参数：查看本地所有分支（当前分支前有 <code>*</code> 标记）：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git branch</span><br></pre></td></tr></table></figure></li><li><p>查看本地 + 远程所有分支（远程分支以 <code>remotes/origin/</code> 开头）：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git branch -a</span><br></pre></td></tr></table></figure></li><li><p>查看远程分支（仅远程，不包含本地）：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git branch -r</span><br></pre></td></tr></table></figure></li><li><p>查看分支关联的远程分支（多人协作时常用，确认本地分支对应哪个远程分支）：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git branch -vv</span><br><span class="line"><span class="comment"># 输出示例：* main  a1b2c3d [origin/main] 提交说明</span></span><br></pre></td></tr></table></figure></li></ul><h4 id="2-创建分支"><a href="#2-创建分支" class="headerlink" title="2. 创建分支"></a>2. 创建分支</h4><ul><li><p>基于当前分支创建新分支（创建后仍在当前分支，需手动切换）：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git branch &lt;新分支名&gt;</span><br><span class="line"><span class="comment"># 示例：基于当前分支创建 feature/payment 分支</span></span><br><span class="line">git branch feature/payment</span><br></pre></td></tr></table></figure></li></ul><h4 id="3-删除分支"><a href="#3-删除分支" class="headerlink" title="3. 删除分支"></a>3. 删除分支</h4><ul><li><p>删除本地分支（需确保分支已合并，否则会提示错误）：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git branch -d &lt;分支名&gt;</span><br><span class="line"><span class="comment"># 示例：删除已合并的 old-branch</span></span><br><span class="line">git branch -d old-branch</span><br></pre></td></tr></table></figure></li><li><p>强制删除未合并的分支（危险！未合并的修改会丢失）：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git branch -D &lt;分支名&gt;</span><br><span class="line"><span class="comment"># 示例：强制删除未合并的 test-branch</span></span><br><span class="line">git branch -D test-branch</span><br></pre></td></tr></table></figure></li></ul><h4 id="4-重命名分支"><a href="#4-重命名分支" class="headerlink" title="4. 重命名分支"></a>4. 重命名分支</h4><ul><li><p>重命名当前所在分支：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git branch -m &lt;新分支名&gt;</span><br><span class="line"><span class="comment"># 示例：将当前分支重命名为 bugfix/login</span></span><br><span class="line">git branch -m bugfix/login</span><br></pre></td></tr></table></figure></li><li><p>重命名指定分支（无需切换到该分支）：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git branch -m &lt;旧分支名&gt; &lt;新分支名&gt;</span><br><span class="line"><span class="comment"># 示例：将 feature/old 重命名为 feature/new</span></span><br><span class="line">git branch -m feature/old feature/new</span><br></pre></td></tr></table></figure></li><li><p>带分支名：创建新分支（但不会自动切换到新分支）。</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git branch feature-login  <span class="comment"># 创建名为 feature-login 的新分支</span></span><br></pre></td></tr></table></figure></li><li><p><code>-d</code> 参数：删除指定分支（删除前需确保该分支的修改已合并，否则用 <code>-D</code> 强制删除）。</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git branch -d old-branch  <span class="comment"># 删除 old-branch 分支</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="git-checkout"><a href="#git-checkout" class="headerlink" title="git checkout"></a><code>git checkout</code></h3><p>：“切换” 分支或 “恢复” 文件。</p><p><strong>作用</strong>：主要用于 “切换分支” 或 “恢复工作区文件”（Git 2.23+ 后推荐用 <code>git switch</code> 切换分支，功能更清晰，但 <code>checkout</code> 仍广泛使用）。</p><p>常用用法：</p><ul><li><p>切换到已存在的分支：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git checkout dev  <span class="comment"># 切换到 dev 分支</span></span><br></pre></td></tr></table></figure></li><li><p>创建并立即切换到新分支（相当于 <code>git branch 新分支名</code> + <code>git checkout 新分支名</code> 的简写）：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git checkout -b dev  <span class="comment"># 创建并切换到 dev 分支</span></span><br></pre></td></tr></table></figure></li><li><p>恢复工作区的某个文件到最近一次提交的状态（丢弃本地修改）：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git checkout -- README.md  <span class="comment"># 把 README.md 恢复到最近提交的版本</span></span><br></pre></td></tr></table></figure></li></ul><h1 id="GitHub中clone指定Commits"><a href="#GitHub中clone指定Commits" class="headerlink" title="GitHub中clone指定Commits"></a>GitHub中clone指定Commits</h1><p>（Github中怎么找回历史版本；GitHub历史版本恢复指南；GitHub中下载指定版本；Github查看项目的历史版本，并实现版本的回滚）</p><blockquote><p>假设：我想下载<a href="https://github.com/Kkkika/Kkkika.github.io">Kkkika&#x2F;Kkkika.github.io</a>仓库master分支的第一次提交</p></blockquote><p>首先进入仓库后，点击【Commits】<strong>获取历史版本的提交哈希值</strong></p><p><img src="/./../Github%E5%B8%B8%E7%94%A8/image-20250912102842935.png" alt="image-20250912102842935"></p><p>时间拉到最前，找到第一次提交，点击【复制】按钮</p><p><img src="/./../Github%E5%B8%B8%E7%94%A8/image-20250912103044962.png" alt="image-20250912103044962"></p><h3 id="克隆后创建新分支"><a href="#克隆后创建新分支" class="headerlink" title="克隆后创建新分支"></a>克隆后创建新分支</h3><p>如果你想在特定提交的基础上进行一些修改或实验，最好创建一个新分支。</p><p>新建一个文件夹来存放代码，注意路径不要有中文：</p><p>C:\Code\githubclone</p><p>然后打开cmd</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> C:\Code\githubclone</span><br></pre></td></tr></table></figure><ol><li><p><strong>克隆仓库并进入目录</strong></p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/Kkkika/Kkkika.github.io.git</span><br><span class="line"><span class="built_in">cd</span> Kkkika.github.io</span><br></pre></td></tr></table></figure></li><li><p><strong>基于特定提交创建并切换到一个新分支</strong>：这可以避免“分离头指针”状态。</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git branch my-new-branch cc09550ac7db24e987f6f2130da2ee1564191b12</span><br><span class="line">git checkout my-new-branch</span><br></pre></td></tr></table></figure><p>或者更简洁地用一条命令：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git checkout -b my-new-branch cc09550ac7db24e987f6f2130da2ee1564191b12</span><br></pre></td></tr></table></figure><p>这样，你就在一个名为 <code>my-new-branch</code> 的分支上工作，这个分支的起点就是你指定的那个提交。</p></li></ol><h3 id="浅克隆（如果只想快速获取）"><a href="#浅克隆（如果只想快速获取）" class="headerlink" title="浅克隆（如果只想快速获取）"></a>浅克隆（如果只想快速获取）</h3><p>如果你只关心最新的一部分提交，或者仓库很大想加快克隆速度，可以考虑浅克隆。</p><ol><li><p><strong>浅克隆仓库</strong>（例如只克隆最近 10 个提交）：</p><p>bash</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">clone</span> --depth 10 https://github.com/Kkkika/Kkkika.github.io.git</span><br><span class="line"><span class="built_in">cd</span> Kkkika.github.io</span><br></pre></td></tr></table></figure><p><code>--depth 10</code> 参数表示只克隆最近10次提交的历史。你需要确保你想要的提交（<code>cc09550...</code>）在这最近的10次提交之内。</p></li><li><p><strong>然后切换到你想要的提交</strong>：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git checkout cc09550ac7db24e987f6f2130da2ee1564191b12</span><br></pre></td></tr></table></figure></li></ol><h3 id="重要提示"><a href="#重要提示" class="headerlink" title="重要提示"></a>重要提示</h3><ul><li><strong>关于 <code>-b</code> 参数</strong>：<code>-b</code> 在 <code>git clone</code> 中用于指定分支或标签，不能直接用于提交哈希5。</li><li><strong>“分离头指针”状态</strong>：直接 <code>git checkout &lt;commit-hash&gt;</code> 会进入此状态。在此状态下进行更改并提交后，如果不创建分支指向这些新提交，它们可能会被 Git 的垃圾回收机制清除10。如果计划基于该提交进行修改，请务必创建新分支。</li><li><strong>获取正确的提交哈希</strong>：确保你复制的提交哈希是正确的且存在于远程仓库中。你可以通过 GitHub 网站的提交历史页面来查看和确认提交哈希。</li></ul><h3 id="如何选择方法？"><a href="#如何选择方法？" class="headerlink" title="如何选择方法？"></a>如何选择方法？</h3><p>为了更清晰地选择，可以参考下面的流程：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git checkout</span><br></pre></td></tr></table></figure><pre><code class="highlight mermaid">graph LR    A[需求：克隆特定提交] --&gt; B&#123;完整历史？&#125;    B -- 是 --&gt; C[克隆仓库&lt;br&gt;checkout 提交]    B -- 否 --&gt; D[浅克隆&lt;br&gt;checkout 提交]    C --&gt; E&#123;需修改？&#125;    D --&gt; F&#123;需修改？&#125;    E -- 是 --&gt; G[创建分支]    E -- 否 --&gt; H[分离头指针]    F -- 是 --&gt; G    F -- 否 --&gt; H</code></pre><h3 id="可能遇到的问题"><a href="#可能遇到的问题" class="headerlink" title="可能遇到的问题"></a>可能遇到的问题</h3><ol><li>网络问题<ol><li><img src="/./../Github%E5%B8%B8%E7%94%A8/image-20250919152150671.png" alt="image-20250919152150671"></li><li>关闭梯子</li><li>打开加速器</li></ol></li><li></li></ol><h1 id="Gitee"><a href="#Gitee" class="headerlink" title="Gitee"></a>Gitee</h1><h3 id="新建仓库"><a href="#新建仓库" class="headerlink" title="新建仓库"></a>新建仓库</h3><p><img src="/./../Github%E5%B8%B8%E7%94%A8/image-20250909092345765.png" alt="示例"></p><p>上传到仓库的文件夹需要命名为blog：</p><p><img src="/./../Github%E5%B8%B8%E7%94%A8/image-20250909092433077.png" alt="上传到仓库的文件夹"></p><h3 id="git推送"><a href="#git推送" class="headerlink" title="git推送"></a>git推送</h3><p>将本地内容首次推送到空的 Git 远程仓库，需按顺序执行以下命令流程。以下是完整操作步骤及注意事项：</p><ol><li><p><strong>初始化本地仓库</strong></p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git init</span><br></pre></td></tr></table></figure><ul><li>在项目根目录执行，生成隐藏的.git文件夹</li></ul></li><li><p><strong>添加文件并提交</strong></p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git add .              <span class="comment"># 添加所有文件到暂存区</span></span><br><span class="line">git commit -m <span class="string">&quot;Initial commit&quot;</span>  <span class="comment"># 提交到本地仓库</span></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git add .</span><br><span class="line">git commit -m <span class="string">&quot;Initial commit&quot;</span></span><br></pre></td></tr></table></figure><ul><li>必须至少有一次提交，否则推送会失败（Git 不允许推送空分支）。</li></ul></li><li><p><strong>关联远程仓库</strong></p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git remote add origin &lt;远程仓库URL&gt;</span><br></pre></td></tr></table></figure><ul><li><p>验证关联：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git remote -v</span><br></pre></td></tr></table></figure><p> 查看 URL 是否正确。</p></li></ul></li><li><p><strong>首次推送并设置上游分支</strong></p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git push -u origin master</span><br></pre></td></tr></table></figure><ul><li><p>分支名为 master</p></li><li><p>-u（或–set-upstream）参数：</p><ul><li><p>建立本地分支与远程分支的追踪关系。</p></li><li><p>后续推送只需</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git add .</span><br><span class="line">git commit -m <span class="string">&quot;写上描述&quot;</span></span><br><span class="line">git push</span><br></pre></td></tr></table></figure><p> 无需指定分支。</p></li></ul></li></ul></li></ol><h4 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h4><p>在任何IDE的终端或者cmd中运行命令行都可以</p><p>在Cursor中打开终端：</p><p><img src="/./../Github%E5%B8%B8%E7%94%A8/image-20250909093433821.png" alt="在Cursor中打开终端"></p><p>确保路径最后的文件夹和仓库同名：</p><p><img src="/./../Github%E5%B8%B8%E7%94%A8/image-20250909093610035.png" alt="仓库名是blog文件夹名是blog"></p><p>所有用到的命令：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git init</span><br><span class="line">git add .</span><br><span class="line">git commit -m <span class="string">&quot;Initial commit&quot;</span></span><br><span class="line">git remote add origin https://gitee.com/kika00/blog.git</span><br><span class="line">git remote -v</span><br><span class="line">git push -u origin master</span><br></pre></td></tr></table></figure><p>成功推送：</p><p><img src="/./../Github%E5%B8%B8%E7%94%A8/image-20250909102559411.png" alt="成功推送"></p><p>后续推送用到的三个命令：</p><p><img src="/./../Github%E5%B8%B8%E7%94%A8/image-20250910091241450.png" alt="改完 → git add -A → git commit -m &quot;说人话&quot; → git push"></p>]]></content>
      
      
      <categories>
          
          <category> 常用命令 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Github </tag>
            
            <tag> Gitee </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>pic</title>
      <link href="/2025/04/11/pic/"/>
      <url>/2025/04/11/pic/</url>
      
        <content type="html"><![CDATA[<p>文章路径：C:\Code\KikaBlog\blog\source_posts</p><p>（疑问：为什么source和_posts之间的斜杠显示的时候会被隐藏？）</p><h2 id="1-【-】"><a href="#1-【-】" class="headerlink" title="1 【.&#x2F;】"></a>1 【.&#x2F;】</h2><p>【typora可 博客不可】</p><p>实际路径在C:\Code\KikaBlog\blog\source_posts</p><p><img src="/./test1.png" alt=".&#x2F;test1.png"></p><p>但是如果我复制图片到C:\Code\KikaBlog\blog\source的时候，博客上就可以正常显示，而图片路径还是.&#x2F;</p><p><img src="/./../pic/test1-2.png" alt=".&#x2F;..&#x2F;pic&#x2F;test1-2.png"></p><p>也就是说把图片放在C:\Code\KikaBlog\blog\source上用路径.&#x2F;和.&#x2F;..&#x2F;是等价的；还有就是_posts文件夹是进不去的，这个文件夹只能放.md</p><h2 id="2【-】"><a href="#2【-】" class="headerlink" title="2【.&#x2F;..&#x2F;】"></a>2【.&#x2F;..&#x2F;】</h2><p>【都可！typora可 博客可】</p><p>实际路径在C:\Code\KikaBlog\blog\source</p><p><img src="/./../test2.png" alt=".&#x2F;..&#x2F;test2.png"></p><p>缺点：图片文件挤在同一个文件夹，不方便管理</p><h2 id="3【-filename-】"><a href="#3【-filename-】" class="headerlink" title="3【.&#x2F;${filename}】"></a>3【.&#x2F;${filename}】</h2><p>【typora可 博客不可】</p><p>实际路径在C:\Code\KikaBlog\blog\source_posts\pic</p><p><img src="/./pic/test3.png" alt=".&#x2F;pic&#x2F;test3.png"></p><p>为什么不行？这样管理分类最有秩序了，在_posts中搜索文章名，还可以直接搜到文章存放图片的文件夹。啊啊啊啊</p><h2 id="4【-filename-】"><a href="#4【-filename-】" class="headerlink" title="4【.&#x2F;..&#x2F;${filename}】"></a>4【.&#x2F;..&#x2F;${filename}】</h2><p>【都可！typora可 博客可】</p><p>实际路径在C:\Code\KikaBlog\blog\source\pic</p><p><img src="/./../pic/test4.png" alt=".&#x2F;..&#x2F;pic&#x2F;test4.png"></p><h2 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h2><p>第2种和第4种在Typora写文章时可以看到图片，并且GitHub搭建的博客网站上也能正常显示图片。</p><p>第2种是把图片统一放在博客文件夹下的source里；</p><p>第4种则在source文件夹中创建一个与文章名同名的文件夹存放图片，个人更喜欢第4种存放方式。</p>]]></content>
      
      
      <categories>
          
          <category> blog </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Hexo搭建Butterfly主题记录</title>
      <link href="/2024/09/04/Hexo%E6%90%AD%E5%BB%BAButterfly%E4%B8%BB%E9%A2%98%E8%AE%B0%E5%BD%95/"/>
      <url>/2024/09/04/Hexo%E6%90%AD%E5%BB%BAButterfly%E4%B8%BB%E9%A2%98%E8%AE%B0%E5%BD%95/</url>
      
        <content type="html"><![CDATA[<h2 id="Hexo常用命令"><a href="#Hexo常用命令" class="headerlink" title="Hexo常用命令"></a>Hexo常用命令</h2><p>生成主题静态文件：</p><p>等价于hexo generate</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo g</span><br></pre></td></tr></table></figure><p>启动本地服务：</p><p>等价于hexo server</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo s</span><br></pre></td></tr></table></figure><p>在博客根目录下执行以下命令，创建一篇新文章：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo new <span class="string">&quot;我的第一篇文章&quot;</span></span><br></pre></td></tr></table></figure><p>部署到GitHub：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo d</span><br></pre></td></tr></table></figure><p>清除缓存</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo clean</span><br></pre></td></tr></table></figure><h2 id="美化-常用链接"><a href="#美化-常用链接" class="headerlink" title="美化-常用链接"></a>美化-常用链接</h2><p>图标：</p><p><a href="https://fontawesome.com/v6/icons?o=r#packs">Version 6 Icons | Font Awesome</a></p><p>注意：<em>带pro的是付费版</em></p><h2 id="美化-需要下载插件的"><a href="#美化-需要下载插件的" class="headerlink" title="美化-需要下载插件的"></a>美化-需要下载插件的</h2><h3 id="本地搜索"><a href="#本地搜索" class="headerlink" title="本地搜索"></a>本地搜索</h3><p>1.安装搜索插件</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install hexo-generator-search --save</span><br></pre></td></tr></table></figure><p>2.配置_config.yml</p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment">#本地搜索开启</span></span><br><span class="line"><span class="attr">search:</span></span><br><span class="line">  <span class="attr">path:</span> <span class="string">search.xml</span></span><br><span class="line">  <span class="attr">field:</span> <span class="string">post</span></span><br><span class="line">  <span class="attr">content:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><p>3.主题配置文件 _config.butterfly.yml：</p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">local_search:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">labels:</span></span><br><span class="line">    <span class="attr">input_placeholder:</span> <span class="string">Search</span> <span class="string">for</span> <span class="string">Posts</span></span><br><span class="line">    <span class="attr">hits_empty:</span> <span class="string">&quot;We didn&#x27;t find any results for the search: $&#123;query&#125;&quot;</span> <span class="comment"># 如果没有查到内容相关内容显示</span></span><br></pre></td></tr></table></figure><h3 id="字数统计"><a href="#字数统计" class="headerlink" title="字数统计"></a>字数统计</h3><p>安装插件：在你的博客根目录，打开 cmd 命令窗口执行 npm install hexo-wordcount –save。<br>开启配置：修改主题配置文件_config.butterfly.yml 中的 wordcount。</p><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">wordcount:</span><br><span class="line">  enable: true</span><br><span class="line">  post<span class="emphasis">_wordcount: true</span></span><br><span class="line"><span class="emphasis">  min2read: true</span></span><br><span class="line"><span class="emphasis">  total_</span>wordcount: true</span><br></pre></td></tr></table></figure><h3 id="统计访问人数-UV-和-PV"><a href="#统计访问人数-UV-和-PV" class="headerlink" title="统计访问人数 (UV 和 PV)"></a>统计访问人数 (UV 和 PV)</h3><p>详细信息请查看 <a href="https://busuanzi.ibruce.info/">busuanzi 官方网站</a>。</p><p>Butterfly很贴心地集成了不蒜子计数工具，可以统计网站的访问数据（人数，次数等）。只需要修改主题配置文件即可开启。</p><p>修改主题配置文件_config.butterfly.yml。</p><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">busuanzi:</span><br><span class="line">  site<span class="emphasis">_uv: true  # 本站总访客数</span></span><br><span class="line"><span class="emphasis">  site_</span>pv: true  # 本站总访问量 </span><br><span class="line">  page<span class="emphasis">_pv: true  # 本文总阅读量</span></span><br></pre></td></tr></table></figure><h3 id="文章加密"><a href="#文章加密" class="headerlink" title="文章加密"></a>文章加密</h3><p>插件 hexo-blog-encrypt</p><p><strong>安装</strong></p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install --save hexo-blog-encrypt</span><br></pre></td></tr></table></figure><p>或</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yarn add hexo-blog-encrypt</span><br></pre></td></tr></table></figure><p>网速不好推荐使用</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">cnpm install --save hexo-blog-encrypt</span><br></pre></td></tr></table></figure><p><img src="/./../Hexo%E6%90%AD%E5%BB%BAButterfly%E4%B8%BB%E9%A2%98%E8%AE%B0%E5%BD%95/image-20250924142228892.png" alt="成功安装了hexo-blog-encrypt插件"></p><p><strong>项目配置</strong></p><p>在hexo的_config.yml文件中添加如下代码：</p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 安全设置</span></span><br><span class="line"><span class="attr">encrypt:</span></span><br><span class="line">  <span class="comment"># 启用插件</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">message:</span> <span class="string">&quot;请输入密码&quot;</span></span><br><span class="line">  <span class="comment"># 错误消息设置</span></span><br><span class="line">  <span class="attr">wrong_pass_message:</span> <span class="string">&quot;密码错误，请重新输入&quot;</span></span><br><span class="line">  <span class="attr">wrong_hash_message:</span> <span class="string">&quot;认证失败，再试一试&quot;</span></span><br><span class="line">  <span class="comment"># 加密算法（默认&quot;aes&quot;，可选&quot;rsa&quot;）</span></span><br><span class="line">  <span class="attr">algorithm:</span> <span class="string">&quot;aes&quot;</span></span><br><span class="line">  <span class="comment"># 记住密码（默认 7 天，单位：天）</span></span><br><span class="line">  <span class="attr">expire:</span> <span class="number">1</span></span><br><span class="line">  <span class="comment"># 是否禁用日志记录</span></span><br><span class="line">  <span class="attr">silent:</span> <span class="literal">false</span></span><br><span class="line">  <span class="comment"># 主题样式可选 default、blink、shrink、flip、up、surge、wave、xray</span></span><br><span class="line">  <span class="attr">theme:</span> <span class="string">blink</span></span><br></pre></td></tr></table></figure><p>配置项说明：</p><ul><li>enable: 是否启用加密功能，设置为 true 启用。</li><li>message: 密码输入框的描述性文字。</li><li>wrong_pass_message: 密码错误时的提示信息。</li><li>wrong_hash_message: 解密内容无法验证时的提示信息。</li></ul><p>主题配色修改：在C:\Code\KikaBlog\blog\themes\butterfly\source\css\index.styl添加如下代码</p><figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line"><span class="comment">// hexo-blog-encrypt插件主题修改</span></span><br><span class="line"><span class="selector-class">.hbe-input-field-blink</span></span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#d89f68</span> <span class="meta">!important</span></span><br><span class="line"><span class="selector-class">.hbe-input-field-blink</span><span class="selector-pseudo">:focus</span></span><br><span class="line">  <span class="attribute">border-color</span>: <span class="number">#d89f68</span> <span class="meta">!important</span></span><br><span class="line"><span class="selector-class">.hbe-input-label-content-blink</span><span class="selector-pseudo">::after</span></span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#c97d3a</span> <span class="meta">!important</span></span><br><span class="line"><span class="selector-class">.hbe-input-field</span></span><br><span class="line">  <span class="attribute">margin</span> <span class="number">6px</span> <span class="meta">!important</span></span><br></pre></td></tr></table></figure><p><strong>使用</strong></p><p>在需要加密文章的头部添加如下设置：</p><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">---</span><br><span class="line">title: ###</span><br><span class="line">date: XXXX-XX-XX XX:XX:XX</span><br><span class="line"><span class="section">password: ”你的密码”</span></span><br><span class="line"><span class="section">---</span></span><br></pre></td></tr></table></figure><h2 id="美化-文章"><a href="#美化-文章" class="headerlink" title="美化-文章"></a>美化-文章</h2><h3 id="写文参数可选"><a href="#写文参数可选" class="headerlink" title="写文参数可选"></a>写文参数可选</h3><blockquote><p>（可为特定的文章配置）在文章md文件的头部设置</p></blockquote><p>主题会优先判断文章 Markdown 的 Front-matter 是否有配置，如有，则以 Front-matter 的配置为准。否则，以主题配置文件中的配置为准。</p><table><thead><tr><th>参数</th><th>解释</th><th>可取</th></tr></thead><tbody><tr><td>copyright</td><td>文章版权模块(默认为设置中 post_copyright 的 enable 配置)</td><td>true &#x2F; false</td></tr><tr><td>copyright_author</td><td>文章版权模块的<code>文章作者</code></td><td></td></tr><tr><td>copyright_author_href</td><td>文章版权模块的<code>文章作者</code>链接</td><td></td></tr><tr><td>copyright_url</td><td>文章版权模块的<code>文章链接</code></td><td></td></tr><tr><td>copyright_info</td><td>文章版权模块的<code>版权声明</code>文字</td><td></td></tr><tr><td>noticeOutdate</td><td>文章过期提醒 (默认为设置中 noticeOutdate 的 enable 配置)</td><td></td></tr><tr><td>toc</td><td>是否显示 TOC目录(默认为设置中 toc 的 enable 配置)</td><td>true &#x2F; false</td></tr><tr><td>toc_number</td><td>是否目录自动编号(默认为设置中 toc 的 number 配置)</td><td>true &#x2F; false</td></tr><tr><td>toc_style_simple</td><td>显示 toc 简洁模式(侧边栏只剩下toc)</td><td>true &#x2F; false</td></tr><tr><td>comments</td><td>显示页面评论模块</td><td>默认true</td></tr><tr><td>aside</td><td>显示侧边栏</td><td>默认true</td></tr><tr><td>cover</td><td>封面&#x2F;缩略图(如果没有设置 top_img,文章页顶部将显示缩略图)</td><td>false&#x2F;图片地址&#x2F;留空</td></tr><tr><td>top_img</td><td>页面顶部图片</td><td></td></tr><tr><td>description</td><td>页面描述</td><td></td></tr><tr><td>keywords</td><td>页面关键字</td><td></td></tr><tr><td>aplayer</td><td>在需要的页面加载 aplayer 的 js 和 css,请参考文章下面的<code>音乐</code>配置</td><td></td></tr><tr><td>random</td><td>配置友情链接是否随机排序</td><td>默认为 false</td></tr></tbody></table><h3 id="hexo上传查看不了图片（已解决）"><a href="#hexo上传查看不了图片（已解决）" class="headerlink" title="hexo上传查看不了图片（已解决）"></a>hexo上传查看不了图片（已解决）</h3><p>解决的痛点：markdown写文章可以直接粘本地图片，并上传到github时hexo的博客也能正常显示。避免开启post_asset_folder文件资源夹，这样只有有图片的博文会新建文件夹来存储博文的图片 。不用下载任何img插件，网上很多人的解决方法都说要安装如hexo-asset-img插件，完全不必。</p><p>KEYWORDS：如何在Hexo博客中插入本地图片；如何在Hexo博客中插入图片；Hexo搭建butterfly博客中图片无法显示</p><p><strong>解决方法</strong></p><p>解决的核心：在Typora粘图时设置图像粘到指定路径:</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">./../</span><br></pre></td></tr></table></figure><p>这样图片会直接存放在<strong>source</strong>文件夹下，如下面三张图：</p><p><img src="/./../Hexo%E6%90%AD%E5%BB%BAButterfly%E4%B8%BB%E9%A2%98%E8%AE%B0%E5%BD%95/image-20250413144513945.png"></p><p>但是这样所有图片都存在source文件夹，不方便查找和管理，所以</p><p>我更喜欢用如下路径：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">./../$&#123;filename&#125;</span><br></pre></td></tr></table></figure><p>操作：Typora菜单栏的【文件】，打开【偏好设置】，点击【图像】</p><p><img src="/./../Hexo%E6%90%AD%E5%BB%BAButterfly%E4%B8%BB%E9%A2%98%E8%AE%B0%E5%BD%95/image-20250413144119948.png" alt="Typora设置"></p><p>解决过程参考<a href="https://kkkika.github.io/2025/04/11/pic/">pic</a>文章</p><h3 id="md功能展示"><a href="#md功能展示" class="headerlink" title="md功能展示"></a>md功能展示</h3><blockquote><p>markdown不熟悉的功能效果展示</p></blockquote><p>正常          加粗**          <em>斜体</em>          <u>下划线</u>          <code>代码</code></p><p>$内联公式$          <del>删除线</del>          &#x3D;&#x3D;高亮&#x3D;&#x3D;          <!--注释--></p><p>公式块：<br>$$<br>x<br>$$<br>警告框之</p><blockquote><p>[!NOTE]</p><p>提醒内容</p></blockquote><blockquote><p>[!TIP]</p><p>建议内容</p></blockquote><blockquote><p>[!IMPORTANT]</p><p>重要内容</p></blockquote><blockquote><p>[!WARNING]</p><p>警告内容</p></blockquote><blockquote><p>[!CAUTION]</p><p>注意内容</p></blockquote><blockquote><p>引用</p></blockquote><hr><h3 id="hideToggle可折叠内容"><a href="#hideToggle可折叠内容" class="headerlink" title="hideToggle可折叠内容"></a>hideToggle可折叠内容</h3><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">&#123;% hideToggle 我是标题，点击可展开%&#125;</span><br><span class="line">这是折叠的内容/隐藏的内容</span><br><span class="line">（可以加代码块）</span><br><span class="line">&#123;% endhideToggle %&#125;</span><br></pre></td></tr></table></figure><details class="toggle" ><summary class="toggle-button" style="">我是标题，点击可展开</summary><div class="toggle-content"><p>这是折叠的内容&#x2F;隐藏的内容</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">sql</span>代码</span><br></pre></td></tr></table></figure></div></details><hr><h3 id="tabs分栏选项卡"><a href="#tabs分栏选项卡" class="headerlink" title="tabs分栏选项卡"></a>tabs分栏选项卡</h3><h4 id="使用语法"><a href="#使用语法" class="headerlink" title="使用语法"></a>使用语法</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;% tabs 唯一名字, [默认索引] %&#125;</span><br><span class="line"></span><br><span class="line">&lt;!-- tab 标题1 @icon --&gt;</span><br><span class="line">内容 1</span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- tab 标题2 --&gt;</span><br><span class="line">内容 2</span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line"></span><br><span class="line">&#123;% endtabs %&#125;</span><br></pre></td></tr></table></figure><ul><li><p>唯一名字：给这组 tabs 当 HTML id 用，不能重复。</p></li><li><p>默认索引：默认 1 ；写 <code>-1</code> 表示默认全部收起。</p></li><li><p><code>@icon</code> 选填，FontAwesome 全类名，中间有无空格都行。</p></li><li><table><thead><tr><th align="left">写法</th><th align="left">页签最终显示</th></tr></thead><tbody><tr><td align="left"><code>&lt;!-- tab --&gt;</code></td><td align="left">唯一名字-1</td></tr><tr><td align="left"><code>&lt;!-- tab @fas fa-apple --&gt;</code></td><td align="left">仅图标</td></tr><tr><td align="left"><code>&lt;!-- tab macOS --&gt;</code></td><td align="left">macOS</td></tr><tr><td align="left"><code>&lt;!-- tab macOS @fas fa-apple --&gt;</code></td><td align="left">macOS加图标</td></tr></tbody></table></li></ul><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">&#123;% tabs test1 %&#125;</span><br><span class="line"></span><br><span class="line">&lt;!-- tab --&gt;</span><br><span class="line"></span><br><span class="line"><span class="strong">**This is Tab 1.**</span></span><br><span class="line"></span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- tab macOS --&gt;</span><br><span class="line"></span><br><span class="line"><span class="strong">**This is Tab 2.**</span></span><br><span class="line"></span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- tab macOS @fas fa-apple--&gt;</span><br><span class="line"></span><br><span class="line"><span class="strong">**This is Tab 3.**</span></span><br><span class="line"></span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line"></span><br><span class="line">&#123;% endtabs %&#125;</span><br></pre></td></tr></table></figure><p>效果如下：</p><div class="tabs"><div class="nav-tabs"><button type="button" class="tab active">test1 1</button><button type="button" class="tab">macOS</button><button type="button" class="tab"><i class="fas fa-apple"></i>macOS</button></div><div class="tab-contents"><div class="tab-item-content active"><p><strong>This is Tab 1.</strong></p></div><div class="tab-item-content"><p><strong>This is Tab 2.</strong></p></div><div class="tab-item-content"><p><strong>This is Tab 3.</strong></p></div></div><div class="tab-to-top"><button type="button" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div><hr><p>【未解决】</p><p>我希望选项卡在Typora写文章也可以实现同步渲染，在 Typora 编辑模式中使用类似 Hexo-Next 主题的选项卡（Tabs）功能</p><p>下载Typora插件</p><p><a href="https://github.com/obgnail/typora_plugin">obgnail&#x2F;typora_plugin: Typora plugin. Feature enhancement tool | Typora 插件，功能增强工具</a></p><p><a href="https://www.cnblogs.com/PeterJXL/p/18350073">打造个性化Typora写作体验的必备插件 - peterjxl - 博客园</a></p><hr><h3 id="Label颜色高亮"><a href="#Label颜色高亮" class="headerlink" title="Label颜色高亮"></a>Label颜色高亮</h3><blockquote><p>我觉得好像用处不大，对我来说</p></blockquote><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">&#123;% label 文本 颜色 %&#125;</span><br></pre></td></tr></table></figure><p>两个参数，颜色默认值是灰色。</p><p>示例：</p><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">臣亮言：&#123;% label 先帝 %&#125;创业未半，而&#123;% label 中道崩殂 blue %&#125;。今天下三分，&#123;% label 益州疲敝 pink %&#125;，此诚&#123;% label 危急存亡之秋 red %&#125;也！然侍衞之臣，不懈于内；&#123;% label 忠志之士 purple %&#125;，忘身于外者，盖追先帝之殊遇，欲报之于陛下也。诚宜开张圣听，以光先帝遗德，恢弘志士之气；不宜妄自菲薄，引喻失义，以塞忠谏之路也。</span><br><span class="line">宫中、府中，俱为一体；陟罚臧否，不宜异同。若有&#123;% label 作奸 orange %&#125;、&#123;% label 犯科 green %&#125;，及为忠善者，宜付有司，论其刑赏，以昭陛下平明之治；不宜偏私，使内外异法也。</span><br></pre></td></tr></table></figure><p>臣亮言：<mark class="hl-label default">先帝</mark>创业未半，而<mark class="hl-label blue">中道崩殂</mark>。今天下三分，<mark class="hl-label pink">益州疲敝</mark>，此诚<mark class="hl-label red">危急存亡之秋</mark>也！然侍衞之臣，不懈于内；<mark class="hl-label purple">忠志之士</mark>，忘身于外者，盖追先帝之殊遇，欲报之于陛下也。诚宜开张圣听，以光先帝遗德，恢弘志士之气；不宜妄自菲薄，引喻失义，以塞忠谏之路也。<br>宫中、府中，俱为一体；陟罚臧否，不宜异同。若有<mark class="hl-label orange">作奸</mark>、<mark class="hl-label green">犯科</mark>，及为忠善者，宜付有司，论其刑赏，以昭陛下平明之治；不宜偏私，使内外异法也。</p><h3 id="代码换行设置异常（已解决）"><a href="#代码换行设置异常（已解决）" class="headerlink" title="代码换行设置异常（已解决）"></a>代码换行设置异常（已解决）</h3><p>实现代码块自动换行：</p><p>在_config.butterfly.yml配置文件中可以配置如下功能</p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">code_word_wrap:</span> <span class="literal">true</span> <span class="comment">#代码自动换行，关闭滚动条</span></span><br></pre></td></tr></table></figure><p>同时将站点配置文件_config.yml的highlight设置为false</p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">highlight:</span></span><br><span class="line">  <span class="attr">line_number:</span> <span class="literal">false</span></span><br></pre></td></tr></table></figure><p>但是出现了如下异常：</p><p><img src="/./../Hexo%E6%90%AD%E5%BB%BAButterfly%E4%B8%BB%E9%A2%98%E8%AE%B0%E5%BD%95/image-20250911172343525.png" alt="数字异常叠加"></p><p>当 word_wrap 启用但 Hexo 的 highlight.line_number 为 false 时，不再通过伪元素渲染行号，避免换行时前置数字异常叠加</p><p>解决方法：</p><p>将 themes&#x2F;butterfly&#x2F;source&#x2F;css&#x2F;_highlight&#x2F;highlight&#x2F;index.styl 中自动生成行号的逻辑，改为Hexo 配置 highlight.line_number: false 时不显示：</p><p>C:\Code\KikaBlog\blog\themes\butterfly\source\css_highlight\highlight\index.styl</p><figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.container</span></span><br><span class="line">  <span class="selector-tag">figure</span><span class="selector-class">.highlight</span></span><br><span class="line">    <span class="selector-class">.line</span></span><br><span class="line">      <span class="keyword">if</span> wordWrap &amp;&amp; <span class="variable">$highlight_line_numb</span></span><br><span class="line">        <span class="selector-pseudo">&amp;:before</span></span><br><span class="line">          <span class="attribute">display</span>: inline-block</span><br><span class="line">          <span class="attribute">padding</span>: <span class="number">0</span> <span class="number">6px</span> <span class="number">0</span> <span class="number">0</span></span><br><span class="line">          <span class="attribute">min-width</span>: <span class="number">30px</span></span><br><span class="line">          <span class="attribute">color</span>: <span class="built_in">var</span>(--hlnumber-color)</span><br><span class="line">          <span class="attribute">content</span>: <span class="built_in">counter</span>(line)</span><br><span class="line">          <span class="attribute">counter-increment</span>: line</span><br><span class="line">          <span class="attribute">text-align</span>: left</span><br></pre></td></tr></table></figure><p>将if wordWrap改为if wordWrap &amp;&amp; $highlight_line_numb。</p><p>刷新之后又没问题了，我不懂。。</p><p>最后是这样的：</p><p><img src="/./../Hexo%E6%90%AD%E5%BB%BAButterfly%E4%B8%BB%E9%A2%98%E8%AE%B0%E5%BD%95/image-20250912100954585.png" alt="image-20250912100954585"></p><p>可以正常换行了，但是我认为字体不好看，进行调整：</p><p>C:\Code\KikaBlog\blog\themes\butterfly\source\css_highlight\highlight\index.styl</p><p>if wordWrap就不动了，然后调整参数</p><figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.container</span></span><br><span class="line">  <span class="selector-tag">figure</span><span class="selector-class">.highlight</span></span><br><span class="line">    <span class="selector-class">.line</span></span><br><span class="line">      <span class="keyword">if</span> wordWrap</span><br><span class="line">        <span class="selector-pseudo">&amp;:before</span></span><br><span class="line">          <span class="attribute">display</span>: inline-block</span><br><span class="line">          <span class="attribute">color</span>: <span class="built_in">var</span>(--hlnumber-color)</span><br><span class="line">          <span class="attribute">content</span>: <span class="built_in">counter</span>(line)</span><br><span class="line">          <span class="attribute">counter-increment</span>: line</span><br><span class="line">          <span class="attribute">padding</span>: <span class="number">0</span> <span class="number">20px</span> <span class="number">0</span> <span class="number">0</span></span><br><span class="line">          <span class="attribute">text-align</span>: right</span><br><span class="line">          <span class="attribute">min-width</span>: <span class="number">15px</span></span><br><span class="line">          <span class="attribute">font-family</span>: <span class="string">&quot;Consolas&quot;</span> <span class="meta">!important</span></span><br></pre></td></tr></table></figure><p>其中有这些参数是修改或增加的：</p><figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line"><span class="attribute">padding</span>: <span class="number">0</span> <span class="number">20px</span> <span class="number">0</span> <span class="number">0</span></span><br><span class="line"><span class="attribute">text-align</span>: right</span><br><span class="line"><span class="attribute">min-width</span>: <span class="number">15px</span></span><br><span class="line"><span class="attribute">font-family</span>: <span class="string">&quot;Consolas&quot;</span> <span class="meta">!important</span></span><br></pre></td></tr></table></figure><p>效果调整成.gutter pre的样子：</p><p><img src="/./../Hexo%E6%90%AD%E5%BB%BAButterfly%E4%B8%BB%E9%A2%98%E8%AE%B0%E5%BD%95/image-20250912100602774.png" alt="跟上次上传的样式对比"></p><h2 id="美化-首页"><a href="#美化-首页" class="headerlink" title="美化-首页"></a>美化-首页</h2><h3 id="右侧悬浮栏"><a href="#右侧悬浮栏" class="headerlink" title="右侧悬浮栏"></a>右侧悬浮栏</h3><h4 id="悬浮栏按钮"><a href="#悬浮栏按钮" class="headerlink" title="悬浮栏按钮"></a>悬浮栏按钮</h4><p>_config.butterfly.yml</p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Choose: readmode,translate,darkmode,hideAside,toc,chat,comment</span></span><br><span class="line"><span class="comment"># Don&#x27;t repeat the same value</span></span><br><span class="line"><span class="attr">rightside_item_order:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="comment"># Default: readmode,translate,darkmode,hideAside</span></span><br><span class="line">  <span class="attr">hide:</span> <span class="string">readmode,hideAside</span></span><br><span class="line">  <span class="comment"># Default: toc,chat,comment</span></span><br><span class="line">  <span class="attr">show:</span> <span class="string">translate,darkmode,toc,chat,comment</span></span><br></pre></td></tr></table></figure><ul><li><p>可选：阅读模式，简繁转换，日夜切换，单栏和双栏切换，目录，聊天，评论</p></li><li><p>在 hide 里：按钮只在点开齿轮后出现（收纳&#x2F;隐藏到设置面板）。</p></li><li><p>在 show 里：按钮一直固定悬浮显示在右侧。</p></li><li><p>不要重复：同一个键不要同时放在 hide 和 show。</p></li></ul><h4 id="悬浮栏显示"><a href="#悬浮栏显示" class="headerlink" title="悬浮栏显示"></a>悬浮栏显示</h4><p>顶部时保持显示、向下滚动隐藏、向上滚动显示</p><ul><li>导航栏是顶部时保持显示、向下滚动隐藏、向上滚动显示，帮我把右侧悬浮栏也改为这样的形式</li></ul><p>Agent变更点：</p><ul><li>更新 themes&#x2F;butterfly&#x2F;source&#x2F;js&#x2F;main.js 中滚动处理逻辑：向下滚动时移除 rightside-show 以隐藏悬浮栏，向上滚动时添加 rightside-show 以显示，与导航栏一致。</li><li>把右侧悬浮栏在页面初始就显示，并在滚动到顶部时保持显示；当向下滚动时隐藏，向上滚动时显示。我会更新滚动分支中的 else 逻辑，并在刷新初始化时立即显示 #rightside。</li><li>themes&#x2F;butterfly&#x2F;source&#x2F;js&#x2F;main.js：在注册滚动监听后立刻调用一次 scrollTask()</li></ul><h3 id="butterfly主题文章顶部大图"><a href="#butterfly主题文章顶部大图" class="headerlink" title="butterfly主题文章顶部大图"></a>butterfly主题文章顶部大图</h3><p><a href="https://blog.captainz.cc/posts/hexo_butterfly_top_img.html">Hexo+Butterfly 主题一图流背景与顶部图修改 | Hyper Tech</a></p><p><a href="https://blog.csdn.net/weixin_74811095/article/details/147954567">butterfly主题魔改02：主题颜色、宽度设置、图片设置、遮罩效果_butterfly宽度-CSDN博客</a></p><h2 id="小美化"><a href="#小美化" class="headerlink" title="小美化"></a>小美化</h2><h4 id="文章图片大小限制"><a href="#文章图片大小限制" class="headerlink" title="文章图片大小限制"></a>文章图片大小限制</h4><blockquote><p>限制最大高度为250px</p><p>宽度改为auto</p><p>然后发现图片会过宽，就再加上限制最大宽度为720px</p></blockquote><p>C:\Code\KikaBlog\blog\themes\butterfly\source\css_layout\post.styl</p><figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">img</span></span><br><span class="line">  <span class="attribute">display</span>: block</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">0</span> auto <span class="number">20px</span></span><br><span class="line">  <span class="attribute">max-height</span>: <span class="number">250px</span></span><br><span class="line">  <span class="attribute">max-width</span>: <span class="number">720px</span></span><br><span class="line">  <span class="attribute">width</span>: auto </span><br><span class="line">  <span class="attribute">transition</span>: filter <span class="number">375ms</span> ease-in .<span class="number">2s</span></span><br><span class="line">  <span class="built_in">addBorderRadius</span>()</span><br></pre></td></tr></table></figure><h4 id="文章底部标签颜色修改"><a href="#文章底部标签颜色修改" class="headerlink" title="文章底部标签颜色修改"></a>文章底部标签颜色修改</h4><p>C:\Code\KikaBlog\blog\themes\butterfly\source\css_layout\post.styl</p><p>将$light-blue改了</p><figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line"><span class="selector-id">#post</span></span><br><span class="line">  <span class="selector-class">.tag_share</span></span><br><span class="line">    <span class="selector-pseudo">&amp;:after</span></span><br><span class="line">      <span class="attribute">display</span>: block</span><br><span class="line">      <span class="attribute">clear</span>: both</span><br><span class="line">      <span class="attribute">content</span>: <span class="string">&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="selector-class">.post-meta</span></span><br><span class="line">      &amp;__tag-list</span><br><span class="line">        <span class="attribute">display</span>: inline-block</span><br><span class="line"></span><br><span class="line">      &amp;__tags</span><br><span class="line">        <span class="attribute">display</span>: inline-block</span><br><span class="line">        <span class="attribute">margin</span>: <span class="number">8px</span> <span class="number">8px</span> <span class="number">8px</span> <span class="number">0</span></span><br><span class="line">        <span class="attribute">padding</span>: <span class="number">0</span> <span class="number">12px</span></span><br><span class="line">        <span class="attribute">width</span>: fit-content</span><br><span class="line">        <span class="attribute">border</span>: <span class="number">2px</span> solid <span class="variable">$light</span>-blue</span><br><span class="line">        <span class="attribute">border-radius</span>: <span class="number">12px</span></span><br><span class="line">        <span class="attribute">color</span>: <span class="variable">$light</span>-blue</span><br><span class="line">        <span class="attribute">font-size</span>: .<span class="number">85em</span></span><br><span class="line">        <span class="attribute">transition</span>: all .<span class="number">2s</span> ease-in-out</span><br></pre></td></tr></table></figure><p><img src="/./../Hexo%E6%90%AD%E5%BB%BAButterfly%E4%B8%BB%E9%A2%98%E8%AE%B0%E5%BD%95/image-20250909152952527.png" alt="文章底部标签颜色"></p><h4 id="文章页头部的背景设置为透明"><a href="#文章页头部的背景设置为透明" class="headerlink" title="文章页头部的背景设置为透明"></a>文章页头部的背景设置为透明</h4><p>C:\Code\KikaBlog\blog\themes\butterfly\source\css_layout\head.styl</p><p>增加<code>background: transparent !important</code>将文章页头部 .post-bg 的背景强制设为透明，避免使用封面图作为背景</p><figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line"><span class="comment">// post</span></span><br><span class="line">&amp;<span class="selector-class">.post-bg</span></span><br><span class="line">  <span class="attribute">height</span>: <span class="number">400px</span></span><br><span class="line">  <span class="attribute">background</span>: transparent <span class="meta">!important</span></span><br></pre></td></tr></table></figure><p>还要开启页头遮罩</p><p>_config.butterfly.yml</p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Add a mask to the header and footer # 页头页脚添加遮罩</span></span><br><span class="line"><span class="attr">mask:</span></span><br><span class="line">  <span class="attr">header:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><p>效果：</p><p><img src="/./../Hexo%E6%90%AD%E5%BB%BAButterfly%E4%B8%BB%E9%A2%98%E8%AE%B0%E5%BD%95/image-20250911112109190.png" alt="文章页头部的背景"></p><hr><h4 id="半透明背景"><a href="#半透明背景" class="headerlink" title="半透明背景"></a>半透明背景</h4><p>效果：</p><p><img src="/./../Hexo%E6%90%AD%E5%BB%BAButterfly%E4%B8%BB%E9%A2%98%E8%AE%B0%E5%BD%95/image-20250910171746704.png" alt="修改后"></p><p>修改前：</p><p><img src="/./../Hexo%E6%90%AD%E5%BB%BAButterfly%E4%B8%BB%E9%A2%98%E8%AE%B0%E5%BD%95/image-20250910172011461.png" alt="修改前"></p><p>增加如下代码：</p><p>C:\Code\KikaBlog\blog\themes\butterfly\source\css_layout\post.styl</p><figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 浅色模式：文章阅读区域背景改为半透明</span></span><br><span class="line"><span class="comment">// 仅在非暗色主题时生效，避免影响暗色模式视觉</span></span><br><span class="line"><span class="selector-tag">html</span><span class="selector-pseudo">:not</span>(<span class="selector-attr">[data-theme=<span class="string">&#x27;dark&#x27;</span>]</span>) <span class="selector-id">#post</span></span><br><span class="line">  <span class="attribute">background</span>: <span class="built_in">rgba</span>(<span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, .<span class="number">94</span>)</span><br></pre></td></tr></table></figure><p>C:\Code\KikaBlog\blog\themes\butterfly\source\css_layout\aside.styl</p><figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 浅色模式：侧栏所有卡片统一半透明背景</span></span><br><span class="line"><span class="comment">// 说明：匹配包含 .card-widget 的全部卡片类型（recent-post/announcement/info 等）</span></span><br><span class="line"><span class="selector-tag">html</span><span class="selector-pseudo">:not</span>(<span class="selector-attr">[data-theme=<span class="string">&#x27;dark&#x27;</span>]</span>) <span class="selector-id">#aside-content</span> <span class="selector-class">.card-widget</span></span><br><span class="line">  <span class="attribute">background</span>: <span class="built_in">rgba</span>(<span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, .<span class="number">94</span>)</span><br></pre></td></tr></table></figure><p>C:\Code\KikaBlog\blog\themes\butterfly\source\css_page\homepage.styl</p><figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 浅色模式：侧栏所有卡片统一半透明背景</span></span><br><span class="line"><span class="selector-tag">html</span><span class="selector-pseudo">:not</span>(<span class="selector-attr">[data-theme=<span class="string">&#x27;dark&#x27;</span>]</span>) <span class="selector-id">#recent-posts</span> <span class="selector-class">.recent-post-item</span></span><br><span class="line">  <span class="attribute">background</span>: <span class="built_in">rgba</span>(<span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, .<span class="number">94</span>)</span><br></pre></td></tr></table></figure><p><img src="/./../Hexo%E6%90%AD%E5%BB%BAButterfly%E4%B8%BB%E9%A2%98%E8%AE%B0%E5%BD%95/image-20250911094012471.png" alt="代码"></p><hr><h4 id="mark-bg参数"><a href="#mark-bg参数" class="headerlink" title="mark-bg参数"></a>mark-bg参数</h4><p>C:\Code\KikaBlog\blog\themes\butterfly\source\css_global\index.styl</p><figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line"><span class="attr">--mark-bg</span>: <span class="built_in">alpha</span>(<span class="variable">$dark</span>-black, .<span class="number">13</span>)</span><br></pre></td></tr></table></figure><p>C:\Code\KikaBlog\blog\themes\butterfly\source\css_mode\darkmode.styl</p><figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line"><span class="attr">--mark-bg</span>: <span class="built_in">alpha</span>(<span class="variable">$dark</span>-black, .<span class="number">24</span>)</span><br></pre></td></tr></table></figure><p>浅色主题.3效果：</p><p><img src="/./../Hexo%E6%90%AD%E5%BB%BAButterfly%E4%B8%BB%E9%A2%98%E8%AE%B0%E5%BD%95/image-20250911161632715.png" alt="浅色主题.3效果"></p><p>浅色主题.13效果：</p><p><img src="/./../Hexo%E6%90%AD%E5%BB%BAButterfly%E4%B8%BB%E9%A2%98%E8%AE%B0%E5%BD%95/image-20250911142312799.png" alt="浅色主题.13效果"></p><p>深色主题.6效果：</p><p><img src="/./../Hexo%E6%90%AD%E5%BB%BAButterfly%E4%B8%BB%E9%A2%98%E8%AE%B0%E5%BD%95/image-20250911161839729.png" alt="深色主题.6效果"></p><p>深色主题.24效果：</p><p><img src="/./../Hexo%E6%90%AD%E5%BB%BAButterfly%E4%B8%BB%E9%A2%98%E8%AE%B0%E5%BD%95/image-20250911161731535.png" alt="深色主题.24效果"></p><hr><h4 id="右侧悬浮栏动态效果"><a href="#右侧悬浮栏动态效果" class="headerlink" title="右侧悬浮栏动态效果"></a>右侧悬浮栏动态效果</h4><p>C:\Code\KikaBlog\blog\themes\butterfly\layout\includes\rightside.pug</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">- const &#123; readmode, translate, darkmode, aside, chat &#125; = theme</span><br><span class="line">mixin rightsideItem(array)</span><br><span class="line">  each item in array</span><br><span class="line">    case item</span><br><span class="line">      when &#x27;readmode&#x27;</span><br><span class="line">        if globalPageType === &#x27;post&#x27; &amp;&amp; readmode</span><br><span class="line">          button#readmode(type=&quot;button&quot; title=_p(&#x27;rightside.readmode_title&#x27;))</span><br><span class="line">            i.fas.fa-book-open</span><br><span class="line">      when &#x27;translate&#x27;</span><br><span class="line">        if translate.enable</span><br><span class="line">          button#translateLink(type=&quot;button&quot; title=_p(&#x27;rightside.translate_title&#x27;))= translate.default</span><br><span class="line">      when &#x27;darkmode&#x27;</span><br><span class="line">        if darkmode.enable &amp;&amp; darkmode.button</span><br><span class="line">          button#darkmode(type=&quot;button&quot; title=_p(&#x27;rightside.night_mode_title&#x27;))</span><br><span class="line">            i.fas.fa-adjust.fa-flip</span><br><span class="line">      when &#x27;hideAside&#x27;</span><br><span class="line">        if aside.enable &amp;&amp; aside.button &amp;&amp; page.aside !== false</span><br><span class="line">          button#hide-aside-btn(type=&quot;button&quot; title=_p(&#x27;rightside.aside&#x27;))</span><br><span class="line">            i.fas.fa-arrows-alt-h</span><br><span class="line">      when &#x27;toc&#x27;</span><br><span class="line">        if showToc</span><br><span class="line">          button#mobile-toc-button.close(type=&quot;button&quot; title=_p(&quot;rightside.toc&quot;))</span><br><span class="line">            i.fas.fa-list-ul</span><br><span class="line">      when &#x27;chat&#x27;</span><br><span class="line">        if chat.rightside_button &amp;&amp; chat.use</span><br><span class="line">          button#chat-btn(type=&quot;button&quot; title=_p(&quot;rightside.chat&quot;) style=&quot;display:none&quot;)</span><br><span class="line">            i.fas.fa-message</span><br><span class="line">      when &#x27;comment&#x27;</span><br><span class="line">        if commentsJsLoad</span><br><span class="line">          a#to_comment(href=&quot;#post-comment&quot; title=_p(&quot;rightside.scroll_to_comment&quot;))</span><br><span class="line">            i.fas.fa-comments</span><br><span class="line"></span><br><span class="line">#rightside</span><br><span class="line">  - const &#123; enable, hide, show &#125; = theme.rightside_item_order</span><br><span class="line">  - const hideArray = enable ? hide &amp;&amp; hide.split(&#x27;,&#x27;) : [&#x27;readmode&#x27;,&#x27;translate&#x27;,&#x27;darkmode&#x27;,&#x27;hideAside&#x27;]</span><br><span class="line">  - const showArray = enable ? show &amp;&amp; show.split(&#x27;,&#x27;) : [&#x27;toc&#x27;,&#x27;chat&#x27;,&#x27;comment&#x27;]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  #rightside-config-hide</span><br><span class="line">    if hideArray</span><br><span class="line">      +rightsideItem(hideArray)</span><br><span class="line">  #rightside-config-show</span><br><span class="line">    if enable</span><br><span class="line">      if hide</span><br><span class="line">        button#rightside-config(type=&quot;button&quot; title=_p(&quot;rightside.setting&quot;))</span><br><span class="line">          i.fas.fa-cog.fa-beat</span><br><span class="line">    else</span><br><span class="line">      if globalPageType === &#x27;post&#x27;</span><br><span class="line">        if (readmode || translate.enable || (darkmode.enable &amp;&amp; darkmode.button))</span><br><span class="line">          button#rightside-config(type=&quot;button&quot; title=_p(&quot;rightside.setting&quot;))</span><br><span class="line">            i.fas.fa-cog.fa-beat</span><br><span class="line">      else if translate.enable || (darkmode.enable &amp;&amp; darkmode.button)</span><br><span class="line">        button#rightside-config(type=&quot;button&quot; title=_p(&quot;rightside.setting&quot;))</span><br><span class="line">          i.fas.fa-cog.fa-beat  </span><br><span class="line"></span><br><span class="line">    if showArray</span><br><span class="line">      +rightsideItem(showArray)</span><br><span class="line"></span><br><span class="line">    button#go-up(type=&quot;button&quot; title=_p(&quot;rightside.back_to_top&quot;))</span><br><span class="line">      span.scroll-percent</span><br><span class="line">      i.fas.fa-arrow-up.fa-bounce</span><br><span class="line">    button#go-down(type=&quot;button&quot; title=_p(&quot;rightside.back_to_bottom&quot;))</span><br><span class="line">      i.fas.fa-arrow-down.fa-bounce</span><br></pre></td></tr></table></figure><ul><li>修改fas.fa-cog的.fa-spin为.fa-beat</li><li>增加fas.fa-arrow-up和fas.fa-arrow-down的.fa-bounce</li><li>增加fas.fa-adjust的.fa-flip</li></ul><hr><h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><h3 id="一劳永逸"><a href="#一劳永逸" class="headerlink" title="一劳永逸"></a>一劳永逸</h3><p>（修改styl文件好像版本更新后又要重新改还是什么的，不太懂）</p><p>干脆全部写在index.styl文件，方便管理</p><figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> <span class="built_in">hexo-config</span>(<span class="string">&#x27;css_prefix&#x27;</span>)</span><br><span class="line">  <span class="keyword">@import</span> <span class="string">&#x27;nib&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">@import</span> <span class="string">&#x27;_third-party/normalize.min.css&#x27;</span></span><br><span class="line"><span class="comment">// project</span></span><br><span class="line"><span class="keyword">@import</span> <span class="string">&#x27;var&#x27;</span></span><br><span class="line"><span class="keyword">@import</span> <span class="string">&#x27;_global/*&#x27;</span></span><br><span class="line"><span class="keyword">@import</span> <span class="string">&#x27;_highlight/highlight&#x27;</span></span><br><span class="line"><span class="keyword">@import</span> <span class="string">&#x27;_page/*&#x27;</span></span><br><span class="line"><span class="keyword">@import</span> <span class="string">&#x27;_layout/*&#x27;</span></span><br><span class="line"><span class="keyword">@import</span> <span class="string">&#x27;_tags/*&#x27;</span></span><br><span class="line"><span class="keyword">@import</span> <span class="string">&#x27;_mode/*&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// search</span></span><br><span class="line"><span class="keyword">@import</span> <span class="string">&#x27;_search/index&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// ======================================================================================</span></span><br><span class="line"><span class="comment">// 确保图标正常显示</span></span><br><span class="line"><span class="comment">// ===========================================</span></span><br><span class="line"><span class="comment">// 全局：设置所有伪元素 :before 使用 FontAwesome 字体</span></span><br><span class="line">*<span class="selector-pseudo">:before</span></span><br><span class="line">  <span class="attribute">font-family</span>: FontAwesome <span class="meta">!important</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// ======================================================================================</span></span><br><span class="line"><span class="comment">// 浅色模式：统一半透明背景样式</span></span><br><span class="line"><span class="comment">// 仅在非暗色主题时生效</span></span><br><span class="line"><span class="comment">// ===========================================</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 文章阅读区域背景</span></span><br><span class="line"><span class="selector-tag">html</span><span class="selector-pseudo">:not</span>(<span class="selector-attr">[data-theme=<span class="string">&#x27;dark&#x27;</span>]</span>) <span class="selector-id">#post</span></span><br><span class="line">  <span class="attribute">background</span>: <span class="built_in">rgba</span>(<span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, .<span class="number">94</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 侧栏所有卡片</span></span><br><span class="line"><span class="comment">// 说明：匹配包含 .card-widget 的全部卡片类型（recent-post/announcement/info 等）</span></span><br><span class="line"><span class="selector-tag">html</span><span class="selector-pseudo">:not</span>(<span class="selector-attr">[data-theme=<span class="string">&#x27;dark&#x27;</span>]</span>) <span class="selector-id">#aside-content</span> <span class="selector-class">.card-widget</span></span><br><span class="line">  <span class="attribute">background</span>: <span class="built_in">rgba</span>(<span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, .<span class="number">94</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 首页文章卡片</span></span><br><span class="line"><span class="selector-tag">html</span><span class="selector-pseudo">:not</span>(<span class="selector-attr">[data-theme=<span class="string">&#x27;dark&#x27;</span>]</span>) <span class="selector-id">#recent-posts</span> <span class="selector-class">.recent-post-item</span></span><br><span class="line">  <span class="attribute">background</span>: <span class="built_in">rgba</span>(<span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, .<span class="number">94</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// ======================================================================================</span></span><br><span class="line"><span class="comment">// 文章页头部背景设置</span></span><br><span class="line"><span class="comment">// 将文章页头部 .post-bg 的背景强制设为透明，避免使用封面图作为背景</span></span><br><span class="line"><span class="comment">// ===========================================</span></span><br><span class="line"><span class="selector-id">#page-header</span><span class="selector-class">.post-bg</span></span><br><span class="line">  <span class="attribute">background</span>: transparent <span class="meta">!important</span></span><br></pre></td></tr></table></figure><p>将特定样式设置写在index.styl文件，方便管理。并从原始文件中移除重复的样式代码</p><h3 id="其他美化思路"><a href="#其他美化思路" class="headerlink" title="其他美化思路"></a>其他美化思路</h3><ul><li>针对归档页面，分类页面，tags页面（标签云页面）关闭mask背景色遮罩并设置图片透明度。我想要的不是透明度而是边缘渐变透明，不要让图片分割感这么重</li></ul><h2 id="butterfly博客评论"><a href="#butterfly博客评论" class="headerlink" title="butterfly博客评论"></a>butterfly博客评论</h2><p>主题支持多种评论系统，你可以根据自己的喜好选择一种。你也可以选择双评论，只需要配置两个评论（第一个为默认显示）</p><p><a href="https://butterfly.js.org/posts/4aa8abbe/">Butterfly 文檔(三) 主題配置 | Butterfly</a>（<code>Twikoo</code> 是一个简洁、安全、无后端的静态网站评论系统，基于腾讯云开发。）</p><p>上面列出了好多种，最后我选择<code>Twikoo</code> 的Hugging Face：<a href="https://twikoo.js.org/quick-start.html">快速上手 | Twikoo 文档</a></p><p>只需要把获取到的 环境ID (envId) 填写到配置上去就行：</p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">twikoo:</span></span><br><span class="line">  <span class="attr">envId:</span>           <span class="comment"># 环境 ID</span></span><br><span class="line">  <span class="attr">region:</span>          <span class="comment"># 环境地域，默认为 ap-shanghai，如果您的环境地域不是上海，需传此参数</span></span><br><span class="line">  <span class="attr">visitor:</span> <span class="literal">false</span>   <span class="comment"># 是否显示文章阅读数</span></span><br><span class="line">  <span class="attr">option:</span>          <span class="comment"># 可选配置，开启 visitor 后，文章页的访问人数将改为 Twikoo 提供，而不是 不蒜子</span></span><br></pre></td></tr></table></figure><h3 id="Twikoo快速上手"><a href="#Twikoo快速上手" class="headerlink" title="Twikoo快速上手"></a>Twikoo快速上手</h3><p>Twikoo 分为云函数和前端两部分，若要在您的网站上集成 Twikoo，您需要同时部署云函数和前端，部署时请注意保持二者版本一致。</p><ul><li><a href="https://twikoo.js.org/backend.html">云函数部署</a> 有多种方式，请选择适合自己的部署平台。</li><li><a href="https://twikoo.js.org/frontend.html">前端部署</a> 有 2 种方式，如果您的网站主题支持 Twikoo，您只需在配置文件中指定 Twikoo 即可；如果您的网站主题不支持 Twikoo，您需要修改源码手动引入 Twikoo 的 js 文件并初始化。</li><li>若您已部署旧版本 Twikoo，请参考 <a href="https://twikoo.js.org/update.html">版本更新</a> 升级云函数和前端版本。</li></ul><p><img src="/./../Hexo%E6%90%AD%E5%BB%BAButterfly%E4%B8%BB%E9%A2%98%E8%AE%B0%E5%BD%95/image-20250905160123616.png" alt="云函数部署我选择"></p><h3 id="Hugging-Face-部署"><a href="#Hugging-Face-部署" class="headerlink" title="Hugging Face 部署"></a>Hugging Face 部署</h3><blockquote><p>注意：Hugging Face 部署的环境，由于默认的邮件端口被屏蔽，无法使用邮件功能。详见 <a href="https://github.com/twikoojs/twikoo/issues/638">twikoo&#x2F;issues&#x2F;638</a></p></blockquote><ol><li>申请 <a href="https://account.mongodb.com/account/register">MongoDB Atlas</a> 账号，获取 MongoDB 连接字符串。<a href="https://mongodb.ac.cn/docs/guides/atlas/account/">注册指南 - MongoDB 文档</a></li><li>申请 <a href="https://huggingface.co/join">Hugging Face</a> 账号</li><li>登录，点击 Spaces - Create new Space</li></ol><p><a href="https://twikoo.js.org/assets/hugging-1.qykHscdz.png"><img src="https://twikoo.js.org/assets/hugging-1.qykHscdz.png" alt="img"></a></p><ol><li>输入 Space name，Select the Space SDK 选择 Docker，Choose a Docker template 选择 Blank，Space hardware 选择 FREE，选择 Public，点击 Create Space</li></ol><p><a href="https://twikoo.js.org/assets/hugging-2.BZLt3AFG.png"><img src="https://twikoo.js.org/assets/hugging-2.BZLt3AFG.png" alt="img"></a></p><ol><li>进入刚刚创建的 Space，点击页面上方的 Settings，滚动到 Variables and secrets 部分，点击 New secret，Name 输入 <code>MONGODB_URI</code>，Value 输入前面记录的数据库连接字符串，点击 Save</li></ol><p><a href="https://twikoo.js.org/assets/hugging-3.BE7bV_x9.png"><img src="https://twikoo.js.org/assets/hugging-3.BE7bV_x9.png" alt="img"></a></p><ol><li>点击页面上方的 Files - Add file - Create a new file</li></ol><p><a href="https://twikoo.js.org/assets/hugging-4.IZDT8YRp.png"><img src="https://twikoo.js.org/assets/hugging-4.IZDT8YRp.png" alt="img"></a></p><ol><li>在 Name your file 中输入 <code>Dockerfile</code>，在 Edit 区域输入以下内容</li></ol><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">FROM imaegoo/twikoo</span><br><span class="line">ENV TWIKOO_PORT 7860</span><br><span class="line">EXPOSE 7860</span><br></pre></td></tr></table></figure><p><a href="https://twikoo.js.org/assets/hugging-5.Cw4bsoD7.png"><img src="https://twikoo.js.org/assets/hugging-5.Cw4bsoD7.png" alt="img"></a></p><ol><li>点击 Commit new file to main</li><li>点击右上角 Settings 右方的菜单（三个点）图标 - Embed this Space，Direct URL 下的内容（例如 <code>https://xxx-xxx.hf.space</code>）即为您的环境 id</li></ol><p><a href="https://twikoo.js.org/assets/hugging-6.CxsVPwFh.png"><img src="https://twikoo.js.org/assets/hugging-6.CxsVPwFh.png" alt="img"></a></p><h4 id="如果你需要自定义域名"><a href="#如果你需要自定义域名" class="headerlink" title="如果你需要自定义域名"></a>如果你需要自定义域名</h4><blockquote><p>自定义域名教程由 <a href="https://github.com/Hoshino-Yumetsuki">Hoshino-Yumetsuki</a> 提供</p><p>ps：除了 <code>CF_ZERO_TRUST_TOKEN</code> 这个环境变量以外，其他环境变量的配置方式与上一步相同</p></blockquote><ol><li>申请 Cloudflare Zero Trust，关于申请方式请自行查找</li></ol><p><a href="https://twikoo.js.org/assets/hugging-7.ey7RVDUh.png"><img src="https://twikoo.js.org/assets/hugging-7.ey7RVDUh.png" alt="img"></a></p><ol><li>添加一条隧道，连接方式选择 Cloudflared，名称任意</li></ol><p><a href="https://twikoo.js.org/assets/hugging-8.bn1zLPri.png"><img src="https://twikoo.js.org/assets/hugging-8.bn1zLPri.png" alt="img"></a></p><ol><li>添加一个 Public Hostname，回源选择 HTTP，端口选择 8080</li><li>Clone Twikoo 仓库，找到 <code>src\server\hf-space</code></li><li>去 Hugging Face 创建一个 Space，然后 Clone 下来，将 hf-space 文件夹内的所有内容复制进去</li><li>在 Hugging Face Space 的设置中添加一个环境变量，变量名 <code>CF_ZERO_TRUST_TOKEN</code>，值是 Tunnels 给的令牌（删掉 <code>cloudflared.exe service install</code>，只保留令牌部分）</li></ol><p><a href="https://twikoo.js.org/assets/hugging-9.BfxLMyMQ.png"><img src="https://twikoo.js.org/assets/hugging-9.BfxLMyMQ.png" alt="img"></a></p><ol><li>Push 到 Hugging Face Space 仓库</li></ol><h2 id="hexo使用Mermaid"><a href="#hexo使用Mermaid" class="headerlink" title="hexo使用Mermaid"></a>hexo使用Mermaid</h2><p>参考<a href="https://kkkika.github.io/2025/04/12/Markdown%E5%B8%B8%E7%94%A8/">Markdown常用 | Kkkika</a></p><h2 id="部署到Github报错怎么办"><a href="#部署到Github报错怎么办" class="headerlink" title="部署到Github报错怎么办"></a>部署到Github报错怎么办</h2><p>一定要开Watt Toolkit加速器</p><p>运行这个命令，能看到 Hexo 到底卡在哪一步：</p><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">hexo deploy --debug</span><br></pre></td></tr></table></figure><h2 id="参考："><a href="#参考：" class="headerlink" title="参考："></a>参考：</h2><p><a href="https://butterfly.js.org/categories/Docs%E6%96%87%E6%AA%94/">分類: Docs文檔 | Butterfly</a></p><p><a href="https://blog.csdn.net/mjh1667002013/article/details/129290903">【Hexo】Hexo搭建Butterfly主题并快速美化_hexo butterfly-CSDN博客</a></p><p><a href="https://nickxu.me/2022/02/20/Hexo-Butterfly-%E5%BB%BA%E7%AB%99%E6%8C%87%E5%8D%97%EF%BC%88%E4%BA%94%EF%BC%89%E6%97%A5%E5%B8%B8%E5%86%99%E4%BD%9C/">Hexo + Butterfly 建站指南（五）日常写作 | NX の 博客</a></p><p><a href="https://korgs.blog.csdn.net/article/details/131094362?spm=1001.2101.3001.6650.3&utm_medium=distribute.pc_relevant.none-task-blog-2~default~BlogCommendFromBaidu~Rate-3-131094362-blog-135929884.235%5Ev43%5Epc_blog_bottom_relevance_base8&depth_1-utm_source=distribute.pc_relevant.none-task-blog-2~default~BlogCommendFromBaidu~Rate-3-131094362-blog-135929884.235%5Ev43%5Epc_blog_bottom_relevance_base8&utm_relevant_index=6">基于Hexo和Butterfly创建个人技术博客，(7) 配置butterfly主题搭建博客网站主体UI框架_hexo butterfly-CSDN博客</a></p>]]></content>
      
      
      <categories>
          
          <category> blog </category>
          
      </categories>
      
      
    </entry>
    
    
  
  
</search>
