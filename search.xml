<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>大文档</title>
      <link href="/2025/09/24/%E5%A4%A7%E6%96%87%E6%A1%A3/"/>
      <url>/2025/09/24/%E5%A4%A7%E6%96%87%E6%A1%A3/</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="密码错误，请重新输入" data-whm="认证失败，再试一试">  <script id="hbeData" type="hbeData" data-hmacdigest="dd96bf635eaebf28288328abd9fda4c2f632b01bbb37321d0dda9473cb137664"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-blink">      <input class="hbe hbe-input-field hbe-input-field-blink" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-blink" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-blink" data-content="请输入密码">请输入密码</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>怎么缴税</title>
      <link href="/2025/09/24/%E6%80%8E%E4%B9%88%E7%BC%B4%E7%A8%8E/"/>
      <url>/2025/09/24/%E6%80%8E%E4%B9%88%E7%BC%B4%E7%A8%8E/</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="密码错误，请重新输入" data-whm="认证失败，再试一试">  <script id="hbeData" type="hbeData" data-hmacdigest="9447a4b0edd1015af8468e763fc605e0aaf818c709bec2eea60cec81e8a6a3b6"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-blink">      <input class="hbe hbe-input-field hbe-input-field-blink" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-blink" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-blink" data-content="请输入密码">请输入密码</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>SQL子查询</title>
      <link href="/2025/09/23/SQL%E5%AD%90%E6%9F%A5%E8%AF%A2/"/>
      <url>/2025/09/23/SQL%E5%AD%90%E6%9F%A5%E8%AF%A2/</url>
      
        <content type="html"><![CDATA[<ul><li>企业常用的子查询示例？</li><li>有哪些必须用子查询的情况，有哪些常见的改join&#x2F;with提高性能的例子？</li><li>Hash Join、Semi Join、宽表、FilterProject、SemiJoin 、HashBuilder这些词什么意思</li></ul><p>下面把“<strong>必须用子查询</strong>”和“<strong>可以改 JOIN &#x2F; WITH 提速</strong>”这两种场景一次性拆开讲透。</p><p>每条都给出 <strong>Trino（Presto）语法示例</strong>，并注明 <strong>为什么必须&#x2F;可以改写</strong></p><h3 id="一、4-种“必须用子查询”的场景"><a href="#一、4-种“必须用子查询”的场景" class="headerlink" title="一、4 种“必须用子查询”的场景"></a>一、4 种“<strong>必须</strong>用子查询”的场景</h3><p>（改写 JOIN 会<strong>语义错误</strong>或<strong>更慢</strong>）</p><table><thead><tr><th align="left">场景</th><th align="left">必须用子查询的原因</th><th align="left">Trino 示例</th></tr></thead><tbody><tr><td align="left">1. 聚合后回查原表（“找高于部门平均”）</td><td align="left">聚合值与明细行<strong>逐行比较</strong>，JOIN 先聚合再回查&#x3D;自己和自己连，只能用相关子查询或窗口函数</td><td align="left">SELECT * FROM employee e WHERE <code>salary &gt;</code> (SELECT <code>AVG(salary)</code> FROM employee WHERE dept&#x3D;e.dept)</td></tr><tr><td align="left">2. EXISTS &#x2F; NOT EXISTS</td><td align="left">语义是“<strong>有无匹配</strong>”，JOIN 会<strong>放大行数</strong>；NOT IN 对 NULL 敏感</td><td align="left">SELECT * FROM customer c WHERE NOT <code>EXISTS</code> (<code>SELECT 1</code> FROM orders o WHERE o.customer_id&#x3D;c.id)</td></tr><tr><td align="left">3. 行号&#x2F; Top-N 子查询（每组取最新 1 条）</td><td align="left">需要<strong>先排序再过滤</strong>，JOIN 写不出“每组”限制</td><td align="left">SELECT * FROM (SELECT *, row_number() OVER (PARTITION BY user_id ORDER BY login_dt DESC) rn FROM login_log) t <code>WHERE rn=1</code></td></tr><tr><td align="left">4. 测量数据质量（重复主键、空值率）</td><td align="left">只关心<strong>统计结果</strong>，不需要展开明细；JOIN 会强行拉明细</td><td align="left">SELECT order_id, COUNT() FROM orders GROUP BY order_id <code>HAVING COUNT()&gt;1</code></td></tr></tbody></table><h3 id="二、6-个“常见可改写”例子"><a href="#二、6-个“常见可改写”例子" class="headerlink" title="二、6 个“常见可改写”例子"></a>二、6 个“<strong>常见可改写</strong>”例子</h3><p>（子查询 → JOIN &#x2F; WITH，<strong>性能 2-10 倍</strong>提升）</p><h4 id="1-相关子查询-→-JOIN"><a href="#1-相关子查询-→-JOIN" class="headerlink" title="1. 相关子查询 → JOIN"></a>1. 相关子查询 → JOIN</h4><p><strong>原写法（慢）</strong></p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> emp_id, emp_name,</span><br><span class="line">       (<span class="keyword">SELECT</span> dept_name <span class="keyword">FROM</span> department d <span class="keyword">WHERE</span> d.dept_id <span class="operator">=</span> e.dept_id) <span class="keyword">AS</span> dept_name</span><br><span class="line"><span class="keyword">FROM</span> employee e;</span><br></pre></td></tr></table></figure><p><strong>改写（快）</strong></p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> e.emp_id, e.emp_name, d.dept_name</span><br><span class="line"><span class="keyword">FROM</span> employee e</span><br><span class="line"><span class="keyword">JOIN</span> department d <span class="keyword">ON</span> d.dept_id <span class="operator">=</span> e.dept_id;</span><br></pre></td></tr></table></figure><p><strong>提速点</strong>：把 <strong>每行一次索引回表</strong> 改成 <strong>一次 Hash Join</strong>。</p><hr><h4 id="2-相关聚合子查询-→-WITH-JOIN"><a href="#2-相关聚合子查询-→-WITH-JOIN" class="headerlink" title="2. 相关聚合子查询 → WITH + JOIN"></a>2. 相关聚合子查询 → WITH + JOIN</h4><p><strong>原写法（O(N²)）</strong></p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> emp_id, salary,</span><br><span class="line">       salary <span class="operator">-</span> (<span class="keyword">SELECT</span> <span class="built_in">AVG</span>(salary) <span class="keyword">FROM</span> employee <span class="keyword">WHERE</span> dept_id <span class="operator">=</span> e.dept_id) <span class="keyword">AS</span> diff</span><br><span class="line"><span class="keyword">FROM</span> employee e;</span><br></pre></td></tr></table></figure><p><strong>改写（O(N)）</strong></p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">WITH</span> dept_avg <span class="keyword">AS</span> (</span><br><span class="line">    <span class="keyword">SELECT</span> dept_id, <span class="built_in">AVG</span>(salary) <span class="keyword">AS</span> avg_salary</span><br><span class="line">    <span class="keyword">FROM</span> employee</span><br><span class="line">    <span class="keyword">GROUP</span> <span class="keyword">BY</span> dept_id</span><br><span class="line">)</span><br><span class="line"><span class="keyword">SELECT</span> e.emp_id, e.salary, e.salary <span class="operator">-</span> d.avg_salary <span class="keyword">AS</span> diff</span><br><span class="line"><span class="keyword">FROM</span> employee e</span><br><span class="line"><span class="keyword">JOIN</span> dept_avg d <span class="keyword">ON</span> d.dept_id <span class="operator">=</span> e.dept_id;</span><br></pre></td></tr></table></figure><p><strong>提速点</strong>：聚合只算一次，复用结果。</p><hr><h4 id="3-IN-子查询-→-Semi-Join"><a href="#3-IN-子查询-→-Semi-Join" class="headerlink" title="3. IN (子查询) → Semi Join"></a>3. IN (子查询) → Semi Join</h4><p><strong>原写法</strong></p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> customer</span><br><span class="line"><span class="keyword">WHERE</span> customer_id <span class="keyword">IN</span> (<span class="keyword">SELECT</span> customer_id <span class="keyword">FROM</span> orders <span class="keyword">WHERE</span> order_amt <span class="operator">&gt;</span> <span class="number">10000</span>);</span><br></pre></td></tr></table></figure><p><strong>改写（Trino 自动做，也可显式写）</strong></p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> c.<span class="operator">*</span></span><br><span class="line"><span class="keyword">FROM</span> customer c</span><br><span class="line"><span class="keyword">WHERE</span> <span class="keyword">EXISTS</span> (<span class="keyword">SELECT</span> <span class="number">1</span> <span class="keyword">FROM</span> orders o <span class="keyword">WHERE</span> o.customer_id <span class="operator">=</span> c.customer_id <span class="keyword">AND</span> o.order_amt <span class="operator">&gt;</span> <span class="number">10000</span>);</span><br></pre></td></tr></table></figure><p><strong>提速点</strong>：Semi Join 可在 <strong>Hash Build 阶段</strong>直接过滤，<strong>不放大右表</strong>。</p><hr><h4 id="4-子查询当“临时宽表”-→-WITH-展开后多次复用"><a href="#4-子查询当“临时宽表”-→-WITH-展开后多次复用" class="headerlink" title="4. 子查询当“临时宽表” → WITH 展开后多次复用"></a>4. 子查询当“临时宽表” → WITH 展开后多次复用</h4><p><strong>场景</strong>：同一张中间结果要被<strong>选两次</strong></p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">WITH</span> high_val_customer <span class="keyword">AS</span> (</span><br><span class="line">    <span class="keyword">SELECT</span> customer_id, <span class="built_in">SUM</span>(order_amt) <span class="keyword">AS</span> total</span><br><span class="line">    <span class="keyword">FROM</span> orders</span><br><span class="line">    <span class="keyword">GROUP</span> <span class="keyword">BY</span> customer_id</span><br><span class="line">    <span class="keyword">HAVING</span> <span class="built_in">SUM</span>(order_amt) <span class="operator">&gt;</span> <span class="number">100000</span></span><br><span class="line">)</span><br><span class="line"><span class="keyword">SELECT</span> h.customer_id, h.total, a.address</span><br><span class="line"><span class="keyword">FROM</span> high_val_customer h</span><br><span class="line"><span class="keyword">JOIN</span> address a <span class="keyword">ON</span> a.customer_id <span class="operator">=</span> h.customer_id;</span><br></pre></td></tr></table></figure><p><strong>提速点</strong>：只扫描一次 <code>orders</code>，<strong>CTE 结果默认物化</strong>（Trino 358+ 支持 <strong>CTE Reuse</strong>）。</p><hr><h4 id="5-多层嵌套子查询-→-一步-JOIN"><a href="#5-多层嵌套子查询-→-一步-JOIN" class="headerlink" title="5. 多层嵌套子查询 → 一步 JOIN"></a>5. 多层嵌套子查询 → 一步 JOIN</h4><p><strong>原写法</strong></p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span></span><br><span class="line"><span class="keyword">FROM</span> sku s</span><br><span class="line"><span class="keyword">WHERE</span> category_id <span class="operator">=</span> (<span class="keyword">SELECT</span> category_id <span class="keyword">FROM</span> category <span class="keyword">WHERE</span> category_name <span class="operator">=</span> <span class="string">&#x27;手机&#x27;</span>)</span><br><span class="line">  <span class="keyword">AND</span> brand_id    <span class="operator">=</span> (<span class="keyword">SELECT</span> brand_id   <span class="keyword">FROM</span> brand    <span class="keyword">WHERE</span> brand_name    <span class="operator">=</span> <span class="string">&#x27;华为&#x27;</span>);</span><br></pre></td></tr></table></figure><p><strong>改写</strong></p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> s.<span class="operator">*</span></span><br><span class="line"><span class="keyword">FROM</span> sku s</span><br><span class="line"><span class="keyword">JOIN</span> category c <span class="keyword">ON</span> c.category_id <span class="operator">=</span> s.category_id <span class="keyword">AND</span> c.category_name <span class="operator">=</span> <span class="string">&#x27;手机&#x27;</span></span><br><span class="line"><span class="keyword">JOIN</span> brand    b <span class="keyword">ON</span> b.brand_id    <span class="operator">=</span> s.brand_id    <span class="keyword">AND</span> b.brand_name    <span class="operator">=</span> <span class="string">&#x27;华为&#x27;</span>;</span><br></pre></td></tr></table></figure><p><strong>提速点</strong>：两次相关子查询 → <strong>一次多表 Hash Join</strong>，且可以利用 <strong>复合索引</strong>。</p><hr><h4 id="6-子查询里再子查询-→-扁平化-JOIN-窗口函数"><a href="#6-子查询里再子查询-→-扁平化-JOIN-窗口函数" class="headerlink" title="6. 子查询里再子查询 → 扁平化 JOIN + 窗口函数"></a>6. 子查询里再子查询 → 扁平化 JOIN + 窗口函数</h4><p><strong>原写法</strong></p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span></span><br><span class="line"><span class="keyword">FROM</span> (</span><br><span class="line">    <span class="keyword">SELECT</span> <span class="operator">*</span>, (<span class="keyword">SELECT</span> <span class="built_in">COUNT</span>(<span class="operator">*</span>) <span class="keyword">FROM</span> orders o <span class="keyword">WHERE</span> o.customer_id <span class="operator">=</span> c.customer_id) <span class="keyword">AS</span> cnt</span><br><span class="line">    <span class="keyword">FROM</span> customer c</span><br><span class="line">) t</span><br><span class="line"><span class="keyword">WHERE</span> cnt <span class="operator">&gt;=</span> <span class="number">5</span>;</span><br></pre></td></tr></table></figure><p><strong>改写</strong></p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> c.<span class="operator">*</span>, t.cnt</span><br><span class="line"><span class="keyword">FROM</span> customer c</span><br><span class="line"><span class="keyword">JOIN</span> (<span class="keyword">SELECT</span> customer_id, <span class="built_in">COUNT</span>(<span class="operator">*</span>) <span class="keyword">AS</span> cnt <span class="keyword">FROM</span> orders <span class="keyword">GROUP</span> <span class="keyword">BY</span> customer_id) t</span><br><span class="line">  <span class="keyword">ON</span> t.customer_id <span class="operator">=</span> c.customer_id</span><br><span class="line"><span class="keyword">WHERE</span> t.cnt <span class="operator">&gt;=</span> <span class="number">5</span>;</span><br></pre></td></tr></table></figure><p><strong>提速点</strong>：把 <strong>相关子查询</strong> 变成 <strong>非相关聚合</strong>，再 <strong>Hash Join</strong>。</p><h3 id="三、1-张决策表，10-秒判断“能不能改”"><a href="#三、1-张决策表，10-秒判断“能不能改”" class="headerlink" title="三、1 张决策表，10 秒判断“能不能改”"></a>三、1 张决策表，10 秒判断“能不能改”</h3><table><thead><tr><th align="left">检查项</th><th align="left">子查询必须保留</th><th align="left">可改写 JOIN&#x2F;WITH</th></tr></thead><tbody><tr><td align="left">是否 EXISTS &#x2F; NOT EXISTS</td><td align="left">✅</td><td align="left">❌</td></tr><tr><td align="left">是否“聚合后回查明细”</td><td align="left">✅（或改窗口）</td><td align="left">❌</td></tr><tr><td align="left">是否“每组 Top-N”</td><td align="left">✅（需窗口）</td><td align="left">❌</td></tr><tr><td align="left">是否只拿聚合指标</td><td align="left">❌</td><td align="left">✅（先 WITH 聚合）</td></tr><tr><td align="left">是否相关子查询且<strong>无聚合</strong></td><td align="left">❌</td><td align="left">✅（直接 JOIN）</td></tr><tr><td align="left">是否 IN (子查询)</td><td align="left">❌</td><td align="left">✅（Semi Join）</td></tr></tbody></table><h3 id="四、小结口诀"><a href="#四、小结口诀" class="headerlink" title="四、小结口诀"></a>四、小结口诀</h3><blockquote><p><strong>“聚合回查、存在性、Top-N 必须子查；其余一律拉出来做 JOIN&#x2F;WITH。”</strong></p></blockquote><p>拿不准执行计划时，<strong>EXPLAIN (TYPE DISTRIBUTED)</strong> 看有没有 <strong>FilterProject+SemiJoin</strong> 或 <strong>HashBuilder</strong> 即可。</p><h3 id="高频黑话"><a href="#高频黑话" class="headerlink" title="高频黑话"></a>高频黑话</h3><ol><li>Hash Join（哈希连接）</li></ol><ul><li><p><strong>定义</strong>：把两表里<strong>连接键</strong>先算成哈希表，再一次性“对号入座”做等值匹配。</p></li><li><p><strong>类比</strong>：老师拿两张名单，先给 A 班每人发一个“学号-座位号”小纸条（建哈希表），再让 B 班学生按纸条找座位，<strong>O(1) 定位</strong>。</p></li><li><p><strong>Trino 计划里</strong>：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">└─ InnerJoin[hash = (user_id)]  </span><br><span class="line">   ├─ Scan[user_id, …]  ←  Build 端（通常选小表）  </span><br><span class="line">   └─ Scan[user_id, …]  ←  Probe 端</span><br></pre></td></tr></table></figure></li></ul><ol start="2"><li>Semi Join（半连接）</li></ol><ul><li><p><strong>定义</strong>：只关心<strong>左表记录是否在右表存在匹配</strong>，<strong>不返回右表列</strong>，也<strong>不去重左表</strong>。</p></li><li><p><strong>类比</strong>：安检门只看你是否在“黑名单”里，<strong>查到就拦下</strong>，不会把黑名单详细信息打印出来。</p></li><li><p><strong>Trino 自动把</strong> <code>EXISTS / IN (子查询)</code> <strong>改写成</strong> <code>SemiJoin</code>：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">└─ SemiJoin[hash = (user_id)]  </span><br><span class="line">   ├─ Scan…  ← 左表（旅客）  </span><br><span class="line">   └─ Scan…  ← 右表（黑名单）</span><br></pre></td></tr></table></figure></li></ul><ol start="3"><li>HashBuilder（哈希建造者）</li></ol><ul><li><strong>定义</strong>：Trino 执行计划里的一个<strong>运行时算子</strong>，负责把 Build 端数据<strong>全部读进内存</strong>并建成哈希表。</li><li><strong>类比</strong>：安检人员先把黑名单<strong>一次性录入扫描枪</strong>（HashBuilder），后面每过来一个旅客就<strong>扫一下枪</strong>（Probe）。</li><li><strong>计划关键字</strong>：<code>HashBuilder[hash = (key)]</code> 常出现在 <code>SemiJoin</code> 或 <code>HashJoin</code> 的<strong>右分支</strong>。</li></ul><ol start="4"><li>FilterProject（过滤+投影）</li></ol><ul><li><p><strong>定义</strong>：Trino 里最轻量的算子，<strong>先过滤行</strong>（Filter）<strong>再裁剪列</strong>（Project），无 I&#x2F;O 开销。</p></li><li><p><strong>类比</strong>：超市收银台：先把你购物车里的<strong>过期商品扔掉</strong>（Filter），再把<strong>不需要的小票副联撕掉</strong>（Project）。</p></li><li><p><strong>计划示例</strong>：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">└─ FilterProject[predicate = (status = &#x27;PAID&#x27;)]  </span><br><span class="line">   └─ Scan…</span><br></pre></td></tr></table></figure></li></ul><ol start="5"><li>宽表（Wide Table）</li></ol><ul><li><strong>定义</strong>：把<strong>多张维度表字段冗余到一张事实表</strong>里，减少 Join，牺牲存储换查询速度。</li><li><strong>类比</strong>：原本要点 5 份外卖（5 张表 Join），现在直接买一份“全家桶”（宽表），<strong>一口吃到所有菜</strong>。</li><li><strong>在 Trino 里</strong>：宽表通常以 <strong>Hive&#x2F;Iceberg Parquet&#x2F;ORC</strong> 形式存在，<strong>列式存储 + 分区</strong>，配合 <strong>列裁剪</strong> 扫描极快。</li></ul><ol start="6"><li>总结</li></ol><table><thead><tr><th>术语</th><th>口诀</th></tr></thead><tbody><tr><td>Hash Join</td><td>小表先变哈希，大表逐行探。</td></tr><tr><td>Semi Join</td><td>只问“有没有”，不拿右表数据。</td></tr><tr><td>HashBuilder</td><td>造哈希表的阶段，看右支。</td></tr><tr><td>FilterProject</td><td>先过滤行，再裁剪列。</td></tr><tr><td>宽表</td><td>把字段先拼好，省掉 Join。</td></tr></tbody></table>]]></content>
      
      
      
        <tags>
            
            <tag> SQL </tag>
            
            <tag> Trino </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SQL窗口函数速查表</title>
      <link href="/2025/09/23/SQL%E7%AA%97%E5%8F%A3%E5%87%BD%E6%95%B0%E9%80%9F%E6%9F%A5%E8%A1%A8/"/>
      <url>/2025/09/23/SQL%E7%AA%97%E5%8F%A3%E5%87%BD%E6%95%B0%E9%80%9F%E6%9F%A5%E8%A1%A8/</url>
      
        <content type="html"><![CDATA[<h3 id="一、排名与分布分析类（核心用：给数据-“排位置、看占比”）"><a href="#一、排名与分布分析类（核心用：给数据-“排位置、看占比”）" class="headerlink" title="一、排名与分布分析类（核心用：给数据 “排位置、看占比”）"></a>一、排名与分布分析类（核心用：给数据 “排位置、看占比”）</h3><p>专门用于确定数据在整体 &#x2F; 分区中的相对位置、排名顺序或分布比例，是最常用的窗口函数类型。</p><ol><li><strong>ROW_NUMBER()</strong>：给分区内每行贴唯一连续序号，同值也不重复（如 “给每天的订单按时间排 1、2、3 号”）。</li><li><strong>RANK()</strong>：按排序值排名，同值同名次，后续名次跳号（如 “成绩并列第 1，下一名直接第 3”）。</li><li><strong>DENSE_RANK()</strong>：按排序值排名，同值同名次，后续名次不跳号（如 “成绩并列第 1，下一名仍第 2”）。</li><li><strong>PERCENT_RANK()</strong>：返回相对百分位排名（公式：(名次 - 1)&#x2F;(总行数 - 1)），范围 0~1，体现 “比多少数据好 &#x2F; 差”。</li><li><strong>CUME_DIST()</strong>：返回 “≤当前值的行数 &#x2F; 总行数”，范围 0~1，体现 “当前值及以下数据的占比”。</li><li><strong>NTILE(n)</strong>：将分区数据均匀分成 n 个 “桶”，返回每行所属桶号（如 “把员工绩效分成 3 组，标 1&#x2F;2&#x2F;3 桶”）。</li></ol><h3 id="二、相邻数据取值类（核心用：“跨行取数”，比当前行前-后-特定位置的值）"><a href="#二、相邻数据取值类（核心用：“跨行取数”，比当前行前-后-特定位置的值）" class="headerlink" title="二、相邻数据取值类（核心用：“跨行取数”，比当前行前 &#x2F; 后 &#x2F; 特定位置的值）"></a>二、相邻数据取值类（核心用：“跨行取数”，比当前行前 &#x2F; 后 &#x2F; 特定位置的值）</h3><p>专门用于获取分区内 “非当前行” 的数据，无需手动关联表，直接跨行提取目标位置的值。</p><ol><li><strong>LAG(expr [,offset [,default]])</strong>：取当前行 “往上数 offset 行” 的 expr 值，无对应行返回 default（如 “取前 1 天的销售额，无则返回 0”）。</li><li><strong>LEAD(expr [,offset [,default]])</strong>：取当前行 “往下数 offset 行” 的 expr 值，无对应行返回 default（如 “取后 1 天的销售额，无则返回 0”）。</li><li><strong>FIRST_VALUE(expr)</strong>：取分区内按排序规则的 “第一行” expr 值（如 “取店铺本月第一天的销售额”）。</li><li><strong>LAST_VALUE(expr)</strong>：取分区内 “到当前行为止” 的最后一行 expr 值（需注意窗口框架，默认到当前行，非全分区）。</li><li><strong>NTH_VALUE(expr, n)</strong>：取分区内排序后的 “第 n 行” expr 值，无第 n 行则返回 NULL（如 “取店铺本月第 2 天的销售额”）。</li></ol><h3 id="三、窗口聚合计算类（核心用：“累计-整体统计”，在分区内做聚合，不压缩行数）"><a href="#三、窗口聚合计算类（核心用：“累计-整体统计”，在分区内做聚合，不压缩行数）" class="headerlink" title="三、窗口聚合计算类（核心用：“累计 &#x2F; 整体统计”，在分区内做聚合，不压缩行数）"></a>三、窗口聚合计算类（核心用：“累计 &#x2F; 整体统计”，在分区内做聚合，不压缩行数）</h3><p>将普通聚合函数（SUM&#x2F;AVG 等）改造为窗口模式，不合并行，每行都能显示聚合结果（累计或全分区）。</p><h4 id="1-基础累计-局部聚合（支持按顺序累计，默认-“从第一行到当前行”）"><a href="#1-基础累计-局部聚合（支持按顺序累计，默认-“从第一行到当前行”）" class="headerlink" title="1. 基础累计 &#x2F; 局部聚合（支持按顺序累计，默认 “从第一行到当前行”）"></a>1. 基础累计 &#x2F; 局部聚合（支持按顺序累计，默认 “从第一行到当前行”）</h4><ul><li><strong>SUM(expr)</strong>：计算分区内到当前行的 expr 累计和（如 “按日期累计店铺销售额”）。</li><li><strong>AVG(expr)</strong>：计算分区内到当前行的 expr 累计平均值（如 “按日期累计店铺日均销售额”）。</li><li><strong>COUNT(expr)</strong>：统计分区内到当前行的非 NULL 行数（如 “按日期累计店铺营业天数”）。</li><li><strong>MIN(expr)</strong>：取分区内到当前行的 expr 最小值（如 “按日期记录店铺截至当天的最低销售额”）。</li><li><strong>MAX(expr)</strong>：取分区内到当前行的 expr 最大值（如 “按日期记录店铺截至当天的最高销售额”）。</li></ul><h4 id="2-全分区统计（不累计，直接计算整个分区的统计量，每行结果相同）"><a href="#2-全分区统计（不累计，直接计算整个分区的统计量，每行结果相同）" class="headerlink" title="2. 全分区统计（不累计，直接计算整个分区的统计量，每行结果相同）"></a>2. 全分区统计（不累计，直接计算整个分区的统计量，每行结果相同）</h4><ul><li><strong>STDDEV_POP(expr)</strong>：计算分区内 expr 的 “总体标准差”（用全部数据计算，分母为总行数）。</li><li><strong>STDDEV_SAMP(expr)</strong>：计算分区内 expr 的 “样本标准差”（用样本数据计算，分母为总行数 - 1）。</li><li><strong>VAR_POP(expr)</strong>：计算分区内 expr 的 “总体方差”（总体标准差的平方）。</li><li><strong>VAR_SAMP(expr)</strong>：计算分区内 expr 的 “样本方差”（样本标准差的平方）。</li></ul><h3 id="四、多变量关联分析类（核心用：“分析两个变量的关系”，如相关性、回归）"><a href="#四、多变量关联分析类（核心用：“分析两个变量的关系”，如相关性、回归）" class="headerlink" title="四、多变量关联分析类（核心用：“分析两个变量的关系”，如相关性、回归）"></a>四、多变量关联分析类（核心用：“分析两个变量的关系”，如相关性、回归）</h3><p>专门用于分析分区内两个变量（如 “销售额” 与 “日期”、“广告投入” 与 “销量”）的关联程度或回归规律。</p><ol><li><p><strong>COVAR_POP(y, x)</strong>：计算 y 和 x 的 “总体协方差”，体现两变量的整体联动方向（正 &#x2F; 负相关趋势）。</p></li><li><p><strong>COVAR_SAMP(y, x)</strong>：计算 y 和 x 的 “样本协方差”，基于样本数据体现两变量的联动方向。</p></li><li><p><strong>CORR(y, x)</strong>：计算 y 和 x 的 “皮尔逊相关系数”，范围 - 1~1，直接体现关联强度（1 &#x3D; 完全正相关，-1 &#x3D; 完全负相关）。</p></li><li><p>REGR_* 系列</p><p>：一次线性回归专用函数，如：</p><ul><li><strong>REGR_SLOPE(y, x)</strong>：计算 y 对 x 的回归斜率（如 “销售额随日期变化的每日增长幅度”）。</li><li><strong>REGR_INTERCEPT(y, x)</strong>：计算回归截距（如 “回归公式的初始值”）。</li><li><strong>REGR_R2(y, x)</strong>：计算决定系数 R²，体现回归模型的拟合优度（越接近 1 拟合越好）。</li><li><strong>REGR_COUNT(y, x)</strong>：统计 y 和 x 均非空的行数（回归分析的有效数据量）</li></ul></li></ol><h3 id="五、窗口函数常见错误与避坑指南"><a href="#五、窗口函数常见错误与避坑指南" class="headerlink" title="五、窗口函数常见错误与避坑指南"></a>五、窗口函数常见错误与避坑指南</h3><p>窗口函数功能强大但细节复杂，实际使用中容易因理解框架范围、分区逻辑或排序规则导致结果不符合预期。以下是最常见的错误类型及解决方案：</p><h4 id="1-LAST-VALUE-结果不符合预期（最容易踩的坑）"><a href="#1-LAST-VALUE-结果不符合预期（最容易踩的坑）" class="headerlink" title="1.LAST_VALUE() 结果不符合预期（最容易踩的坑）"></a>1.<code>LAST_VALUE()</code> 结果不符合预期（最容易踩的坑）</h4><p><strong>错误表现：</strong></p><p>使用 <code>LAST_VALUE()</code> 时，返回的不是分区内最后一行的值，而是当前行或靠前位置的值。</p><p><strong>错误原因：</strong></p><p>窗口函数默认框架是 <code>RANGE BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW</code>（从第一行到当前行），而非全分区。例如：</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 错误示例：想取全分区最后一行，却返回当前行及之前的最后一行</span></span><br><span class="line"><span class="keyword">SELECT</span> </span><br><span class="line">  shop, <span class="type">date</span>, sales,</span><br><span class="line">  <span class="built_in">LAST_VALUE</span>(sales) <span class="keyword">OVER</span> (<span class="keyword">PARTITION</span> <span class="keyword">BY</span> shop <span class="keyword">ORDER</span> <span class="keyword">BY</span> <span class="type">date</span>) <span class="keyword">AS</span> last_sales</span><br><span class="line"><span class="keyword">FROM</span> t;</span><br></pre></td></tr></table></figure><p><strong>解决方案：</strong></p><p>显式指定全分区框架 <code>ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING</code>：</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> </span><br><span class="line">  shop, <span class="type">date</span>, sales,</span><br><span class="line">  <span class="built_in">LAST_VALUE</span>(sales) <span class="keyword">OVER</span> (</span><br><span class="line">    <span class="keyword">PARTITION</span> <span class="keyword">BY</span> shop </span><br><span class="line">    <span class="keyword">ORDER</span> <span class="keyword">BY</span> <span class="type">date</span></span><br><span class="line">    <span class="keyword">ROWS</span> <span class="keyword">BETWEEN</span> UNBOUNDED PRECEDING <span class="keyword">AND</span> UNBOUNDED FOLLOWING</span><br><span class="line">  ) <span class="keyword">AS</span> last_sales  <span class="comment">-- 正确返回分区内最后一行</span></span><br><span class="line"><span class="keyword">FROM</span> t;</span><br></pre></td></tr></table></figure><h2 id="二、遗漏-PARTITION-BY-导致全局计算"><a href="#二、遗漏-PARTITION-BY-导致全局计算" class="headerlink" title="二、遗漏 PARTITION BY 导致全局计算"></a>二、遗漏 <code>PARTITION BY</code> 导致全局计算</h2><h3 id="错误表现："><a href="#错误表现：" class="headerlink" title="错误表现："></a>错误表现：</h3><p>希望按分组（如店铺）单独计算窗口函数，结果却变成了所有数据的全局计算。</p><h3 id="错误原因："><a href="#错误原因：" class="headerlink" title="错误原因："></a>错误原因：</h3><p>忘记添加 <code>PARTITION BY</code>，函数默认对全表数据进行计算。例如：</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 错误示例：想按店铺计算累计销售额，却计算了所有店铺的总和</span></span><br><span class="line"><span class="keyword">SELECT</span> </span><br><span class="line">  shop, <span class="type">date</span>, sales,</span><br><span class="line">  <span class="built_in">SUM</span>(sales) <span class="keyword">OVER</span> (<span class="keyword">ORDER</span> <span class="keyword">BY</span> <span class="type">date</span>) <span class="keyword">AS</span> running_sum  <span class="comment">-- 缺少 PARTITION BY shop</span></span><br><span class="line"><span class="keyword">FROM</span> t;</span><br></pre></td></tr></table></figure><h3 id="解决方案："><a href="#解决方案：" class="headerlink" title="解决方案："></a>解决方案：</h3><p>明确添加 <code>PARTITION BY</code> 定义分组：</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> </span><br><span class="line">  shop, <span class="type">date</span>, sales,</span><br><span class="line">  <span class="built_in">SUM</span>(sales) <span class="keyword">OVER</span> (<span class="keyword">PARTITION</span> <span class="keyword">BY</span> shop <span class="keyword">ORDER</span> <span class="keyword">BY</span> <span class="type">date</span>) <span class="keyword">AS</span> running_sum  <span class="comment">-- 正确按店铺分组</span></span><br><span class="line"><span class="keyword">FROM</span> t;</span><br></pre></td></tr></table></figure><h2 id="三、ORDER-BY-排序方向错误影响结果"><a href="#三、ORDER-BY-排序方向错误影响结果" class="headerlink" title="三、ORDER BY 排序方向错误影响结果"></a>三、<code>ORDER BY</code> 排序方向错误影响结果</h2><h3 id="错误表现：-1"><a href="#错误表现：-1" class="headerlink" title="错误表现："></a>错误表现：</h3><p><code>PERCENT_RANK()</code>&#x2F;<code>CUME_DIST()</code> 等排名函数的值与预期相反（如最大值的百分比反而大）。</p><h3 id="错误原因：-1"><a href="#错误原因：-1" class="headerlink" title="错误原因："></a>错误原因：</h3><p>排序方向与分析目标不符。例如：</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 错误示例：想让销售额越高，PERCENT_RANK() 越小，却用了升序</span></span><br><span class="line"><span class="keyword">SELECT</span> </span><br><span class="line">  shop, sales,</span><br><span class="line">  <span class="built_in">PERCENT_RANK</span>() <span class="keyword">OVER</span> (<span class="keyword">ORDER</span> <span class="keyword">BY</span> sales <span class="keyword">ASC</span>) <span class="keyword">AS</span> pct_rnk  <span class="comment">-- 升序导致最大值的百分比为1</span></span><br><span class="line"><span class="keyword">FROM</span> t;</span><br></pre></td></tr></table></figure><h3 id="解决方案：-1"><a href="#解决方案：-1" class="headerlink" title="解决方案："></a>解决方案：</h3><p>根据业务目标选择排序方向（通常分析 “头部数据” 用 <code>DESC</code>）：</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> </span><br><span class="line">  shop, sales,</span><br><span class="line">  <span class="built_in">PERCENT_RANK</span>() <span class="keyword">OVER</span> (<span class="keyword">ORDER</span> <span class="keyword">BY</span> sales <span class="keyword">DESC</span>) <span class="keyword">AS</span> pct_rnk  <span class="comment">-- 降序让最大值的百分比为0</span></span><br><span class="line"><span class="keyword">FROM</span> t;</span><br></pre></td></tr></table></figure><h2 id="四、RANK-与-DENSE-RANK-混淆导致排名错误"><a href="#四、RANK-与-DENSE-RANK-混淆导致排名错误" class="headerlink" title="四、RANK() 与 DENSE_RANK() 混淆导致排名错误"></a>四、<code>RANK()</code> 与 <code>DENSE_RANK()</code> 混淆导致排名错误</h2><h3 id="错误表现：-2"><a href="#错误表现：-2" class="headerlink" title="错误表现："></a>错误表现：</h3><p>需要连续排名时用了 <code>RANK()</code>（出现跳号），或需要保留名次空位时用了 <code>DENSE_RANK()</code>（连续编号）。</p><h3 id="错误示例："><a href="#错误示例：" class="headerlink" title="错误示例："></a>错误示例：</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 若想统计“第2名”包含并列情况但不跳号，却用了 RANK()</span></span><br><span class="line"><span class="keyword">SELECT</span> </span><br><span class="line">  sales,</span><br><span class="line">  <span class="built_in">RANK</span>() <span class="keyword">OVER</span> (<span class="keyword">ORDER</span> <span class="keyword">BY</span> sales <span class="keyword">DESC</span>) <span class="keyword">AS</span> rnk  <span class="comment">-- 若前2名并列，下一名会是3（跳号）</span></span><br><span class="line"><span class="keyword">FROM</span> t;</span><br></pre></td></tr></table></figure><h3 id="解决方案：-2"><a href="#解决方案：-2" class="headerlink" title="解决方案："></a>解决方案：</h3><ul><li>需跳号（如比赛排名，允许第 1 名并列后直接第 3 名）→ 用 <code>RANK()</code></li><li>需连续（如筛选前 3 名，包含并列且不跳号）→ 用 <code>DENSE_RANK()</code></li></ul><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> </span><br><span class="line">  sales,</span><br><span class="line">  <span class="built_in">DENSE_RANK</span>() <span class="keyword">OVER</span> (<span class="keyword">ORDER</span> <span class="keyword">BY</span> sales <span class="keyword">DESC</span>) <span class="keyword">AS</span> dense_rnk  <span class="comment">-- 并列第1后，下一名是2（不跳号）</span></span><br><span class="line"><span class="keyword">FROM</span> t;</span><br></pre></td></tr></table></figure><h2 id="五、窗口聚合函数的-“累计”-与-“全量”-混淆"><a href="#五、窗口聚合函数的-“累计”-与-“全量”-混淆" class="headerlink" title="五、窗口聚合函数的 “累计” 与 “全量” 混淆"></a>五、窗口聚合函数的 “累计” 与 “全量” 混淆</h2><h3 id="错误表现：-3"><a href="#错误表现：-3" class="headerlink" title="错误表现："></a>错误表现：</h3><p>使用 <code>SUM()</code>&#x2F;<code>AVG()</code> 时，希望得到全分区的总量，却返回了累计值。</p><h3 id="错误原因：-2"><a href="#错误原因：-2" class="headerlink" title="错误原因："></a>错误原因：</h3><p><code>ORDER BY</code> 会触发 “累计计算”（从第一行到当前行），省略 <code>ORDER BY</code> 则返回全分区聚合结果。例如：</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 错误示例：想获取店铺总销售额，却因加了 ORDER BY 变成累计值</span></span><br><span class="line"><span class="keyword">SELECT</span> </span><br><span class="line">  shop, <span class="type">date</span>, sales,</span><br><span class="line">  <span class="built_in">SUM</span>(sales) <span class="keyword">OVER</span> (<span class="keyword">PARTITION</span> <span class="keyword">BY</span> shop <span class="keyword">ORDER</span> <span class="keyword">BY</span> <span class="type">date</span>) <span class="keyword">AS</span> total_sales  <span class="comment">-- 累计值，非总量</span></span><br><span class="line"><span class="keyword">FROM</span> t;</span><br></pre></td></tr></table></figure><h3 id="解决方案：-3"><a href="#解决方案：-3" class="headerlink" title="解决方案："></a>解决方案：</h3><ul><li>需累计值 → 保留 <code>ORDER BY</code>（默认从第一行到当前行）</li><li>需全分区总量 → 省略 <code>ORDER BY</code></li></ul><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> </span><br><span class="line">  shop, <span class="type">date</span>, sales,</span><br><span class="line">  <span class="built_in">SUM</span>(sales) <span class="keyword">OVER</span> (<span class="keyword">PARTITION</span> <span class="keyword">BY</span> shop) <span class="keyword">AS</span> total_sales  <span class="comment">-- 正确返回店铺总销售额</span></span><br><span class="line"><span class="keyword">FROM</span> t;</span><br></pre></td></tr></table></figure><h2 id="六、LAG-LEAD-越界处理缺失"><a href="#六、LAG-LEAD-越界处理缺失" class="headerlink" title="六、LAG()&#x2F;LEAD() 越界处理缺失"></a>六、<code>LAG()</code>&#x2F;<code>LEAD()</code> 越界处理缺失</h2><h3 id="错误表现：-4"><a href="#错误表现：-4" class="headerlink" title="错误表现："></a>错误表现：</h3><p>第一行用 <code>LAG()</code> 或最后一行用 <code>LEAD()</code> 时，返回 <code>NULL</code> 导致后续计算错误。</p><h3 id="错误原因：-3"><a href="#错误原因：-3" class="headerlink" title="错误原因："></a>错误原因：</h3><p>未指定越界时的默认值，函数默认返回 <code>NULL</code>。例如：</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 错误示例：第一行的 LAG() 返回 NULL，可能导致计算失败</span></span><br><span class="line"><span class="keyword">SELECT</span> </span><br><span class="line">  shop, <span class="type">date</span>, sales,</span><br><span class="line">  sales <span class="operator">-</span> <span class="built_in">LAG</span>(sales) <span class="keyword">OVER</span> (<span class="keyword">PARTITION</span> <span class="keyword">BY</span> shop <span class="keyword">ORDER</span> <span class="keyword">BY</span> <span class="type">date</span>) <span class="keyword">AS</span> diff  <span class="comment">-- 第一行 diff 为 NULL</span></span><br><span class="line"><span class="keyword">FROM</span> t;</span><br></pre></td></tr></table></figure><h3 id="解决方案：-4"><a href="#解决方案：-4" class="headerlink" title="解决方案："></a>解决方案：</h3><p>显式指定 <code>default</code> 参数（如 0 或其他合理值）：</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> </span><br><span class="line">  shop, <span class="type">date</span>, sales,</span><br><span class="line">  sales <span class="operator">-</span> <span class="built_in">LAG</span>(sales, <span class="number">1</span>, <span class="number">0</span>) <span class="keyword">OVER</span> (<span class="keyword">PARTITION</span> <span class="keyword">BY</span> shop <span class="keyword">ORDER</span> <span class="keyword">BY</span> <span class="type">date</span>) <span class="keyword">AS</span> diff  <span class="comment">-- 越界返回0</span></span><br><span class="line"><span class="keyword">FROM</span> t;</span><br></pre></td></tr></table></figure><h2 id="七、NTILE-n-数据分配不均时的误解"><a href="#七、NTILE-n-数据分配不均时的误解" class="headerlink" title="七、NTILE(n) 数据分配不均时的误解"></a>七、<code>NTILE(n)</code> 数据分配不均时的误解</h2><h3 id="错误表现：-5"><a href="#错误表现：-5" class="headerlink" title="错误表现："></a>错误表现：</h3><p>期望 <code>NTILE(n)</code> 严格均分数据，实际某些桶的行数多 1（如 7 行数据分 3 桶，结果为 3、2、2）。</p><h3 id="错误原因：-4"><a href="#错误原因：-4" class="headerlink" title="错误原因："></a>错误原因：</h3><p><code>NTILE(n)</code> 会优先向前几个桶分配多余的行（总行数不能被 n 整除时），保证分配尽可能均匀而非绝对均分。</p><h3 id="解决方案：-5"><a href="#解决方案：-5" class="headerlink" title="解决方案："></a>解决方案：</h3><ul><li>接受合理偏差（函数设计如此）</li><li>若需严格均分，可先过滤数据使总行数为 n 的倍数，或自定义逻辑：</li></ul><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 替代方案：用 ROW_NUMBER() 手动分配，确保前m个桶多1行</span></span><br><span class="line"><span class="keyword">SELECT</span> </span><br><span class="line">  <span class="operator">*</span>,</span><br><span class="line">  (<span class="built_in">ROW_NUMBER</span>() <span class="keyword">OVER</span> (<span class="keyword">ORDER</span> <span class="keyword">BY</span> sales) <span class="operator">-</span> <span class="number">1</span>) <span class="operator">%</span> <span class="number">3</span> <span class="operator">+</span> <span class="number">1</span> <span class="keyword">AS</span> custom_ntile</span><br><span class="line"><span class="keyword">FROM</span> t;</span><br></pre></td></tr></table></figure><h2 id="避坑总结：3-个核心检查点"><a href="#避坑总结：3-个核心检查点" class="headerlink" title="避坑总结：3 个核心检查点"></a>避坑总结：3 个核心检查点</h2><ol><li><strong>框架范围</strong>：<code>LAST_VALUE()</code> 必须显式指定全分区框架，其他函数注意默认框架是否符合需求。</li><li><strong>分区与排序</strong>：是否遗漏 <code>PARTITION BY</code>（导致全局计算），<code>ORDER BY</code> 方向是否与业务目标一致。</li><li><strong>边界处理</strong>：<code>LAG()</code>&#x2F;<code>LEAD()</code> 显式指定默认值，<code>RANK()</code> 与 <code>DENSE_RANK()</code> 根据排名规则选择。</li></ol>]]></content>
      
      
      <categories>
          
          <category> 技术速查 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Markdown常用</title>
      <link href="/2025/04/12/Markdown%E5%B8%B8%E7%94%A8/"/>
      <url>/2025/04/12/Markdown%E5%B8%B8%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<p>Markdown中使用表格</p><p>Markdown中使用表格</p><p>博客文章 Front-matter的Markdown使用</p><p>如果有文章（例如：转载文章）不需要显示版权，可以在文章 Front-matter 单独设置</p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">copyright:</span> <span class="literal">false</span></span><br></pre></td></tr></table></figure><p>从Butterfly3.0.0开始，支持对单独文章设置版权信息，可以在文章 Front-matter 单独设置</p><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">copyright<span class="emphasis">_author: xxxx</span></span><br><span class="line"><span class="emphasis">copyright_</span>author<span class="emphasis">_href: https://xxxxxx.com</span></span><br><span class="line"><span class="emphasis">copyright_</span>url: https://xxxxxx.com</span><br><span class="line">copyright<span class="emphasis">_info: 此文章版权归 xxxxx 所有，如有转载，请注明来自原作者</span></span><br></pre></td></tr></table></figure><h2 id="Markdown中使用Mermaid画图"><a href="#Markdown中使用Mermaid画图" class="headerlink" title="Markdown中使用Mermaid画图"></a>Markdown中使用Mermaid画图</h2><p>可以绘制流程图、序列图、饼图、甘特图和类图等图形。</p><h3 id="Mermaid代码的语法"><a href="#Mermaid代码的语法" class="headerlink" title="Mermaid代码的语法"></a><strong>Mermaid代码的语法</strong></h3><p>Mermaid代码通常放在一个代码块中，代码块的语法如下：</p><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="code">```mermaid</span></span><br><span class="line"><span class="code">[Mermaid代码]</span></span><br><span class="line"><span class="code">```</span></span><br></pre></td></tr></table></figure><p>使用方法：在 Markdown 中，敲击三个后写下mermaid回车即可。</p><p>展示如下图：</p><p><img src="/./../Markdown%E5%B8%B8%E7%94%A8/image-20250904101750820.png" alt="展示图"></p><h3 id="流程图graph-TD"><a href="#流程图graph-TD" class="headerlink" title="流程图graph TD"></a>流程图graph TD</h3><p>流程图用于展示流程步骤和关系，支持多种布局方向。</p><p><strong>语法说明</strong>：</p><ul><li><code>graph [方向]</code>：定义图表方向（<code>LR</code> 左右，<code>TB</code> 上下，<code>RL</code> 右左，<code>BT</code> 下上）</li><li>节点表示：<code>id[文本]</code>（矩形）、<code>id(文本)</code>（圆角矩形）、<code>id&#123;文本&#125;</code>（菱形）等</li><li>连接线：<code>--&gt;</code>（实线箭头）、<code>---</code>（实线无箭头）、<code>-.-&gt;</code>（虚线箭头）等，可添加标签（<code>--&gt;|标签|</code>）</li></ul><p><strong>示例</strong>：</p><pre><code class="highlight mermaid">graph TD    A[开始] --&gt; B&#123;是或否&#125;    B --&gt;|是| C[执行任务]    B --&gt;|否| D[结束]    C --&gt; D</code></pre><h3 id="序列图sequenceDiagram"><a href="#序列图sequenceDiagram" class="headerlink" title="序列图sequenceDiagram"></a>序列图sequenceDiagram</h3><p>展示对象之间的交互时序，常用于系统交互流程。</p><p><strong>语法说明</strong>：</p><ul><li><code>participant 参与者</code>：定义参与对象</li><li>消息传递：<code>A-&gt;B: 消息内容</code>（实线箭头）、<code>A--&gt;B: 消息内容</code>（虚线箭头，如返回）</li><li>激活状态：<code>activate A</code>（激活对象，显示生命线）、<code>deactivate A</code>（取消激活）</li></ul><p><strong>示例</strong>：</p><pre><code class="highlight mermaid">sequenceDiagram    participant A    participant B    A-&gt;&gt;B: 发送消息    B-&gt;&gt;A: 回复消息</code></pre><h3 id="饼图Pie"><a href="#饼图Pie" class="headerlink" title="饼图Pie"></a>饼图Pie</h3><p>展示数据占比关系。</p><p><strong>语法说明</strong>：</p><ul><li><code>pie</code> 开头</li><li><code>title 标题</code></li><li><code>标签: 数值</code> 定义各部分</li></ul><p><strong>示例</strong>：</p><pre><code class="highlight mermaid">pie    title 网站用户来源    &quot;直接访问&quot; : 30    &quot;搜索引擎&quot; : 50    &quot;外部链接&quot; : 15    &quot;其他&quot; : 5</code></pre><h3 id="甘特图gantt"><a href="#甘特图gantt" class="headerlink" title="甘特图gantt"></a>甘特图gantt</h3><p>用于项目进度规划，展示任务时间安排。</p><p><strong>语法说明</strong>：</p><ul><li><code>dateFormat</code>：日期格式（如 <code>YYYY-MM-DD</code>）</li><li><code>section 模块名</code>：分组任务</li><li>任务格式：<code>任务名 : 状态, 任务ID, 开始日期, 结束日期</code>（状态可选 <code>done</code>&#x2F;<code>active</code> 等）</li></ul><p><strong>示例</strong>：</p><pre><code class="highlight mermaid">gantt    dateFormat  YYYY-MM-DD    section 现有任务    已完成任务           :done,    des1, 2025-01-06,2025-01-08    进行中任务           :active,  des2, 2025-01-09, 3d    待办任务             :         des3, after des2, 5d    section 新增任务    新任务1              :         des4, after des3, 5d    新任务2              :         des5, after des4, 5d</code></pre><h1 id="使用-Markdown-编写文档用什么软件"><a href="#使用-Markdown-编写文档用什么软件" class="headerlink" title="使用 Markdown 编写文档用什么软件"></a>使用 Markdown 编写文档用什么软件</h1><ol><li><p>Typora<br> 核心优势：所见即所得（WYSIWYG）界面，实时渲染 Markdown 语法，支持表格、代码块、数学公式（LaTeX）、任务列表等。<br> 导出能力：直接导出为 PDF、HTML、Word、ePub 等格式，适合生成报告或电子书。<br> 价格：买断制 89 元人民币，支持 Windows&#x2F;macOS&#x2F;Linux。<br> 适用场景：个人写作、技术文档、学术论文。</p></li><li><p>VS Code + 插件<br> 核心优势：代码编辑器的强大扩展性，通过插件支持 Markdown 语法高亮、实时预览、TOC 生成。<br> 插件：<br> Markdown All in One：快捷键和格式转换工具。<br> Markdown PDF：一键导出 PDF（需安装 LaTeX 环境）。<br> 适用场景：开发者、技术文档撰写者。<br> 缺点：不能通过剪切板粘图，需要手动上传图片。这是我特别常用的一个功能，所以需要一个更好的软件。</p></li><li><p>MarkText<br> 核心优势：开源免费，支持实时预览、多主题切换（如 Material Dark）、三种编辑模式（源码 &#x2F; 打字机 &#x2F; 专注）。<br> 特色功能：直接粘贴图片到文档，支持数学公式（KaTeX）和 Mermaid 图表。<br> 导出能力：导出 HTML 和 PDF，适合轻量级文档。<br> 适用场景：学生、自由职业者、开源项目贡献者。<br> 缺点：现在好像没人维护了，最新版本还是v0.17.1。</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> 常用命令 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Markdown </tag>
            
            <tag> Typora </tag>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Github常用</title>
      <link href="/2025/04/11/Github%E5%B8%B8%E7%94%A8/"/>
      <url>/2025/04/11/Github%E5%B8%B8%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<hr><h1 id="Git命令"><a href="#Git命令" class="headerlink" title="Git命令"></a>Git命令</h1><h2 id="专业名词（黑话）"><a href="#专业名词（黑话）" class="headerlink" title="专业名词（黑话）"></a>专业名词（黑话）</h2><ol><li><p><strong>Git 工作流</strong></p><pre><code class="highlight mermaid">graph LR    A[关联工作区] -- git add --&gt; B[暂存区]    B -- git commit --&gt; C[本地仓库]    C -- git push --&gt; E[远程仓库]</code></pre></li><li><p><strong>工作区文件</strong>：本地文件夹的文件。<br>在 Git 版本控制中，<strong>工作区文件</strong>指的是你在本地电脑上直接编辑、修改的项目文件，也就是你能在操作系统的文件夹里看到的那些文件（比如文档、代码、图片等）。</p><p>简单说，工作区（Working Directory）就是你克隆或创建项目后，在本地电脑上存放项目文件的那个文件夹，而这个文件夹里的所有文件（包括子文件夹里的文件）都可以称为 “工作区文件”。</p></li><li><p><strong>暂存区：</strong><br>在 Git 版本控制中，<strong>暂存区（Staging Area）</strong> 是一个介于「工作区」和「本地仓库」之间的临时存储区域，也被称为「索引（Index）」。它的核心作用是：<strong>临时存放你想要提交到本地仓库的修改</strong>，让你可以先 “预览” 哪些修改会被纳入下一次提交，再统一提交到仓库</p><p><strong>为什么需要暂存区？</strong></p><p>想象一个场景：你同时修改了项目中的 3 个文件（A、B、C），但其中只有 A 和 B 的修改是完整的，C 的修改还没完成。这时候你想先提交 A 和 B 的修改，而暂时忽略 C—— 暂存区就是用来解决这个问题的：你可以先把 A 和 B 放入暂存区，然后只提交暂存区的内容，C 仍然留在工作区继续修改。</p></li><li><p><strong>工作区文件的状态：</strong></p><ol><li><strong>未跟踪（Untracked）</strong>：新创建的文件，还没被 Git 记录（Git 不知道它的存在）；</li><li>已跟踪（Tracked）：已被 Git 记录的文件，包括：<ul><li>未修改（Unmodified）：和 Git 最后一次记录的版本一致；</li><li>已修改（Modified）：被编辑过，但还没存入暂存区；</li><li>已暂存（Staged）：修改后被添加到暂存区（通过 <code>git add</code> 命令），等待提交到本地仓库。</li></ul></li></ol></li><li><p>**子模块：**嵌套仓库<br>在 Git 中，<strong>子模块（Submodule）</strong> 是一种特殊功能，用于在一个 Git 仓库（称为 “主项目”）中嵌入另一个独立的 Git 仓库（称为 “子模块项目”），同时保持两个仓库的独立性。</p></li><li><p>done</p></li></ol><h2 id="Git-版本控制工具中常用的命令"><a href="#Git-版本控制工具中常用的命令" class="headerlink" title="Git 版本控制工具中常用的命令"></a>Git 版本控制工具中常用的命令</h2><h3 id="git-clone"><a href="#git-clone" class="headerlink" title="git clone"></a><code>git clone</code></h3><p>：“下载” 远程项目到本地；</p><p><strong>作用</strong>：从远程仓库（比如 GitHub、GitLab 等）复制一个完整的项目到本地电脑。<br>它会将远程仓库的所有文件、分支、提交历史等完整下载到本地，并自动创建一个与远程仓库同名的文件夹，同时初始化本地 Git 仓库，关联到远程仓库。</p><p><strong>示例</strong>：</p><p>克隆远程仓库到当前目录（生成与仓库同名的文件夹）：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">clone</span> &lt;远程仓库地址&gt;</span><br><span class="line"><span class="comment"># 示例：克隆 GitHub 上的仓库</span></span><br><span class="line">git <span class="built_in">clone</span> https://github.com/Kkkika/Kkkika.github.io.git</span><br></pre></td></tr></table></figure><ul><li><p><strong>自定义文件夹名称</strong>（不使用仓库默认名称）：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">clone</span> &lt;远程仓库地址&gt; &lt;本地目录名&gt;</span><br><span class="line"><span class="comment"># 示例：克隆到名为 &quot;my-project&quot; 的文件夹</span></span><br><span class="line">git <span class="built_in">clone</span> https://github.com/Kkkika/Kkkika.github.io.git my-project</span><br></pre></td></tr></table></figure></li><li><p><strong>只克隆指定分支</strong>（默认克隆所有分支，此参数可节省时间）：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">clone</span> -b &lt;分支名&gt; --single-branch &lt;远程仓库地址&gt;</span><br><span class="line"><span class="comment"># 示例：只克隆远程的 dev 分支</span></span><br><span class="line">git <span class="built_in">clone</span> -b dev --single-branch https://github.com/username/repo-name.git</span><br></pre></td></tr></table></figure></li><li><p><strong>浅克隆</strong>（只获取最近的 N 次提交，适合大型仓库，加快克隆速度）：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">clone</span> --depth &lt;次数&gt; &lt;远程仓库地址&gt;</span><br><span class="line"><span class="comment"># 示例：只获取最近 10 次提交</span></span><br><span class="line">git <span class="built_in">clone</span> --depth 10 https://github.com/username/repo-name.git</span><br></pre></td></tr></table></figure></li><li><p><strong>克隆时包含子模块</strong>（如果项目包含子模块，需用此参数才能完整克隆）：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">clone</span> --recursive &lt;远程仓库地址&gt;</span><br><span class="line"><span class="comment"># 若已克隆但子模块未下载，可补拉：git submodule update --init --recursive</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="git-branch"><a href="#git-branch" class="headerlink" title="git branch"></a><code>git branch</code></h3><p>：“管理” 本地分支（查看、创建、删除）；</p><p><strong>作用</strong>：用于管理本地分支（分支可以理解为项目的 “并行开发线”，方便多人协作或功能隔离）。</p><p>常用用法：</p><h4 id="1-查看分支"><a href="#1-查看分支" class="headerlink" title="1. 查看分支"></a>1. 查看分支</h4><ul><li><p>不带参数：查看本地所有分支（当前分支前有 <code>*</code> 标记）：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git branch</span><br></pre></td></tr></table></figure></li><li><p>查看本地 + 远程所有分支（远程分支以 <code>remotes/origin/</code> 开头）：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git branch -a</span><br></pre></td></tr></table></figure></li><li><p>查看远程分支（仅远程，不包含本地）：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git branch -r</span><br></pre></td></tr></table></figure></li><li><p>查看分支关联的远程分支（多人协作时常用，确认本地分支对应哪个远程分支）：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git branch -vv</span><br><span class="line"><span class="comment"># 输出示例：* main  a1b2c3d [origin/main] 提交说明</span></span><br></pre></td></tr></table></figure></li></ul><h4 id="2-创建分支"><a href="#2-创建分支" class="headerlink" title="2. 创建分支"></a>2. 创建分支</h4><ul><li><p>基于当前分支创建新分支（创建后仍在当前分支，需手动切换）：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git branch &lt;新分支名&gt;</span><br><span class="line"><span class="comment"># 示例：基于当前分支创建 feature/payment 分支</span></span><br><span class="line">git branch feature/payment</span><br></pre></td></tr></table></figure></li></ul><h4 id="3-删除分支"><a href="#3-删除分支" class="headerlink" title="3. 删除分支"></a>3. 删除分支</h4><ul><li><p>删除本地分支（需确保分支已合并，否则会提示错误）：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git branch -d &lt;分支名&gt;</span><br><span class="line"><span class="comment"># 示例：删除已合并的 old-branch</span></span><br><span class="line">git branch -d old-branch</span><br></pre></td></tr></table></figure></li><li><p>强制删除未合并的分支（危险！未合并的修改会丢失）：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git branch -D &lt;分支名&gt;</span><br><span class="line"><span class="comment"># 示例：强制删除未合并的 test-branch</span></span><br><span class="line">git branch -D test-branch</span><br></pre></td></tr></table></figure></li></ul><h4 id="4-重命名分支"><a href="#4-重命名分支" class="headerlink" title="4. 重命名分支"></a>4. 重命名分支</h4><ul><li><p>重命名当前所在分支：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git branch -m &lt;新分支名&gt;</span><br><span class="line"><span class="comment"># 示例：将当前分支重命名为 bugfix/login</span></span><br><span class="line">git branch -m bugfix/login</span><br></pre></td></tr></table></figure></li><li><p>重命名指定分支（无需切换到该分支）：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git branch -m &lt;旧分支名&gt; &lt;新分支名&gt;</span><br><span class="line"><span class="comment"># 示例：将 feature/old 重命名为 feature/new</span></span><br><span class="line">git branch -m feature/old feature/new</span><br></pre></td></tr></table></figure></li><li><p>带分支名：创建新分支（但不会自动切换到新分支）。</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git branch feature-login  <span class="comment"># 创建名为 feature-login 的新分支</span></span><br></pre></td></tr></table></figure></li><li><p><code>-d</code> 参数：删除指定分支（删除前需确保该分支的修改已合并，否则用 <code>-D</code> 强制删除）。</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git branch -d old-branch  <span class="comment"># 删除 old-branch 分支</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="git-checkout"><a href="#git-checkout" class="headerlink" title="git checkout"></a><code>git checkout</code></h3><p>：“切换” 分支或 “恢复” 文件。</p><p><strong>作用</strong>：主要用于 “切换分支” 或 “恢复工作区文件”（Git 2.23+ 后推荐用 <code>git switch</code> 切换分支，功能更清晰，但 <code>checkout</code> 仍广泛使用）。</p><p>常用用法：</p><ul><li><p>切换到已存在的分支：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git checkout dev  <span class="comment"># 切换到 dev 分支</span></span><br></pre></td></tr></table></figure></li><li><p>创建并立即切换到新分支（相当于 <code>git branch 新分支名</code> + <code>git checkout 新分支名</code> 的简写）：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git checkout -b dev  <span class="comment"># 创建并切换到 dev 分支</span></span><br></pre></td></tr></table></figure></li><li><p>恢复工作区的某个文件到最近一次提交的状态（丢弃本地修改）：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git checkout -- README.md  <span class="comment"># 把 README.md 恢复到最近提交的版本</span></span><br></pre></td></tr></table></figure></li></ul><h1 id="GitHub中clone指定Commits"><a href="#GitHub中clone指定Commits" class="headerlink" title="GitHub中clone指定Commits"></a>GitHub中clone指定Commits</h1><p>（Github中怎么找回历史版本；GitHub历史版本恢复指南；GitHub中下载指定版本；Github查看项目的历史版本，并实现版本的回滚）</p><blockquote><p>假设：我想下载<a href="https://github.com/Kkkika/Kkkika.github.io">Kkkika&#x2F;Kkkika.github.io</a>仓库master分支的第一次提交</p></blockquote><p>首先进入仓库后，点击【Commits】<strong>获取历史版本的提交哈希值</strong></p><p><img src="/./../Github%E5%B8%B8%E7%94%A8/image-20250912102842935.png" alt="image-20250912102842935"></p><p>时间拉到最前，找到第一次提交，点击【复制】按钮</p><p><img src="/./../Github%E5%B8%B8%E7%94%A8/image-20250912103044962.png" alt="image-20250912103044962"></p><h3 id="克隆后创建新分支"><a href="#克隆后创建新分支" class="headerlink" title="克隆后创建新分支"></a>克隆后创建新分支</h3><p>如果你想在特定提交的基础上进行一些修改或实验，最好创建一个新分支。</p><p>新建一个文件夹来存放代码，注意路径不要有中文：</p><p>C:\Code\githubclone</p><p>然后打开cmd</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> C:\Code\githubclone</span><br></pre></td></tr></table></figure><ol><li><p><strong>克隆仓库并进入目录</strong></p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/Kkkika/Kkkika.github.io.git</span><br><span class="line"><span class="built_in">cd</span> Kkkika.github.io</span><br></pre></td></tr></table></figure></li><li><p><strong>基于特定提交创建并切换到一个新分支</strong>：这可以避免“分离头指针”状态。</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git branch my-new-branch cc09550ac7db24e987f6f2130da2ee1564191b12</span><br><span class="line">git checkout my-new-branch</span><br></pre></td></tr></table></figure><p>或者更简洁地用一条命令：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git checkout -b my-new-branch cc09550ac7db24e987f6f2130da2ee1564191b12</span><br></pre></td></tr></table></figure><p>这样，你就在一个名为 <code>my-new-branch</code> 的分支上工作，这个分支的起点就是你指定的那个提交。</p></li></ol><h3 id="浅克隆（如果只想快速获取）"><a href="#浅克隆（如果只想快速获取）" class="headerlink" title="浅克隆（如果只想快速获取）"></a>浅克隆（如果只想快速获取）</h3><p>如果你只关心最新的一部分提交，或者仓库很大想加快克隆速度，可以考虑浅克隆。</p><ol><li><p><strong>浅克隆仓库</strong>（例如只克隆最近 10 个提交）：</p><p>bash</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">clone</span> --depth 10 https://github.com/Kkkika/Kkkika.github.io.git</span><br><span class="line"><span class="built_in">cd</span> Kkkika.github.io</span><br></pre></td></tr></table></figure><p><code>--depth 10</code> 参数表示只克隆最近10次提交的历史。你需要确保你想要的提交（<code>cc09550...</code>）在这最近的10次提交之内。</p></li><li><p><strong>然后切换到你想要的提交</strong>：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git checkout cc09550ac7db24e987f6f2130da2ee1564191b12</span><br></pre></td></tr></table></figure></li></ol><h3 id="重要提示"><a href="#重要提示" class="headerlink" title="重要提示"></a>重要提示</h3><ul><li><strong>关于 <code>-b</code> 参数</strong>：<code>-b</code> 在 <code>git clone</code> 中用于指定分支或标签，不能直接用于提交哈希5。</li><li><strong>“分离头指针”状态</strong>：直接 <code>git checkout &lt;commit-hash&gt;</code> 会进入此状态。在此状态下进行更改并提交后，如果不创建分支指向这些新提交，它们可能会被 Git 的垃圾回收机制清除10。如果计划基于该提交进行修改，请务必创建新分支。</li><li><strong>获取正确的提交哈希</strong>：确保你复制的提交哈希是正确的且存在于远程仓库中。你可以通过 GitHub 网站的提交历史页面来查看和确认提交哈希。</li></ul><h3 id="如何选择方法？"><a href="#如何选择方法？" class="headerlink" title="如何选择方法？"></a>如何选择方法？</h3><p>为了更清晰地选择，可以参考下面的流程：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git checkout</span><br></pre></td></tr></table></figure><pre><code class="highlight mermaid">graph LR    A[需求：克隆特定提交] --&gt; B&#123;完整历史？&#125;    B -- 是 --&gt; C[克隆仓库&lt;br&gt;checkout 提交]    B -- 否 --&gt; D[浅克隆&lt;br&gt;checkout 提交]    C --&gt; E&#123;需修改？&#125;    D --&gt; F&#123;需修改？&#125;    E -- 是 --&gt; G[创建分支]    E -- 否 --&gt; H[分离头指针]    F -- 是 --&gt; G    F -- 否 --&gt; H</code></pre><h3 id="可能遇到的问题"><a href="#可能遇到的问题" class="headerlink" title="可能遇到的问题"></a>可能遇到的问题</h3><ol><li>网络问题<ol><li><img src="/./../Github%E5%B8%B8%E7%94%A8/image-20250919152150671.png" alt="image-20250919152150671"></li><li>关闭梯子</li><li>打开加速器</li></ol></li><li></li></ol><h1 id="Gitee"><a href="#Gitee" class="headerlink" title="Gitee"></a>Gitee</h1><h3 id="新建仓库"><a href="#新建仓库" class="headerlink" title="新建仓库"></a>新建仓库</h3><p><img src="/./../Github%E5%B8%B8%E7%94%A8/image-20250909092345765.png" alt="示例"></p><p>上传到仓库的文件夹需要命名为blog：</p><p><img src="/./../Github%E5%B8%B8%E7%94%A8/image-20250909092433077.png" alt="上传到仓库的文件夹"></p><h3 id="git推送"><a href="#git推送" class="headerlink" title="git推送"></a>git推送</h3><p>将本地内容首次推送到空的 Git 远程仓库，需按顺序执行以下命令流程。以下是完整操作步骤及注意事项：</p><ol><li><p><strong>初始化本地仓库</strong></p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git init</span><br></pre></td></tr></table></figure><ul><li>在项目根目录执行，生成隐藏的.git文件夹</li></ul></li><li><p><strong>添加文件并提交</strong></p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git add .              <span class="comment"># 添加所有文件到暂存区</span></span><br><span class="line">git commit -m <span class="string">&quot;Initial commit&quot;</span>  <span class="comment"># 提交到本地仓库</span></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git add .</span><br><span class="line">git commit -m <span class="string">&quot;Initial commit&quot;</span></span><br></pre></td></tr></table></figure><ul><li>必须至少有一次提交，否则推送会失败（Git 不允许推送空分支）。</li></ul></li><li><p><strong>关联远程仓库</strong></p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git remote add origin &lt;远程仓库URL&gt;</span><br></pre></td></tr></table></figure><ul><li><p>验证关联：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git remote -v</span><br></pre></td></tr></table></figure><p> 查看 URL 是否正确。</p></li></ul></li><li><p><strong>首次推送并设置上游分支</strong></p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git push -u origin master</span><br></pre></td></tr></table></figure><ul><li><p>分支名为 master</p></li><li><p>-u（或–set-upstream）参数：</p><ul><li><p>建立本地分支与远程分支的追踪关系。</p></li><li><p>后续推送只需</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git add .</span><br><span class="line">git commit -m <span class="string">&quot;写上描述&quot;</span></span><br><span class="line">git push</span><br></pre></td></tr></table></figure><p> 无需指定分支。</p></li></ul></li></ul></li></ol><h4 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h4><p>在任何IDE的终端或者cmd中运行命令行都可以</p><p>在Cursor中打开终端：</p><p><img src="/./../Github%E5%B8%B8%E7%94%A8/image-20250909093433821.png" alt="在Cursor中打开终端"></p><p>确保路径最后的文件夹和仓库同名：</p><p><img src="/./../Github%E5%B8%B8%E7%94%A8/image-20250909093610035.png" alt="仓库名是blog文件夹名是blog"></p><p>所有用到的命令：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git init</span><br><span class="line">git add .</span><br><span class="line">git commit -m <span class="string">&quot;Initial commit&quot;</span></span><br><span class="line">git remote add origin https://gitee.com/kika00/blog.git</span><br><span class="line">git remote -v</span><br><span class="line">git push -u origin master</span><br></pre></td></tr></table></figure><p>成功推送：</p><p><img src="/./../Github%E5%B8%B8%E7%94%A8/image-20250909102559411.png" alt="成功推送"></p><p>后续推送用到的三个命令：</p><p><img src="/./../Github%E5%B8%B8%E7%94%A8/image-20250910091241450.png" alt="改完 → git add -A → git commit -m &quot;说人话&quot; → git push"></p>]]></content>
      
      
      <categories>
          
          <category> 常用命令 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Github </tag>
            
            <tag> Gitee </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>pic</title>
      <link href="/2025/04/11/pic/"/>
      <url>/2025/04/11/pic/</url>
      
        <content type="html"><![CDATA[<p>文章路径：C:\Code\KikaBlog\blog\source_posts</p><p>（疑问：为什么source和_posts之间的斜杠显示的时候会被隐藏？）</p><h2 id="1-【-】"><a href="#1-【-】" class="headerlink" title="1 【.&#x2F;】"></a>1 【.&#x2F;】</h2><p>【typora可 博客不可】</p><p>实际路径在C:\Code\KikaBlog\blog\source_posts</p><p><img src="/./test1.png" alt=".&#x2F;test1.png"></p><p>但是如果我复制图片到C:\Code\KikaBlog\blog\source的时候，博客上就可以正常显示，而图片路径还是.&#x2F;</p><p><img src="/./../pic/test1-2.png" alt=".&#x2F;..&#x2F;pic&#x2F;test1-2.png"></p><p>也就是说把图片放在C:\Code\KikaBlog\blog\source上用路径.&#x2F;和.&#x2F;..&#x2F;是等价的；还有就是_posts文件夹是进不去的，这个文件夹只能放.md</p><h2 id="2【-】"><a href="#2【-】" class="headerlink" title="2【.&#x2F;..&#x2F;】"></a>2【.&#x2F;..&#x2F;】</h2><p>【都可！typora可 博客可】</p><p>实际路径在C:\Code\KikaBlog\blog\source</p><p><img src="/./../test2.png" alt=".&#x2F;..&#x2F;test2.png"></p><p>缺点：图片文件挤在同一个文件夹，不方便管理</p><h2 id="3【-filename-】"><a href="#3【-filename-】" class="headerlink" title="3【.&#x2F;${filename}】"></a>3【.&#x2F;${filename}】</h2><p>【typora可 博客不可】</p><p>实际路径在C:\Code\KikaBlog\blog\source_posts\pic</p><p><img src="/./pic/test3.png" alt=".&#x2F;pic&#x2F;test3.png"></p><p>为什么不行？这样管理分类最有秩序了，在_posts中搜索文章名，还可以直接搜到文章存放图片的文件夹。啊啊啊啊</p><h2 id="4【-filename-】"><a href="#4【-filename-】" class="headerlink" title="4【.&#x2F;..&#x2F;${filename}】"></a>4【.&#x2F;..&#x2F;${filename}】</h2><p>【都可！typora可 博客可】</p><p>实际路径在C:\Code\KikaBlog\blog\source\pic</p><p><img src="/./../pic/test4.png" alt=".&#x2F;..&#x2F;pic&#x2F;test4.png"></p><h2 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h2><p>第2种和第4种在Typora写文章时可以看到图片，并且GitHub搭建的博客网站上也能正常显示图片。</p><p>第2种是把图片统一放在博客文件夹下的source里；</p><p>第4种则在source文件夹中创建一个与文章名同名的文件夹存放图片，个人更喜欢第4种存放方式。</p>]]></content>
      
      
      <categories>
          
          <category> blog </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Hexo搭建Butterfly主题记录</title>
      <link href="/2024/09/04/Hexo%E6%90%AD%E5%BB%BAButterfly%E4%B8%BB%E9%A2%98%E8%AE%B0%E5%BD%95/"/>
      <url>/2024/09/04/Hexo%E6%90%AD%E5%BB%BAButterfly%E4%B8%BB%E9%A2%98%E8%AE%B0%E5%BD%95/</url>
      
        <content type="html"><![CDATA[<h2 id="Hexo常用命令"><a href="#Hexo常用命令" class="headerlink" title="Hexo常用命令"></a>Hexo常用命令</h2><p>生成主题静态文件：</p><p>等价于hexo generate</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo g</span><br></pre></td></tr></table></figure><p>启动本地服务：</p><p>等价于hexo server</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo s</span><br></pre></td></tr></table></figure><p>在博客根目录下执行以下命令，创建一篇新文章：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo new <span class="string">&quot;我的第一篇文章&quot;</span></span><br></pre></td></tr></table></figure><p>部署到GitHub：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo d</span><br></pre></td></tr></table></figure><p>清除缓存</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo clean</span><br></pre></td></tr></table></figure><h2 id="美化-常用链接"><a href="#美化-常用链接" class="headerlink" title="美化-常用链接"></a>美化-常用链接</h2><p>图标：</p><p><a href="https://fontawesome.com/v6/icons?o=r#packs">Version 6 Icons | Font Awesome</a></p><p>注意：<em>带pro的是付费版</em></p><h2 id="美化-需要下载插件的"><a href="#美化-需要下载插件的" class="headerlink" title="美化-需要下载插件的"></a>美化-需要下载插件的</h2><h3 id="本地搜索"><a href="#本地搜索" class="headerlink" title="本地搜索"></a>本地搜索</h3><p>1.安装搜索插件</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install hexo-generator-search --save</span><br></pre></td></tr></table></figure><p>2.配置_config.yml</p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment">#本地搜索开启</span></span><br><span class="line"><span class="attr">search:</span></span><br><span class="line">  <span class="attr">path:</span> <span class="string">search.xml</span></span><br><span class="line">  <span class="attr">field:</span> <span class="string">post</span></span><br><span class="line">  <span class="attr">content:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><p>3.主题配置文件 _config.butterfly.yml：</p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">local_search:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">labels:</span></span><br><span class="line">    <span class="attr">input_placeholder:</span> <span class="string">Search</span> <span class="string">for</span> <span class="string">Posts</span></span><br><span class="line">    <span class="attr">hits_empty:</span> <span class="string">&quot;We didn&#x27;t find any results for the search: $&#123;query&#125;&quot;</span> <span class="comment"># 如果没有查到内容相关内容显示</span></span><br></pre></td></tr></table></figure><h3 id="字数统计"><a href="#字数统计" class="headerlink" title="字数统计"></a>字数统计</h3><p>安装插件：在你的博客根目录，打开 cmd 命令窗口执行 npm install hexo-wordcount –save。<br>开启配置：修改主题配置文件_config.butterfly.yml 中的 wordcount。</p><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">wordcount:</span><br><span class="line">  enable: true</span><br><span class="line">  post<span class="emphasis">_wordcount: true</span></span><br><span class="line"><span class="emphasis">  min2read: true</span></span><br><span class="line"><span class="emphasis">  total_</span>wordcount: true</span><br></pre></td></tr></table></figure><h3 id="统计访问人数-UV-和-PV"><a href="#统计访问人数-UV-和-PV" class="headerlink" title="统计访问人数 (UV 和 PV)"></a>统计访问人数 (UV 和 PV)</h3><p>详细信息请查看 <a href="https://busuanzi.ibruce.info/">busuanzi 官方网站</a>。</p><p>Butterfly很贴心地集成了不蒜子计数工具，可以统计网站的访问数据（人数，次数等）。只需要修改主题配置文件即可开启。</p><p>修改主题配置文件_config.butterfly.yml。</p><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">busuanzi:</span><br><span class="line">  site<span class="emphasis">_uv: true  # 本站总访客数</span></span><br><span class="line"><span class="emphasis">  site_</span>pv: true  # 本站总访问量 </span><br><span class="line">  page<span class="emphasis">_pv: true  # 本文总阅读量</span></span><br></pre></td></tr></table></figure><h2 id="美化-文章"><a href="#美化-文章" class="headerlink" title="美化-文章"></a>美化-文章</h2><h3 id="写文参数可选"><a href="#写文参数可选" class="headerlink" title="写文参数可选"></a>写文参数可选</h3><blockquote><p>（可为特定的文章配置）在文章md文件的头部设置</p></blockquote><p>主题会优先判断文章 Markdown 的 Front-matter 是否有配置，如有，则以 Front-matter 的配置为准。否则，以主题配置文件中的配置为准。</p><table><thead><tr><th>参数</th><th>解释</th><th>可取</th></tr></thead><tbody><tr><td>copyright</td><td>文章版权模块(默认为设置中 post_copyright 的 enable 配置)</td><td>true &#x2F; false</td></tr><tr><td>copyright_author</td><td>文章版权模块的<code>文章作者</code></td><td></td></tr><tr><td>copyright_author_href</td><td>文章版权模块的<code>文章作者</code>链接</td><td></td></tr><tr><td>copyright_url</td><td>文章版权模块的<code>文章链接</code></td><td></td></tr><tr><td>copyright_info</td><td>文章版权模块的<code>版权声明</code>文字</td><td></td></tr><tr><td>noticeOutdate</td><td>文章过期提醒 (默认为设置中 noticeOutdate 的 enable 配置)</td><td></td></tr><tr><td>toc</td><td>是否显示 TOC目录(默认为设置中 toc 的 enable 配置)</td><td>true &#x2F; false</td></tr><tr><td>toc_number</td><td>是否目录自动编号(默认为设置中 toc 的 number 配置)</td><td>true &#x2F; false</td></tr><tr><td>toc_style_simple</td><td>显示 toc 简洁模式(侧边栏只剩下toc)</td><td>true &#x2F; false</td></tr><tr><td>comments</td><td>显示页面评论模块</td><td>默认true</td></tr><tr><td>aside</td><td>显示侧边栏</td><td>默认true</td></tr><tr><td>cover</td><td>封面&#x2F;缩略图(如果没有设置 top_img,文章页顶部将显示缩略图)</td><td>false&#x2F;图片地址&#x2F;留空</td></tr><tr><td>top_img</td><td>页面顶部图片</td><td></td></tr><tr><td>description</td><td>页面描述</td><td></td></tr><tr><td>keywords</td><td>页面关键字</td><td></td></tr><tr><td>aplayer</td><td>在需要的页面加载 aplayer 的 js 和 css,请参考文章下面的<code>音乐</code>配置</td><td></td></tr><tr><td>random</td><td>配置友情链接是否随机排序</td><td>默认为 false</td></tr></tbody></table><h3 id="hexo上传查看不了图片（已解决）"><a href="#hexo上传查看不了图片（已解决）" class="headerlink" title="hexo上传查看不了图片（已解决）"></a>hexo上传查看不了图片（已解决）</h3><p>解决的痛点：markdown写文章可以直接粘本地图片，并上传到github时hexo的博客也能正常显示。避免开启post_asset_folder文件资源夹，这样只有有图片的博文会新建文件夹来存储博文的图片 。不用下载任何img插件，网上很多人的解决方法都说要安装如hexo-asset-img插件，完全不必。</p><p>KEYWORDS：如何在Hexo博客中插入本地图片；如何在Hexo博客中插入图片；Hexo搭建butterfly博客中图片无法显示</p><p><strong>解决方法</strong></p><p>解决的核心：在Typora粘图时设置图像粘到指定路径:</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">./../</span><br></pre></td></tr></table></figure><p>这样图片会直接存放在<strong>source</strong>文件夹下，如下面三张图：</p><p><img src="/./../Hexo%E6%90%AD%E5%BB%BAButterfly%E4%B8%BB%E9%A2%98%E8%AE%B0%E5%BD%95/image-20250413144513945.png"></p><p>但是这样所有图片都存在source文件夹，不方便查找和管理，所以</p><p>我更喜欢用如下路径：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">./../$&#123;filename&#125;</span><br></pre></td></tr></table></figure><p>操作：Typora菜单栏的【文件】，打开【偏好设置】，点击【图像】</p><p><img src="/./../Hexo%E6%90%AD%E5%BB%BAButterfly%E4%B8%BB%E9%A2%98%E8%AE%B0%E5%BD%95/image-20250413144119948.png" alt="Typora设置"></p><p>解决过程参考<a href="https://kkkika.github.io/2025/04/11/pic/">pic</a>文章</p><h3 id="md功能展示"><a href="#md功能展示" class="headerlink" title="md功能展示"></a>md功能展示</h3><blockquote><p>markdown不熟悉的功能效果展示</p></blockquote><p>正常          加粗**          <em>斜体</em>          <u>下划线</u>          <code>代码</code></p><p>$内联公式$          <del>删除线</del>          &#x3D;&#x3D;高亮&#x3D;&#x3D;          <!--注释--></p><p>公式块：<br>$$<br>x<br>$$<br>警告框之</p><blockquote><p>[!NOTE]</p><p>提醒内容</p></blockquote><blockquote><p>[!TIP]</p><p>建议内容</p></blockquote><blockquote><p>[!IMPORTANT]</p><p>重要内容</p></blockquote><blockquote><p>[!WARNING]</p><p>警告内容</p></blockquote><blockquote><p>[!CAUTION]</p><p>注意内容</p></blockquote><blockquote><p>引用</p></blockquote><hr><h3 id="hideToggle可折叠内容"><a href="#hideToggle可折叠内容" class="headerlink" title="hideToggle可折叠内容"></a>hideToggle可折叠内容</h3><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">&#123;% hideToggle 我是标题，点击可展开%&#125;</span><br><span class="line">这是折叠的内容/隐藏的内容</span><br><span class="line">（可以加代码块）</span><br><span class="line">&#123;% endhideToggle %&#125;</span><br></pre></td></tr></table></figure><details class="toggle" ><summary class="toggle-button" style="">我是标题，点击可展开</summary><div class="toggle-content"><p>这是折叠的内容&#x2F;隐藏的内容</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">sql</span>代码</span><br></pre></td></tr></table></figure></div></details><hr><h3 id="tabs分栏选项卡"><a href="#tabs分栏选项卡" class="headerlink" title="tabs分栏选项卡"></a>tabs分栏选项卡</h3><h4 id="使用语法"><a href="#使用语法" class="headerlink" title="使用语法"></a>使用语法</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;% tabs 唯一名字, [默认索引] %&#125;</span><br><span class="line"></span><br><span class="line">&lt;!-- tab 标题1 @icon --&gt;</span><br><span class="line">内容 1</span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- tab 标题2 --&gt;</span><br><span class="line">内容 2</span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line"></span><br><span class="line">&#123;% endtabs %&#125;</span><br></pre></td></tr></table></figure><ul><li><p>唯一名字：给这组 tabs 当 HTML id 用，不能重复。</p></li><li><p>默认索引：默认 1 ；写 <code>-1</code> 表示默认全部收起。</p></li><li><p><code>@icon</code> 选填，FontAwesome 全类名，中间有无空格都行。</p></li><li><table><thead><tr><th align="left">写法</th><th align="left">页签最终显示</th></tr></thead><tbody><tr><td align="left"><code>&lt;!-- tab --&gt;</code></td><td align="left">唯一名字-1</td></tr><tr><td align="left"><code>&lt;!-- tab @fas fa-apple --&gt;</code></td><td align="left">仅图标</td></tr><tr><td align="left"><code>&lt;!-- tab macOS --&gt;</code></td><td align="left">macOS</td></tr><tr><td align="left"><code>&lt;!-- tab macOS @fas fa-apple --&gt;</code></td><td align="left">macOS加图标</td></tr></tbody></table></li></ul><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">&#123;% tabs test1 %&#125;</span><br><span class="line"></span><br><span class="line">&lt;!-- tab --&gt;</span><br><span class="line"></span><br><span class="line"><span class="strong">**This is Tab 1.**</span></span><br><span class="line"></span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- tab macOS --&gt;</span><br><span class="line"></span><br><span class="line"><span class="strong">**This is Tab 2.**</span></span><br><span class="line"></span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- tab macOS @fas fa-apple--&gt;</span><br><span class="line"></span><br><span class="line"><span class="strong">**This is Tab 3.**</span></span><br><span class="line"></span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line"></span><br><span class="line">&#123;% endtabs %&#125;</span><br></pre></td></tr></table></figure><p>效果如下：</p><div class="tabs"><div class="nav-tabs"><button type="button" class="tab active">test1 1</button><button type="button" class="tab">macOS</button><button type="button" class="tab"><i class="fas fa-apple"></i>macOS</button></div><div class="tab-contents"><div class="tab-item-content active"><p><strong>This is Tab 1.</strong></p></div><div class="tab-item-content"><p><strong>This is Tab 2.</strong></p></div><div class="tab-item-content"><p><strong>This is Tab 3.</strong></p></div></div><div class="tab-to-top"><button type="button" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div><hr><p>【未解决】</p><p>我希望选项卡在Typora写文章也可以实现同步渲染，在 Typora 编辑模式中使用类似 Hexo-Next 主题的选项卡（Tabs）功能</p><p>下载Typora插件</p><p><a href="https://github.com/obgnail/typora_plugin">obgnail&#x2F;typora_plugin: Typora plugin. Feature enhancement tool | Typora 插件，功能增强工具</a></p><p><a href="https://www.cnblogs.com/PeterJXL/p/18350073">打造个性化Typora写作体验的必备插件 - peterjxl - 博客园</a></p><hr><h3 id="Label颜色高亮"><a href="#Label颜色高亮" class="headerlink" title="Label颜色高亮"></a>Label颜色高亮</h3><blockquote><p>我觉得好像用处不大，对我来说</p></blockquote><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">&#123;% label 文本 颜色 %&#125;</span><br></pre></td></tr></table></figure><p>两个参数，颜色默认值是灰色。</p><p>示例：</p><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">臣亮言：&#123;% label 先帝 %&#125;创业未半，而&#123;% label 中道崩殂 blue %&#125;。今天下三分，&#123;% label 益州疲敝 pink %&#125;，此诚&#123;% label 危急存亡之秋 red %&#125;也！然侍衞之臣，不懈于内；&#123;% label 忠志之士 purple %&#125;，忘身于外者，盖追先帝之殊遇，欲报之于陛下也。诚宜开张圣听，以光先帝遗德，恢弘志士之气；不宜妄自菲薄，引喻失义，以塞忠谏之路也。</span><br><span class="line">宫中、府中，俱为一体；陟罚臧否，不宜异同。若有&#123;% label 作奸 orange %&#125;、&#123;% label 犯科 green %&#125;，及为忠善者，宜付有司，论其刑赏，以昭陛下平明之治；不宜偏私，使内外异法也。</span><br></pre></td></tr></table></figure><p>臣亮言：<mark class="hl-label default">先帝</mark>创业未半，而<mark class="hl-label blue">中道崩殂</mark>。今天下三分，<mark class="hl-label pink">益州疲敝</mark>，此诚<mark class="hl-label red">危急存亡之秋</mark>也！然侍衞之臣，不懈于内；<mark class="hl-label purple">忠志之士</mark>，忘身于外者，盖追先帝之殊遇，欲报之于陛下也。诚宜开张圣听，以光先帝遗德，恢弘志士之气；不宜妄自菲薄，引喻失义，以塞忠谏之路也。<br>宫中、府中，俱为一体；陟罚臧否，不宜异同。若有<mark class="hl-label orange">作奸</mark>、<mark class="hl-label green">犯科</mark>，及为忠善者，宜付有司，论其刑赏，以昭陛下平明之治；不宜偏私，使内外异法也。</p><h3 id="代码换行设置异常（已解决）"><a href="#代码换行设置异常（已解决）" class="headerlink" title="代码换行设置异常（已解决）"></a>代码换行设置异常（已解决）</h3><p>实现代码块自动换行：</p><p>在_config.butterfly.yml配置文件中可以配置如下功能</p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">code_word_wrap:</span> <span class="literal">true</span> <span class="comment">#代码自动换行，关闭滚动条</span></span><br></pre></td></tr></table></figure><p>同时将站点配置文件_config.yml的highlight设置为false</p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">highlight:</span></span><br><span class="line">  <span class="attr">line_number:</span> <span class="literal">false</span></span><br></pre></td></tr></table></figure><p>但是出现了如下异常：</p><p><img src="/./../Hexo%E6%90%AD%E5%BB%BAButterfly%E4%B8%BB%E9%A2%98%E8%AE%B0%E5%BD%95/image-20250911172343525.png" alt="数字异常叠加"></p><p>当 word_wrap 启用但 Hexo 的 highlight.line_number 为 false 时，不再通过伪元素渲染行号，避免换行时前置数字异常叠加</p><p>解决方法：</p><p>将 themes&#x2F;butterfly&#x2F;source&#x2F;css&#x2F;_highlight&#x2F;highlight&#x2F;index.styl 中自动生成行号的逻辑，改为Hexo 配置 highlight.line_number: false 时不显示：</p><p>C:\Code\KikaBlog\blog\themes\butterfly\source\css_highlight\highlight\index.styl</p><figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.container</span></span><br><span class="line">  <span class="selector-tag">figure</span><span class="selector-class">.highlight</span></span><br><span class="line">    <span class="selector-class">.line</span></span><br><span class="line">      <span class="keyword">if</span> wordWrap &amp;&amp; <span class="variable">$highlight_line_numb</span></span><br><span class="line">        <span class="selector-pseudo">&amp;:before</span></span><br><span class="line">          <span class="attribute">display</span>: inline-block</span><br><span class="line">          <span class="attribute">padding</span>: <span class="number">0</span> <span class="number">6px</span> <span class="number">0</span> <span class="number">0</span></span><br><span class="line">          <span class="attribute">min-width</span>: <span class="number">30px</span></span><br><span class="line">          <span class="attribute">color</span>: <span class="built_in">var</span>(--hlnumber-color)</span><br><span class="line">          <span class="attribute">content</span>: <span class="built_in">counter</span>(line)</span><br><span class="line">          <span class="attribute">counter-increment</span>: line</span><br><span class="line">          <span class="attribute">text-align</span>: left</span><br></pre></td></tr></table></figure><p>将if wordWrap改为if wordWrap &amp;&amp; $highlight_line_numb。</p><p>刷新之后又没问题了，我不懂。。</p><p>最后是这样的：</p><p><img src="/./../Hexo%E6%90%AD%E5%BB%BAButterfly%E4%B8%BB%E9%A2%98%E8%AE%B0%E5%BD%95/image-20250912100954585.png" alt="image-20250912100954585"></p><p>可以正常换行了，但是我认为字体不好看，进行调整：</p><p>C:\Code\KikaBlog\blog\themes\butterfly\source\css_highlight\highlight\index.styl</p><p>if wordWrap就不动了，然后调整参数</p><figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.container</span></span><br><span class="line">  <span class="selector-tag">figure</span><span class="selector-class">.highlight</span></span><br><span class="line">    <span class="selector-class">.line</span></span><br><span class="line">      <span class="keyword">if</span> wordWrap</span><br><span class="line">        <span class="selector-pseudo">&amp;:before</span></span><br><span class="line">          <span class="attribute">display</span>: inline-block</span><br><span class="line">          <span class="attribute">color</span>: <span class="built_in">var</span>(--hlnumber-color)</span><br><span class="line">          <span class="attribute">content</span>: <span class="built_in">counter</span>(line)</span><br><span class="line">          <span class="attribute">counter-increment</span>: line</span><br><span class="line">          <span class="attribute">padding</span>: <span class="number">0</span> <span class="number">20px</span> <span class="number">0</span> <span class="number">0</span></span><br><span class="line">          <span class="attribute">text-align</span>: right</span><br><span class="line">          <span class="attribute">min-width</span>: <span class="number">15px</span></span><br><span class="line">          <span class="attribute">font-family</span>: <span class="string">&quot;Consolas&quot;</span> <span class="meta">!important</span></span><br></pre></td></tr></table></figure><p>其中有这些参数是修改或增加的：</p><figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line"><span class="attribute">padding</span>: <span class="number">0</span> <span class="number">20px</span> <span class="number">0</span> <span class="number">0</span></span><br><span class="line"><span class="attribute">text-align</span>: right</span><br><span class="line"><span class="attribute">min-width</span>: <span class="number">15px</span></span><br><span class="line"><span class="attribute">font-family</span>: <span class="string">&quot;Consolas&quot;</span> <span class="meta">!important</span></span><br></pre></td></tr></table></figure><p>效果调整成.gutter pre的样子：</p><p><img src="/./../Hexo%E6%90%AD%E5%BB%BAButterfly%E4%B8%BB%E9%A2%98%E8%AE%B0%E5%BD%95/image-20250912100602774.png" alt="跟上次上传的样式对比"></p><h2 id="美化-首页"><a href="#美化-首页" class="headerlink" title="美化-首页"></a>美化-首页</h2><h3 id="右侧悬浮栏"><a href="#右侧悬浮栏" class="headerlink" title="右侧悬浮栏"></a>右侧悬浮栏</h3><h4 id="悬浮栏按钮"><a href="#悬浮栏按钮" class="headerlink" title="悬浮栏按钮"></a>悬浮栏按钮</h4><p>_config.butterfly.yml</p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Choose: readmode,translate,darkmode,hideAside,toc,chat,comment</span></span><br><span class="line"><span class="comment"># Don&#x27;t repeat the same value</span></span><br><span class="line"><span class="attr">rightside_item_order:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="comment"># Default: readmode,translate,darkmode,hideAside</span></span><br><span class="line">  <span class="attr">hide:</span> <span class="string">readmode,hideAside</span></span><br><span class="line">  <span class="comment"># Default: toc,chat,comment</span></span><br><span class="line">  <span class="attr">show:</span> <span class="string">translate,darkmode,toc,chat,comment</span></span><br></pre></td></tr></table></figure><ul><li><p>可选：阅读模式，简繁转换，日夜切换，单栏和双栏切换，目录，聊天，评论</p></li><li><p>在 hide 里：按钮只在点开齿轮后出现（收纳&#x2F;隐藏到设置面板）。</p></li><li><p>在 show 里：按钮一直固定悬浮显示在右侧。</p></li><li><p>不要重复：同一个键不要同时放在 hide 和 show。</p></li></ul><h4 id="悬浮栏显示"><a href="#悬浮栏显示" class="headerlink" title="悬浮栏显示"></a>悬浮栏显示</h4><p>顶部时保持显示、向下滚动隐藏、向上滚动显示</p><ul><li>导航栏是顶部时保持显示、向下滚动隐藏、向上滚动显示，帮我把右侧悬浮栏也改为这样的形式</li></ul><p>Agent变更点：</p><ul><li>更新 themes&#x2F;butterfly&#x2F;source&#x2F;js&#x2F;main.js 中滚动处理逻辑：向下滚动时移除 rightside-show 以隐藏悬浮栏，向上滚动时添加 rightside-show 以显示，与导航栏一致。</li><li>把右侧悬浮栏在页面初始就显示，并在滚动到顶部时保持显示；当向下滚动时隐藏，向上滚动时显示。我会更新滚动分支中的 else 逻辑，并在刷新初始化时立即显示 #rightside。</li><li>themes&#x2F;butterfly&#x2F;source&#x2F;js&#x2F;main.js：在注册滚动监听后立刻调用一次 scrollTask()</li></ul><h3 id="butterfly主题文章顶部大图"><a href="#butterfly主题文章顶部大图" class="headerlink" title="butterfly主题文章顶部大图"></a>butterfly主题文章顶部大图</h3><p><a href="https://blog.captainz.cc/posts/hexo_butterfly_top_img.html">Hexo+Butterfly 主题一图流背景与顶部图修改 | Hyper Tech</a></p><p><a href="https://blog.csdn.net/weixin_74811095/article/details/147954567">butterfly主题魔改02：主题颜色、宽度设置、图片设置、遮罩效果_butterfly宽度-CSDN博客</a></p><h2 id="小美化"><a href="#小美化" class="headerlink" title="小美化"></a>小美化</h2><h4 id="文章图片大小限制"><a href="#文章图片大小限制" class="headerlink" title="文章图片大小限制"></a>文章图片大小限制</h4><blockquote><p>限制最大高度为250px</p><p>宽度改为auto</p><p>然后发现图片会过宽，就再加上限制最大宽度为720px</p></blockquote><p>C:\Code\KikaBlog\blog\themes\butterfly\source\css_layout\post.styl</p><figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">img</span></span><br><span class="line">  <span class="attribute">display</span>: block</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">0</span> auto <span class="number">20px</span></span><br><span class="line">  <span class="attribute">max-height</span>: <span class="number">250px</span></span><br><span class="line">  <span class="attribute">max-width</span>: <span class="number">720px</span></span><br><span class="line">  <span class="attribute">width</span>: auto </span><br><span class="line">  <span class="attribute">transition</span>: filter <span class="number">375ms</span> ease-in .<span class="number">2s</span></span><br><span class="line">  <span class="built_in">addBorderRadius</span>()</span><br></pre></td></tr></table></figure><h4 id="文章底部标签颜色修改"><a href="#文章底部标签颜色修改" class="headerlink" title="文章底部标签颜色修改"></a>文章底部标签颜色修改</h4><p>C:\Code\KikaBlog\blog\themes\butterfly\source\css_layout\post.styl</p><p>将$light-blue改了</p><figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line"><span class="selector-id">#post</span></span><br><span class="line">  <span class="selector-class">.tag_share</span></span><br><span class="line">    <span class="selector-pseudo">&amp;:after</span></span><br><span class="line">      <span class="attribute">display</span>: block</span><br><span class="line">      <span class="attribute">clear</span>: both</span><br><span class="line">      <span class="attribute">content</span>: <span class="string">&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="selector-class">.post-meta</span></span><br><span class="line">      &amp;__tag-list</span><br><span class="line">        <span class="attribute">display</span>: inline-block</span><br><span class="line"></span><br><span class="line">      &amp;__tags</span><br><span class="line">        <span class="attribute">display</span>: inline-block</span><br><span class="line">        <span class="attribute">margin</span>: <span class="number">8px</span> <span class="number">8px</span> <span class="number">8px</span> <span class="number">0</span></span><br><span class="line">        <span class="attribute">padding</span>: <span class="number">0</span> <span class="number">12px</span></span><br><span class="line">        <span class="attribute">width</span>: fit-content</span><br><span class="line">        <span class="attribute">border</span>: <span class="number">2px</span> solid <span class="variable">$light</span>-blue</span><br><span class="line">        <span class="attribute">border-radius</span>: <span class="number">12px</span></span><br><span class="line">        <span class="attribute">color</span>: <span class="variable">$light</span>-blue</span><br><span class="line">        <span class="attribute">font-size</span>: .<span class="number">85em</span></span><br><span class="line">        <span class="attribute">transition</span>: all .<span class="number">2s</span> ease-in-out</span><br></pre></td></tr></table></figure><p><img src="/./../Hexo%E6%90%AD%E5%BB%BAButterfly%E4%B8%BB%E9%A2%98%E8%AE%B0%E5%BD%95/image-20250909152952527.png" alt="文章底部标签颜色"></p><h4 id="文章页头部的背景设置为透明"><a href="#文章页头部的背景设置为透明" class="headerlink" title="文章页头部的背景设置为透明"></a>文章页头部的背景设置为透明</h4><p>C:\Code\KikaBlog\blog\themes\butterfly\source\css_layout\head.styl</p><p>增加<code>background: transparent !important</code>将文章页头部 .post-bg 的背景强制设为透明，避免使用封面图作为背景</p><figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line"><span class="comment">// post</span></span><br><span class="line">&amp;<span class="selector-class">.post-bg</span></span><br><span class="line">  <span class="attribute">height</span>: <span class="number">400px</span></span><br><span class="line">  <span class="attribute">background</span>: transparent <span class="meta">!important</span></span><br></pre></td></tr></table></figure><p>还要开启页头遮罩</p><p>_config.butterfly.yml</p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Add a mask to the header and footer # 页头页脚添加遮罩</span></span><br><span class="line"><span class="attr">mask:</span></span><br><span class="line">  <span class="attr">header:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><p>效果：</p><p><img src="/./../Hexo%E6%90%AD%E5%BB%BAButterfly%E4%B8%BB%E9%A2%98%E8%AE%B0%E5%BD%95/image-20250911112109190.png" alt="文章页头部的背景"></p><hr><h4 id="半透明背景"><a href="#半透明背景" class="headerlink" title="半透明背景"></a>半透明背景</h4><p>效果：</p><p><img src="/./../Hexo%E6%90%AD%E5%BB%BAButterfly%E4%B8%BB%E9%A2%98%E8%AE%B0%E5%BD%95/image-20250910171746704.png" alt="修改后"></p><p>修改前：</p><p><img src="/./../Hexo%E6%90%AD%E5%BB%BAButterfly%E4%B8%BB%E9%A2%98%E8%AE%B0%E5%BD%95/image-20250910172011461.png" alt="修改前"></p><p>增加如下代码：</p><p>C:\Code\KikaBlog\blog\themes\butterfly\source\css_layout\post.styl</p><figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 浅色模式：文章阅读区域背景改为半透明</span></span><br><span class="line"><span class="comment">// 仅在非暗色主题时生效，避免影响暗色模式视觉</span></span><br><span class="line"><span class="selector-tag">html</span><span class="selector-pseudo">:not</span>(<span class="selector-attr">[data-theme=<span class="string">&#x27;dark&#x27;</span>]</span>) <span class="selector-id">#post</span></span><br><span class="line">  <span class="attribute">background</span>: <span class="built_in">rgba</span>(<span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, .<span class="number">94</span>)</span><br></pre></td></tr></table></figure><p>C:\Code\KikaBlog\blog\themes\butterfly\source\css_layout\aside.styl</p><figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 浅色模式：侧栏所有卡片统一半透明背景</span></span><br><span class="line"><span class="comment">// 说明：匹配包含 .card-widget 的全部卡片类型（recent-post/announcement/info 等）</span></span><br><span class="line"><span class="selector-tag">html</span><span class="selector-pseudo">:not</span>(<span class="selector-attr">[data-theme=<span class="string">&#x27;dark&#x27;</span>]</span>) <span class="selector-id">#aside-content</span> <span class="selector-class">.card-widget</span></span><br><span class="line">  <span class="attribute">background</span>: <span class="built_in">rgba</span>(<span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, .<span class="number">94</span>)</span><br></pre></td></tr></table></figure><p>C:\Code\KikaBlog\blog\themes\butterfly\source\css_page\homepage.styl</p><figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 浅色模式：侧栏所有卡片统一半透明背景</span></span><br><span class="line"><span class="selector-tag">html</span><span class="selector-pseudo">:not</span>(<span class="selector-attr">[data-theme=<span class="string">&#x27;dark&#x27;</span>]</span>) <span class="selector-id">#recent-posts</span> <span class="selector-class">.recent-post-item</span></span><br><span class="line">  <span class="attribute">background</span>: <span class="built_in">rgba</span>(<span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, .<span class="number">94</span>)</span><br></pre></td></tr></table></figure><p><img src="/./../Hexo%E6%90%AD%E5%BB%BAButterfly%E4%B8%BB%E9%A2%98%E8%AE%B0%E5%BD%95/image-20250911094012471.png" alt="代码"></p><hr><h4 id="mark-bg参数"><a href="#mark-bg参数" class="headerlink" title="mark-bg参数"></a>mark-bg参数</h4><p>C:\Code\KikaBlog\blog\themes\butterfly\source\css_global\index.styl</p><figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line"><span class="attr">--mark-bg</span>: <span class="built_in">alpha</span>(<span class="variable">$dark</span>-black, .<span class="number">13</span>)</span><br></pre></td></tr></table></figure><p>C:\Code\KikaBlog\blog\themes\butterfly\source\css_mode\darkmode.styl</p><figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line"><span class="attr">--mark-bg</span>: <span class="built_in">alpha</span>(<span class="variable">$dark</span>-black, .<span class="number">24</span>)</span><br></pre></td></tr></table></figure><p>浅色主题.3效果：</p><p><img src="/./../Hexo%E6%90%AD%E5%BB%BAButterfly%E4%B8%BB%E9%A2%98%E8%AE%B0%E5%BD%95/image-20250911161632715.png" alt="浅色主题.3效果"></p><p>浅色主题.13效果：</p><p><img src="/./../Hexo%E6%90%AD%E5%BB%BAButterfly%E4%B8%BB%E9%A2%98%E8%AE%B0%E5%BD%95/image-20250911142312799.png" alt="浅色主题.13效果"></p><p>深色主题.6效果：</p><p><img src="/./../Hexo%E6%90%AD%E5%BB%BAButterfly%E4%B8%BB%E9%A2%98%E8%AE%B0%E5%BD%95/image-20250911161839729.png" alt="深色主题.6效果"></p><p>深色主题.24效果：</p><p><img src="/./../Hexo%E6%90%AD%E5%BB%BAButterfly%E4%B8%BB%E9%A2%98%E8%AE%B0%E5%BD%95/image-20250911161731535.png" alt="深色主题.24效果"></p><hr><h4 id="右侧悬浮栏动态效果"><a href="#右侧悬浮栏动态效果" class="headerlink" title="右侧悬浮栏动态效果"></a>右侧悬浮栏动态效果</h4><p>C:\Code\KikaBlog\blog\themes\butterfly\layout\includes\rightside.pug</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">- const &#123; readmode, translate, darkmode, aside, chat &#125; = theme</span><br><span class="line">mixin rightsideItem(array)</span><br><span class="line">  each item in array</span><br><span class="line">    case item</span><br><span class="line">      when &#x27;readmode&#x27;</span><br><span class="line">        if globalPageType === &#x27;post&#x27; &amp;&amp; readmode</span><br><span class="line">          button#readmode(type=&quot;button&quot; title=_p(&#x27;rightside.readmode_title&#x27;))</span><br><span class="line">            i.fas.fa-book-open</span><br><span class="line">      when &#x27;translate&#x27;</span><br><span class="line">        if translate.enable</span><br><span class="line">          button#translateLink(type=&quot;button&quot; title=_p(&#x27;rightside.translate_title&#x27;))= translate.default</span><br><span class="line">      when &#x27;darkmode&#x27;</span><br><span class="line">        if darkmode.enable &amp;&amp; darkmode.button</span><br><span class="line">          button#darkmode(type=&quot;button&quot; title=_p(&#x27;rightside.night_mode_title&#x27;))</span><br><span class="line">            i.fas.fa-adjust.fa-flip</span><br><span class="line">      when &#x27;hideAside&#x27;</span><br><span class="line">        if aside.enable &amp;&amp; aside.button &amp;&amp; page.aside !== false</span><br><span class="line">          button#hide-aside-btn(type=&quot;button&quot; title=_p(&#x27;rightside.aside&#x27;))</span><br><span class="line">            i.fas.fa-arrows-alt-h</span><br><span class="line">      when &#x27;toc&#x27;</span><br><span class="line">        if showToc</span><br><span class="line">          button#mobile-toc-button.close(type=&quot;button&quot; title=_p(&quot;rightside.toc&quot;))</span><br><span class="line">            i.fas.fa-list-ul</span><br><span class="line">      when &#x27;chat&#x27;</span><br><span class="line">        if chat.rightside_button &amp;&amp; chat.use</span><br><span class="line">          button#chat-btn(type=&quot;button&quot; title=_p(&quot;rightside.chat&quot;) style=&quot;display:none&quot;)</span><br><span class="line">            i.fas.fa-message</span><br><span class="line">      when &#x27;comment&#x27;</span><br><span class="line">        if commentsJsLoad</span><br><span class="line">          a#to_comment(href=&quot;#post-comment&quot; title=_p(&quot;rightside.scroll_to_comment&quot;))</span><br><span class="line">            i.fas.fa-comments</span><br><span class="line"></span><br><span class="line">#rightside</span><br><span class="line">  - const &#123; enable, hide, show &#125; = theme.rightside_item_order</span><br><span class="line">  - const hideArray = enable ? hide &amp;&amp; hide.split(&#x27;,&#x27;) : [&#x27;readmode&#x27;,&#x27;translate&#x27;,&#x27;darkmode&#x27;,&#x27;hideAside&#x27;]</span><br><span class="line">  - const showArray = enable ? show &amp;&amp; show.split(&#x27;,&#x27;) : [&#x27;toc&#x27;,&#x27;chat&#x27;,&#x27;comment&#x27;]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  #rightside-config-hide</span><br><span class="line">    if hideArray</span><br><span class="line">      +rightsideItem(hideArray)</span><br><span class="line">  #rightside-config-show</span><br><span class="line">    if enable</span><br><span class="line">      if hide</span><br><span class="line">        button#rightside-config(type=&quot;button&quot; title=_p(&quot;rightside.setting&quot;))</span><br><span class="line">          i.fas.fa-cog.fa-beat</span><br><span class="line">    else</span><br><span class="line">      if globalPageType === &#x27;post&#x27;</span><br><span class="line">        if (readmode || translate.enable || (darkmode.enable &amp;&amp; darkmode.button))</span><br><span class="line">          button#rightside-config(type=&quot;button&quot; title=_p(&quot;rightside.setting&quot;))</span><br><span class="line">            i.fas.fa-cog.fa-beat</span><br><span class="line">      else if translate.enable || (darkmode.enable &amp;&amp; darkmode.button)</span><br><span class="line">        button#rightside-config(type=&quot;button&quot; title=_p(&quot;rightside.setting&quot;))</span><br><span class="line">          i.fas.fa-cog.fa-beat  </span><br><span class="line"></span><br><span class="line">    if showArray</span><br><span class="line">      +rightsideItem(showArray)</span><br><span class="line"></span><br><span class="line">    button#go-up(type=&quot;button&quot; title=_p(&quot;rightside.back_to_top&quot;))</span><br><span class="line">      span.scroll-percent</span><br><span class="line">      i.fas.fa-arrow-up.fa-bounce</span><br><span class="line">    button#go-down(type=&quot;button&quot; title=_p(&quot;rightside.back_to_bottom&quot;))</span><br><span class="line">      i.fas.fa-arrow-down.fa-bounce</span><br></pre></td></tr></table></figure><ul><li>修改fas.fa-cog的.fa-spin为.fa-beat</li><li>增加fas.fa-arrow-up和fas.fa-arrow-down的.fa-bounce</li><li>增加fas.fa-adjust的.fa-flip</li></ul><hr><h2 id="博客加密插件-hexo-blog-encrypt"><a href="#博客加密插件-hexo-blog-encrypt" class="headerlink" title="博客加密插件 hexo-blog-encrypt"></a>博客加密插件 hexo-blog-encrypt</h2><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install --save hexo-blog-encrypt</span><br></pre></td></tr></table></figure><p>或</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">yarn add hexo-blog-encrypt</span><br></pre></td></tr></table></figure><p>网速不好推荐使用</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cnpm install --save hexo-blog-encrypt</span><br></pre></td></tr></table></figure><p><img src="/./../Hexo%E6%90%AD%E5%BB%BAButterfly%E4%B8%BB%E9%A2%98%E8%AE%B0%E5%BD%95/image-20250924142228892.png" alt="成功安装了hexo-blog-encrypt插件"></p><h3 id="项目配置"><a href="#项目配置" class="headerlink" title="项目配置"></a>项目配置</h3><p>在hexo的_config.yml文件中添加如下代码：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 安全设置</span><br><span class="line">encrypt:</span><br><span class="line">  # 启用插件</span><br><span class="line">  enable: true</span><br><span class="line">  abstract: &quot;本文内容加密了，需要密码哦&quot;</span><br><span class="line">  message: &quot;请输入密码&quot;</span><br><span class="line">  # 错误消息设置</span><br><span class="line">  wrong_pass_message: &quot;密码错误，请重新输入&quot;</span><br><span class="line">  wrong_hash_message: &quot;认证失败，再试一试&quot;</span><br><span class="line">  # 加密算法（默认 AES，可选 RSA）</span><br><span class="line">  algorithm: &quot;aes&quot;</span><br><span class="line">  # 记住密码（默认 7 天，单位：天）</span><br><span class="line">  expire: 1</span><br><span class="line">  # 是否禁用日志记录</span><br><span class="line">  silent: false</span><br><span class="line">  # 主题样式可选 default、blink、shrink、flip、up、surge、wave、xray</span><br><span class="line">  theme: blink</span><br></pre></td></tr></table></figure><p>配置项说明：</p><ul><li>enable: 是否启用加密功能，设置为 true 启用。</li><li>abstract: 加密文章的摘要，显示在文章列表页。</li><li>message: 密码输入框的描述性文字。</li><li>wrong_pass_message: 密码错误时的提示信息。</li><li>wrong_hash_message: 解密内容无法验证时的提示信息。</li></ul><p>主题配色修改：在C:\Code\KikaBlog\blog\themes\butterfly\source\css\index.styl添加如下代码</p><figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line"><span class="comment">// hexo-blog-encrypt插件主题修改</span></span><br><span class="line"><span class="selector-class">.hbe-input-field-blink</span></span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#d89f68</span> <span class="meta">!important</span></span><br><span class="line"><span class="selector-class">.hbe-input-field-blink</span><span class="selector-pseudo">:focus</span></span><br><span class="line">  <span class="attribute">border-color</span>: <span class="number">#d89f68</span> <span class="meta">!important</span></span><br><span class="line"><span class="selector-class">.hbe-input-label-content-blink</span><span class="selector-pseudo">::after</span></span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#c97d3a</span> <span class="meta">!important</span></span><br><span class="line"><span class="selector-class">.hbe-input-field</span></span><br><span class="line">  <span class="attribute">margin</span> <span class="number">6px</span> <span class="meta">!important</span></span><br></pre></td></tr></table></figure><h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><p>在需要加密文章的头部添加如下设置：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">---</span><br><span class="line">title: ###</span><br><span class="line">date: XXXX-XX-XX XX:XX:XX</span><br><span class="line">password: &quot;你的密码必须在引号里面&quot;</span><br><span class="line">---</span><br></pre></td></tr></table></figure><hr><h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><h3 id="一劳永逸"><a href="#一劳永逸" class="headerlink" title="一劳永逸"></a>一劳永逸</h3><p>（修改styl文件好像版本更新后又要重新改还是什么的，不太懂）</p><p>干脆全部写在index.styl文件，方便管理</p><figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> <span class="built_in">hexo-config</span>(<span class="string">&#x27;css_prefix&#x27;</span>)</span><br><span class="line">  <span class="keyword">@import</span> <span class="string">&#x27;nib&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">@import</span> <span class="string">&#x27;_third-party/normalize.min.css&#x27;</span></span><br><span class="line"><span class="comment">// project</span></span><br><span class="line"><span class="keyword">@import</span> <span class="string">&#x27;var&#x27;</span></span><br><span class="line"><span class="keyword">@import</span> <span class="string">&#x27;_global/*&#x27;</span></span><br><span class="line"><span class="keyword">@import</span> <span class="string">&#x27;_highlight/highlight&#x27;</span></span><br><span class="line"><span class="keyword">@import</span> <span class="string">&#x27;_page/*&#x27;</span></span><br><span class="line"><span class="keyword">@import</span> <span class="string">&#x27;_layout/*&#x27;</span></span><br><span class="line"><span class="keyword">@import</span> <span class="string">&#x27;_tags/*&#x27;</span></span><br><span class="line"><span class="keyword">@import</span> <span class="string">&#x27;_mode/*&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// search</span></span><br><span class="line"><span class="keyword">@import</span> <span class="string">&#x27;_search/index&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// ======================================================================================</span></span><br><span class="line"><span class="comment">// 确保图标正常显示</span></span><br><span class="line"><span class="comment">// ===========================================</span></span><br><span class="line"><span class="comment">// 全局：设置所有伪元素 :before 使用 FontAwesome 字体</span></span><br><span class="line">*<span class="selector-pseudo">:before</span></span><br><span class="line">  <span class="attribute">font-family</span>: FontAwesome <span class="meta">!important</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// ======================================================================================</span></span><br><span class="line"><span class="comment">// 浅色模式：统一半透明背景样式</span></span><br><span class="line"><span class="comment">// 仅在非暗色主题时生效</span></span><br><span class="line"><span class="comment">// ===========================================</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 文章阅读区域背景</span></span><br><span class="line"><span class="selector-tag">html</span><span class="selector-pseudo">:not</span>(<span class="selector-attr">[data-theme=<span class="string">&#x27;dark&#x27;</span>]</span>) <span class="selector-id">#post</span></span><br><span class="line">  <span class="attribute">background</span>: <span class="built_in">rgba</span>(<span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, .<span class="number">94</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 侧栏所有卡片</span></span><br><span class="line"><span class="comment">// 说明：匹配包含 .card-widget 的全部卡片类型（recent-post/announcement/info 等）</span></span><br><span class="line"><span class="selector-tag">html</span><span class="selector-pseudo">:not</span>(<span class="selector-attr">[data-theme=<span class="string">&#x27;dark&#x27;</span>]</span>) <span class="selector-id">#aside-content</span> <span class="selector-class">.card-widget</span></span><br><span class="line">  <span class="attribute">background</span>: <span class="built_in">rgba</span>(<span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, .<span class="number">94</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 首页文章卡片</span></span><br><span class="line"><span class="selector-tag">html</span><span class="selector-pseudo">:not</span>(<span class="selector-attr">[data-theme=<span class="string">&#x27;dark&#x27;</span>]</span>) <span class="selector-id">#recent-posts</span> <span class="selector-class">.recent-post-item</span></span><br><span class="line">  <span class="attribute">background</span>: <span class="built_in">rgba</span>(<span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, .<span class="number">94</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// ======================================================================================</span></span><br><span class="line"><span class="comment">// 文章页头部背景设置</span></span><br><span class="line"><span class="comment">// 将文章页头部 .post-bg 的背景强制设为透明，避免使用封面图作为背景</span></span><br><span class="line"><span class="comment">// ===========================================</span></span><br><span class="line"><span class="selector-id">#page-header</span><span class="selector-class">.post-bg</span></span><br><span class="line">  <span class="attribute">background</span>: transparent <span class="meta">!important</span></span><br></pre></td></tr></table></figure><p>将特定样式设置写在index.styl文件，方便管理。并从原始文件中移除重复的样式代码</p><h3 id="其他美化思路"><a href="#其他美化思路" class="headerlink" title="其他美化思路"></a>其他美化思路</h3><ul><li>针对归档页面，分类页面，tags页面（标签云页面）关闭mask背景色遮罩并设置图片透明度。我想要的不是透明度而是边缘渐变透明，不要让图片分割感这么重</li></ul><h2 id="butterfly博客评论"><a href="#butterfly博客评论" class="headerlink" title="butterfly博客评论"></a>butterfly博客评论</h2><p>主题支持多种评论系统，你可以根据自己的喜好选择一种。你也可以选择双评论，只需要配置两个评论（第一个为默认显示）</p><p><a href="https://butterfly.js.org/posts/4aa8abbe/">Butterfly 文檔(三) 主題配置 | Butterfly</a>（<code>Twikoo</code> 是一个简洁、安全、无后端的静态网站评论系统，基于腾讯云开发。）</p><p>上面列出了好多种，最后我选择<code>Twikoo</code> 的Hugging Face：<a href="https://twikoo.js.org/quick-start.html">快速上手 | Twikoo 文档</a></p><p>只需要把获取到的 环境ID (envId) 填写到配置上去就行：</p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">twikoo:</span></span><br><span class="line">  <span class="attr">envId:</span>           <span class="comment"># 环境 ID</span></span><br><span class="line">  <span class="attr">region:</span>          <span class="comment"># 环境地域，默认为 ap-shanghai，如果您的环境地域不是上海，需传此参数</span></span><br><span class="line">  <span class="attr">visitor:</span> <span class="literal">false</span>   <span class="comment"># 是否显示文章阅读数</span></span><br><span class="line">  <span class="attr">option:</span>          <span class="comment"># 可选配置，开启 visitor 后，文章页的访问人数将改为 Twikoo 提供，而不是 不蒜子</span></span><br></pre></td></tr></table></figure><h3 id="Twikoo快速上手"><a href="#Twikoo快速上手" class="headerlink" title="Twikoo快速上手"></a>Twikoo快速上手</h3><p>Twikoo 分为云函数和前端两部分，若要在您的网站上集成 Twikoo，您需要同时部署云函数和前端，部署时请注意保持二者版本一致。</p><ul><li><a href="https://twikoo.js.org/backend.html">云函数部署</a> 有多种方式，请选择适合自己的部署平台。</li><li><a href="https://twikoo.js.org/frontend.html">前端部署</a> 有 2 种方式，如果您的网站主题支持 Twikoo，您只需在配置文件中指定 Twikoo 即可；如果您的网站主题不支持 Twikoo，您需要修改源码手动引入 Twikoo 的 js 文件并初始化。</li><li>若您已部署旧版本 Twikoo，请参考 <a href="https://twikoo.js.org/update.html">版本更新</a> 升级云函数和前端版本。</li></ul><p><img src="/./../Hexo%E6%90%AD%E5%BB%BAButterfly%E4%B8%BB%E9%A2%98%E8%AE%B0%E5%BD%95/image-20250905160123616.png" alt="云函数部署我选择"></p><h3 id="Hugging-Face-部署"><a href="#Hugging-Face-部署" class="headerlink" title="Hugging Face 部署"></a>Hugging Face 部署</h3><blockquote><p>注意：Hugging Face 部署的环境，由于默认的邮件端口被屏蔽，无法使用邮件功能。详见 <a href="https://github.com/twikoojs/twikoo/issues/638">twikoo&#x2F;issues&#x2F;638</a></p></blockquote><ol><li>申请 <a href="https://account.mongodb.com/account/register">MongoDB Atlas</a> 账号，获取 MongoDB 连接字符串。<a href="https://mongodb.ac.cn/docs/guides/atlas/account/">注册指南 - MongoDB 文档</a></li><li>申请 <a href="https://huggingface.co/join">Hugging Face</a> 账号</li><li>登录，点击 Spaces - Create new Space</li></ol><p><a href="https://twikoo.js.org/assets/hugging-1.qykHscdz.png"><img src="https://twikoo.js.org/assets/hugging-1.qykHscdz.png" alt="img"></a></p><ol><li>输入 Space name，Select the Space SDK 选择 Docker，Choose a Docker template 选择 Blank，Space hardware 选择 FREE，选择 Public，点击 Create Space</li></ol><p><a href="https://twikoo.js.org/assets/hugging-2.BZLt3AFG.png"><img src="https://twikoo.js.org/assets/hugging-2.BZLt3AFG.png" alt="img"></a></p><ol><li>进入刚刚创建的 Space，点击页面上方的 Settings，滚动到 Variables and secrets 部分，点击 New secret，Name 输入 <code>MONGODB_URI</code>，Value 输入前面记录的数据库连接字符串，点击 Save</li></ol><p><a href="https://twikoo.js.org/assets/hugging-3.BE7bV_x9.png"><img src="https://twikoo.js.org/assets/hugging-3.BE7bV_x9.png" alt="img"></a></p><ol><li>点击页面上方的 Files - Add file - Create a new file</li></ol><p><a href="https://twikoo.js.org/assets/hugging-4.IZDT8YRp.png"><img src="https://twikoo.js.org/assets/hugging-4.IZDT8YRp.png" alt="img"></a></p><ol><li>在 Name your file 中输入 <code>Dockerfile</code>，在 Edit 区域输入以下内容</li></ol><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">FROM imaegoo/twikoo</span><br><span class="line">ENV TWIKOO_PORT 7860</span><br><span class="line">EXPOSE 7860</span><br></pre></td></tr></table></figure><p><a href="https://twikoo.js.org/assets/hugging-5.Cw4bsoD7.png"><img src="https://twikoo.js.org/assets/hugging-5.Cw4bsoD7.png" alt="img"></a></p><ol><li>点击 Commit new file to main</li><li>点击右上角 Settings 右方的菜单（三个点）图标 - Embed this Space，Direct URL 下的内容（例如 <code>https://xxx-xxx.hf.space</code>）即为您的环境 id</li></ol><p><a href="https://twikoo.js.org/assets/hugging-6.CxsVPwFh.png"><img src="https://twikoo.js.org/assets/hugging-6.CxsVPwFh.png" alt="img"></a></p><h4 id="如果你需要自定义域名"><a href="#如果你需要自定义域名" class="headerlink" title="如果你需要自定义域名"></a>如果你需要自定义域名</h4><blockquote><p>自定义域名教程由 <a href="https://github.com/Hoshino-Yumetsuki">Hoshino-Yumetsuki</a> 提供</p><p>ps：除了 <code>CF_ZERO_TRUST_TOKEN</code> 这个环境变量以外，其他环境变量的配置方式与上一步相同</p></blockquote><ol><li>申请 Cloudflare Zero Trust，关于申请方式请自行查找</li></ol><p><a href="https://twikoo.js.org/assets/hugging-7.ey7RVDUh.png"><img src="https://twikoo.js.org/assets/hugging-7.ey7RVDUh.png" alt="img"></a></p><ol><li>添加一条隧道，连接方式选择 Cloudflared，名称任意</li></ol><p><a href="https://twikoo.js.org/assets/hugging-8.bn1zLPri.png"><img src="https://twikoo.js.org/assets/hugging-8.bn1zLPri.png" alt="img"></a></p><ol><li>添加一个 Public Hostname，回源选择 HTTP，端口选择 8080</li><li>Clone Twikoo 仓库，找到 <code>src\server\hf-space</code></li><li>去 Hugging Face 创建一个 Space，然后 Clone 下来，将 hf-space 文件夹内的所有内容复制进去</li><li>在 Hugging Face Space 的设置中添加一个环境变量，变量名 <code>CF_ZERO_TRUST_TOKEN</code>，值是 Tunnels 给的令牌（删掉 <code>cloudflared.exe service install</code>，只保留令牌部分）</li></ol><p><a href="https://twikoo.js.org/assets/hugging-9.BfxLMyMQ.png"><img src="https://twikoo.js.org/assets/hugging-9.BfxLMyMQ.png" alt="img"></a></p><ol><li>Push 到 Hugging Face Space 仓库</li></ol><h2 id="hexo使用Mermaid"><a href="#hexo使用Mermaid" class="headerlink" title="hexo使用Mermaid"></a>hexo使用Mermaid</h2><h2 id="参考："><a href="#参考：" class="headerlink" title="参考："></a>参考：</h2><p><a href="https://butterfly.js.org/categories/Docs%E6%96%87%E6%AA%94/">分類: Docs文檔 | Butterfly</a></p><p><a href="https://blog.csdn.net/mjh1667002013/article/details/129290903">【Hexo】Hexo搭建Butterfly主题并快速美化_hexo butterfly-CSDN博客</a></p><p><a href="https://nickxu.me/2022/02/20/Hexo-Butterfly-%E5%BB%BA%E7%AB%99%E6%8C%87%E5%8D%97%EF%BC%88%E4%BA%94%EF%BC%89%E6%97%A5%E5%B8%B8%E5%86%99%E4%BD%9C/">Hexo + Butterfly 建站指南（五）日常写作 | NX の 博客</a></p><p><a href="https://korgs.blog.csdn.net/article/details/131094362?spm=1001.2101.3001.6650.3&utm_medium=distribute.pc_relevant.none-task-blog-2~default~BlogCommendFromBaidu~Rate-3-131094362-blog-135929884.235%5Ev43%5Epc_blog_bottom_relevance_base8&depth_1-utm_source=distribute.pc_relevant.none-task-blog-2~default~BlogCommendFromBaidu~Rate-3-131094362-blog-135929884.235%5Ev43%5Epc_blog_bottom_relevance_base8&utm_relevant_index=6">基于Hexo和Butterfly创建个人技术博客，(7) 配置butterfly主题搭建博客网站主体UI框架_hexo butterfly-CSDN博客</a></p>]]></content>
      
      
      <categories>
          
          <category> blog </category>
          
      </categories>
      
      
    </entry>
    
    
  
  
</search>
